[
  {
    "question_no.": 1,
    "Question": "What does CI in CI/CD stand for?",
    "Option1": "Continuous Implementation",
    "Option2": "Continuous Integration",
    "Option3": "Continuous Infrastructure",
    "Option4": "Cloud Integration",
    "Answer": "Continuous Integration"
  },
  {
    "question_no.": 2,
    "Question": "What does CD in CI/CD primarily refer to?",
    "Option1": "Continuous Design and Continuous Development",
    "Option2": "Continuous Delivery and Continuous Deployment",
    "Option3": "Continuous Data and Continuous Documentation",
    "Option4": "Centralized Deployment",
    "Answer": "Continuous Delivery and Continuous Deployment"
  },
  {
    "question_no.": 3,
    "Question": "Which of the following best describes Continuous Integration?",
    "Option1": "Manual merging of code changes at the end of a sprint.",
    "Option2": "Developers frequently merge their code changes into a central repository, followed by automated builds and tests.",
    "Option3": "Deploying code to production every night.",
    "Option4": "Only testing code once a week.",
    "Answer": "Developers frequently merge their code changes into a central repository, followed by automated builds and tests."
  },
  {
    "question_no.": 4,
    "Question": "What is the main goal of Continuous Integration?",
    "Option1": "To reduce the number of features in a release.",
    "Option2": "To find and address integration bugs early in the development cycle.",
    "Option3": "To eliminate the need for testing.",
    "Option4": "To manually deploy code to production.",
    "Answer": "To find and address integration bugs early in the development cycle."
  },
  {
    "question_no.": 5,
    "Question": "Which tool is commonly used for version control in a CI/CD pipeline?",
    "Option1": "Jira",
    "Option2": "Git",
    "Option3": "Slack",
    "Option4": "Excel",
    "Answer": "Git"
  },
  {
    "question_no.": 6,
    "Question": "What is a 'build artifact' in the context of CI?",
    "Option1": "The original source code.",
    "Option2": "The executable output or package generated by a successful build.",
    "Option3": "A document describing the build process.",
    "Option4": "A log file of build errors.",
    "Answer": "The executable output or package generated by a successful build."
  },
  {
    "question_no.": 7,
    "Question": "What role do automated tests play in Continuous Integration?",
    "Option1": "They are optional and can be skipped to save time.",
    "Option2": "They ensure the quality of the integrated code and catch regressions quickly.",
    "Option3": "They are only run once a month.",
    "Option4": "They replace manual code reviews entirely.",
    "Answer": "They ensure the quality of the integrated code and catch regressions quickly."
  },
  {
    "question_no.": 8,
    "Question": "What is Continuous Delivery?",
    "Option1": "Manually deploying code to production when requested.",
    "Option2": "An extension of CI where code changes are automatically built, tested, and prepared for release to production.",
    "Option3": "Delivering software to customers on physical media.",
    "Option4": "Only delivering documentation to customers.",
    "Answer": "An extension of CI where code changes are automatically built, tested, and prepared for release to production."
  },
  {
    "question_no.": 9,
    "Question": "What is Continuous Deployment?",
    "Option1": "Manually deploying every release to production after approval.",
    "Option2": "Automatically deploying every change that passes all stages of the pipeline to production.",
    "Option3": "Deploying only major releases to production.",
    "Option4": "Deploying code only to testing environments.",
    "Answer": "Automatically deploying every change that passes all stages of the pipeline to production."
  },
  {
    "question_no.": 10,
    "Question": "What is the key difference between Continuous Delivery and Continuous Deployment?",
    "Option1": "Continuous Delivery means manual deployment, Continuous Deployment means automated deployment.",
    "Option2": "Continuous Delivery requires human approval for production deployment, Continuous Deployment does not.",
    "Option3": "Continuous Delivery is faster than Continuous Deployment.",
    "Option4": "There is no difference, the terms are interchangeable.",
    "Answer": "Continuous Delivery requires human approval for production deployment, Continuous Deployment does not."
  },
  {
    "question_no.": 11,
    "Question": "Which stage typically comes first in a CI/CD pipeline?",
    "Option1": "Deployment",
    "Option2": "Testing",
    "Option3": "Build",
    "Option4": "Code (Version Control)",
    "Answer": "Code (Version Control)"
  },
  {
    "question_no.": 12,
    "Question": "What is a 'pipeline' in CI/CD?",
    "Option1": "A single script that builds the application.",
    "Option2": "An automated workflow that takes code from version control through building, testing, and deployment.",
    "Option3": "A chat channel for developers.",
    "Option4": "A document describing manual deployment steps.",
    "Answer": "An automated workflow that takes code from version control through building, testing, and deployment."
  },
  {
    "question_no.": 13,
    "Question": "Why is automation crucial in CI/CD?",
    "Option1": "To increase manual effort and reduce speed.",
    "Option2": "To minimize human error, increase speed, and ensure consistency.",
    "Option3": "To make the process more complex.",
    "Option4": "To replace all human roles in development.",
    "Answer": "To minimize human error, increase speed, and ensure consistency."
  },
  {
    "question_no.": 14,
    "Question": "What is a 'rollback' in the context of deployments?",
    "Option1": "Deploying a new feature.",
    "Option2": "Reverting a deployed application to a previous stable version.",
    "Option3": "A type of test case.",
    "Option4": "A security patch application.",
    "Answer": "Reverting a deployed application to a previous stable version."
  },
  {
    "question_no.": 15,
    "Question": "What is a 'breaking change' in software development?",
    "Option1": "A new feature that improves performance.",
    "Option2": "A change that introduces new functionality without affecting existing code.",
    "Option3": "A change that alters existing functionality in a way that is incompatible with previous versions.",
    "Option4": "A bug fix.",
    "Answer": "A change that alters existing functionality in a way that is incompatible with previous versions."
  },
  {
    "question_no.": 16,
    "Question": "Which of these is NOT a common benefit of CI/CD?",
    "Option1": "Faster time to market",
    "Option2": "Increased defect detection early",
    "Option3": "Higher deployment frequency",
    "Option4": "Reduced need for version control",
    "Answer": "Reduced need for version control"
  },
  {
    "question_no.": 17,
    "Question": "What is a 'trigger' in a CI/CD pipeline?",
    "Option1": "A manual approval step.",
    "Option2": "An event that initiates the execution of the pipeline (e.g., code commit).",
    "Option3": "A log file entry.",
    "Option4": "A deployment artifact.",
    "Answer": "An event that initiates the execution of the pipeline (e.g., code commit)."
  },
  {
    "question_no.": 18,
    "Question": "What is 'Infrastructure as Code' (IaC) in relation to CI/CD?",
    "Option1": "Manually provisioning servers.",
    "Option2": "Managing and provisioning infrastructure using code and automation.",
    "Option3": "Writing code for application logic only.",
    "Option4": "Using spreadsheets to track infrastructure.",
    "Answer": "Managing and provisioning infrastructure using code and automation."
  },
  {
    "question_no.": 19,
    "Question": "Which tool is a popular open-source automation server used for CI/CD?",
    "Option1": "Jira",
    "Option2": "Jenkins",
    "Option3": "Confluence",
    "Option4": "Microsoft Word",
    "Answer": "Jenkins"
  },
  {
    "question_no.": 20,
    "Question": "What are 'unit tests' in a CI/CD context?",
    "Option1": "Tests that verify the entire application's functionality.",
    "Option2": "Tests that verify individual components or functions of the software in isolation.",
    "Option3": "Tests performed by end-users.",
    "Option4": "Tests that check database performance.",
    "Answer": "Tests that verify individual components or functions of the software in isolation."
  },
  {
    "question_no.": 21,
    "Question": "What are 'integration tests' in a CI/CD context?",
    "Option1": "Tests that check the performance of a single module.",
    "Option2": "Tests that verify the interactions between different software modules or components.",
    "Option3": "Tests performed only on the user interface.",
    "Option4": "Tests that check network connectivity.",
    "Answer": "Tests that verify the interactions between different software modules or components."
  },
  {
    "question_no.": 22,
    "Question": "What are 'end-to-end tests' in a CI/CD context?",
    "Option1": "Tests that focus on individual lines of code.",
    "Option2": "Tests that simulate real user scenarios and verify the entire system's functionality from start to finish.",
    "Option3": "Tests that only check the database.",
    "Option4": "Tests that are run only on production.",
    "Answer": "Tests that simulate real user scenarios and verify the entire system's functionality from start to finish."
  },
  {
    "question_no.": 23,
    "Question": "What is a 'pipeline stage'?",
    "Option1": "A single command in a script.",
    "Option2": "A distinct phase in the CI/CD pipeline, such as Build, Test, or Deploy.",
    "Option3": "A specific environment where code is deployed.",
    "Option4": "A bug tracking category.",
    "Answer": "A distinct phase in the CI/CD pipeline, such as Build, Test, or Deploy."
  },
  {
    "question_no.": 24,
    "Question": "What is the purpose of a 'staging environment' in CI/CD?",
    "Option1": "Where developers write code.",
    "Option2": "A production-like environment used for final testing before deployment to production.",
    "Option3": "An environment for unit testing.",
    "Option4": "An environment for managing version control.",
    "Answer": "A production-like environment used for final testing before deployment to production."
  },
  {
    "question_no.": 25,
    "Question": "What is 'Canary Deployment'?",
    "Option1": "Deploying the new version to all users simultaneously.",
    "Option2": "Deploying the new version to a small subset of users first, then gradually rolling it out to more users.",
    "Option3": "Deploying the old version of the software.",
    "Option4": "Deploying only security patches.",
    "Answer": "Deploying the new version to a small subset of users first, then gradually rolling it out to more users."
  },
  {
    "question_no.": 26,
    "Question": "What is 'Blue/Green Deployment'?",
    "Option1": "Deploying updates to only one server.",
    "Option2": "Running two identical production environments (Blue and Green) and shifting traffic between them to minimize downtime during deployment.",
    "Option3": "Deploying in two different colors.",
    "Option4": "A deployment strategy for mobile apps only.",
    "Answer": "Running two identical production environments (Blue and Green) and shifting traffic between them to minimize downtime during deployment."
  },
  {
    "question_no.": 27,
    "Question": "What is the primary benefit of Blue/Green Deployment?",
    "Option1": "Reduces infrastructure costs.",
    "Option2": "Minimizes downtime and provides an easy rollback mechanism.",
    "Option3": "Increases manual intervention.",
    "Option4": "It's only for development environments.",
    "Answer": "Minimizes downtime and provides an easy rollback mechanism."
  },
  {
    "question_no.": 28,
    "Question": "What is 'A/B Testing' in the context of deployments?",
    "Option1": "A method to test two different versions of the same application feature with different user groups simultaneously.",
    "Option2": "A type of database test.",
    "Option3": "Testing only one version of the software.",
    "Option4": "Comparing the performance of two different servers.",
    "Answer": "A method to test two different versions of the same application feature with different user groups simultaneously."
  },
  {
    "question_no.": 29,
    "Question": "What is a 'DevOps' culture?",
    "Option1": "A culture where developers and operations teams work in silos.",
    "Option2": "A culture that emphasizes collaboration, communication, and automation between development and operations teams.",
    "Option3": "A culture focused only on coding.",
    "Option4": "A culture that discourages automation.",
    "Answer": "A culture that emphasizes collaboration, communication, and automation between development and operations teams."
  },
  {
    "question_no.": 30,
    "Question": "How does CI/CD contribute to DevOps?",
    "Option1": "It separates development and operations roles.",
    "Option2": "It provides the automated processes and tools essential for implementing DevOps principles.",
    "Option3": "It makes development slower.",
    "Option4": "It focuses solely on manual processes.",
    "Answer": "It provides the automated processes and tools essential for implementing DevOps principles."
  },
  {
    "question_no.": 31,
    "Question": "What is a 'Dockerfile' in the context of CI/CD?",
    "Option1": "A document for manual deployment.",
    "Option2": "A text file that contains instructions for building a Docker image.",
    "Option3": "A file for tracking project progress.",
    "Option4": "A configuration for a virtual machine.",
    "Answer": "A text file that contains instructions for building a Docker image."
  },
  {
    "question_no.": 32,
    "Question": "Which tool is used for containerization in CI/CD pipelines?",
    "Option1": "Jenkins",
    "Option2": "Git",
    "Option3": "Docker",
    "Option4": "Jira",
    "Answer": "Docker"
  },
  {
    "question_no.": 33,
    "Question": "What is a 'Container Registry'?",
    "Option1": "A list of running containers.",
    "Option2": "A centralized repository for storing and managing Docker images.",
    "Option3": "A tool for creating Dockerfiles.",
    "Option4": "A database of container vulnerabilities.",
    "Answer": "A centralized repository for storing and managing Docker images."
  },
  {
    "question_no.": 34,
    "Question": "What is 'Orchestration' in the context of containers in CI/CD?",
    "Option1": "Manually starting and stopping containers.",
    "Option2": "Automated management, scaling, and deployment of containerized applications.",
    "Option3": "Building Docker images.",
    "Option4": "Storing container logs.",
    "Answer": "Automated management, scaling, and deployment of containerized applications."
  },
  {
    "question_no.": 35,
    "Question": "Which tool is a popular container orchestration platform?",
    "Option1": "Git",
    "Option2": "Docker Swarm",
    "Option3": "Kubernetes",
    "Option4": "Ansible",
    "Answer": "Kubernetes"
  },
  {
    "question_no.": 36,
    "Question": "What is a 'Helm Chart' in Kubernetes?",
    "Option1": "A tool for monitoring Kubernetes clusters.",
    "Option2": "A package manager for Kubernetes applications, used to define, install, and upgrade applications.",
    "Option3": "A type of Kubernetes pod.",
    "Option4": "A visualization of Kubernetes metrics.",
    "Answer": "A package manager for Kubernetes applications, used to define, install, and upgrade applications."
  },
  {
    "question_no.": 37,
    "Question": "What is a 'Git hook'?",
    "Option1": "A way to connect Git to a database.",
    "Option2": "Scripts that Git executes before or after events like commit, push, or receive.",
    "Option3": "A feature for creating new Git branches.",
    "Option4": "A method for resolving merge conflicts.",
    "Answer": "Scripts that Git executes before or after events like commit, push, or receive."
  },
  {
    "question_no.": 38,
    "Question": "What is 'Trunk-Based Development'?",
    "Option1": "A development model where developers work on long-lived feature branches.",
    "Option2": "A development model where developers merge small, frequent changes into a single main branch (trunk).",
    "Option3": "A development model focused on backend development only.",
    "Option4": "A development model where code is never merged.",
    "Answer": "A development model where developers merge small, frequent changes into a single main branch (trunk)."
  },
  {
    "question_no.": 39,
    "Question": "Why is Trunk-Based Development often preferred in CI/CD?",
    "Option1": "It increases the complexity of merges.",
    "Option2": "It reduces merge conflicts and allows for continuous integration of small changes.",
    "Option3": "It leads to fewer deployments.",
    "Option4": "It's only for small teams.",
    "Answer": "It reduces merge conflicts and allows for continuous integration of small changes."
  },
  {
    "question_no.": 40,
    "Question": "What is a 'feature flag' (or feature toggle)?",
    "Option1": "A flag used in Git to mark new features.",
    "Option2": "A technique that allows you to turn specific features on or off in production without deploying new code.",
    "Option3": "A build configuration setting.",
    "Option4": "A type of automated test.",
    "Answer": "A technique that allows you to turn specific features on or off in production without deploying new code."
  },
  {
    "question_no.": 41,
    "Question": "What is the benefit of using feature flags in CI/CD?",
    "Option1": "It forces all features to be deployed at once.",
    "Option2": "It enables continuous delivery of incomplete features and A/B testing in production.",
    "Option3": "It replaces the need for automated tests.",
    "Option4": "It complicates rollbacks.",
    "Answer": "It enables continuous delivery of incomplete features and A/B testing in production."
  },
  {
    "question_no.": 42,
    "Question": "What is 'monitoring' in a CI/CD pipeline?",
    "Option1": "Only checking if the deployment succeeded.",
    "Option2": "Continuously observing the performance, health, and availability of applications and infrastructure.",
    "Option3": "A one-time check after deployment.",
    "Option4": "Writing code for new features.",
    "Answer": "Continuously observing the performance, health, and availability of applications and infrastructure."
  },
  {
    "question_no.": 43,
    "Question": "What is 'logging' in the context of CI/CD?",
    "Option1": "Only recording errors.",
    "Option2": "The process of capturing and storing events, messages, and data generated by applications and infrastructure.",
    "Option3": "Creating backups of code.",
    "Option4": "Sending emails to team members.",
    "Answer": "The process of capturing and storing events, messages, and data generated by applications and infrastructure."
  },
  {
    "question_no.": 44,
    "Question": "Which tool is commonly used for centralized logging?",
    "Option1": "Git",
    "Option2": "Jenkins",
    "Option3": "ELK Stack (Elasticsearch, Logstash, Kibana)",
    "Option4": "Jira",
    "Answer": "ELK Stack (Elasticsearch, Logstash, Kibana)"
  },
  {
    "question_no.": 45,
    "Question": "What are 'metrics' in the context of monitoring?",
    "Option1": "Qualitative descriptions of system behavior.",
    "Option2": "Quantitative measurements of system performance and health (e.g., CPU utilization, response time).",
    "Option3": "Text-based log entries.",
    "Option4": "User feedback.",
    "Answer": "Quantitative measurements of system performance and health (e.g., CPU utilization, response time)."
  },
  {
    "question_no.": 46,
    "Question": "What is 'alerting' in CI/CD monitoring?",
    "Option1": "Only creating dashboards.",
    "Option2": "Sending notifications (e.g., email, SMS) when predefined thresholds for metrics are crossed.",
    "Option3": "Manually checking logs for issues.",
    "Option4": "Performing system backups.",
    "Answer": "Sending notifications (e.g., email, SMS) when predefined thresholds for metrics are crossed."
  },
  {
    "question_no.": 47,
    "Question": "What is a 'dashboard' in a monitoring system?",
    "Option1": "A text file of errors.",
    "Option2": "A visual display of key metrics, logs, and alerts, providing an overview of system health.",
    "Option3": "A tool for writing code.",
    "Option4": "A report of manual tests.",
    "Answer": "A visual display of key metrics, logs, and alerts, providing an overview of system health."
  },
  {
    "question_no.": 48,
    "Question": "What is 'Traceability' in CI/CD?",
    "Option1": "The ability to track user behavior.",
    "Option2": "The ability to link every code change, test result, and deployment to requirements and issues.",
    "Option3": "Tracking network connections.",
    "Option4": "Monitoring external APIs.",
    "Answer": "The ability to link every code change, test result, and deployment to requirements and issues."
  },
  {
    "question_no.": 49,
    "Question": "Why is traceability important in CI/CD?",
    "Option1": "It makes the pipeline more complex.",
    "Option2": "It helps in auditing, debugging, and understanding the impact of changes.",
    "Option3": "It reduces the need for documentation.",
    "Option4": "It's only for compliance purposes.",
    "Answer": "It helps in auditing, debugging, and understanding the impact of changes."
  },
  {
    "question_no.": 50,
    "Question": "What is a 'Post-Mortem' in the context of CI/CD and incidents?",
    "Option1": "A celebration after a successful deployment.",
    "Option2": "A structured process to analyze incidents (failures) to understand root causes and prevent recurrence.",
    "Option3": "A daily stand-up meeting.",
    "Option4": "A document outlining future features.",
    "Answer": "A structured process to analyze incidents (failures) to understand root causes and prevent recurrence."
  },
  {
    "question_no.": 51,
    "Question": "What is a 'Runbook' in operations?",
    "Option1": "A list of features to be developed.",
    "Option2": "A set of documented procedures used to perform routine operational tasks or respond to incidents.",
    "Option3": "A testing script.",
    "Option4": "A development environment setup guide.",
    "Answer": "A set of documented procedures used to perform routine operational tasks or respond to incidents."
  },
  {
    "question_no.": 52,
    "Question": "How does CI/CD relate to 'Agile' methodologies?",
    "Option1": "CI/CD is a complete replacement for Agile.",
    "Option2": "CI/CD provides the technical practices and automation that enable Agile teams to deliver frequently and reliably.",
    "Option3": "Agile discourages automation, while CI/CD encourages it.",
    "Option4": "They are unrelated concepts.",
    "Answer": "CI/CD provides the technical practices and automation that enable Agile teams to deliver frequently and reliably."
  },
  {
    "question_no.": 53,
    "Question": "What is 'Shift Left' in the context of CI/CD and testing?",
    "Option1": "Moving testing to later stages of the development cycle.",
    "Option2": "Performing testing and quality assurance activities earlier in the development lifecycle.",
    "Option3": "Shifting responsibility to the left side of the team.",
    "Option4": "Changing the programming language.",
    "Answer": "Performing testing and quality assurance activities earlier in the development lifecycle."
  },
  {
    "question_no.": 54,
    "Question": "What is 'Code Coverage'?",
    "Option1": "The percentage of lines of code that are changed in a commit.",
    "Option2": "The percentage of your application's source code that is executed by tests.",
    "Option3": "The amount of documentation written for the code.",
    "Option4": "The number of comments in the code.",
    "Answer": "The percentage of your application's source code that is executed by tests."
  },
  {
    "question_no.": 55,
    "Question": "Why is high code coverage desirable in CI/CD?",
    "Option1": "It means the code is longer.",
    "Option2": "It indicates that a larger portion of the code is being validated by tests, reducing the risk of bugs.",
    "Option3": "It reduces build times.",
    "Option4": "It makes the code less readable.",
    "Answer": "It indicates that a larger portion of the code is being validated by tests, reducing the risk of bugs."
  },
  {
    "question_no.": 56,
    "Question": "What is a 'Static Code Analysis' tool?",
    "Option1": "A tool that executes code to find bugs.",
    "Option2": "A tool that analyzes source code without executing it to find potential errors, security vulnerabilities, or style violations.",
    "Option3": "A tool for managing database connections.",
    "Option4": "A tool for deploying applications.",
    "Answer": "A tool that analyzes source code without executing it to find potential errors, security vulnerabilities, or style violations."
  },
  {
    "question_no.": 57,
    "Question": "What is 'Dynamic Code Analysis'?",
    "Option1": "Analyzing code without running it.",
    "Option2": "Analyzing code while it is executing to find issues like memory leaks or performance bottlenecks.",
    "Option3": "Analyzing only the documentation.",
    "Option4": "Analyzing the build logs.",
    "Answer": "Analyzing code while it is executing to find issues like memory leaks or performance bottlenecks."
  },
  {
    "question_no.": 58,
    "Question": "What is a 'Security Scan' in a CI/CD pipeline?",
    "Option1": "Checking firewall rules manually.",
    "Option2": "Automated tools that identify vulnerabilities in code, dependencies, or infrastructure configurations.",
    "Option3": "A manual security audit.",
    "Option4": "Encrypting data at rest.",
    "Answer": "Automated tools that identify vulnerabilities in code, dependencies, or infrastructure configurations."
  },
  {
    "question_no.": 59,
    "Question": "What is 'Artifact Repository' in CI/CD?",
    "Option1": "A place to store source code.",
    "Option2": "A system for storing, managing, and versioning binary artifacts (e.g., compiled code, libraries, Docker images).",
    "Option3": "A database for user data.",
    "Option4": "A tool for writing deployment scripts.",
    "Answer": "A system for storing, managing, and versioning binary artifacts (e.g., compiled code, libraries, Docker images)."
  },
  {
    "question_no.": 60,
    "Question": "Why is an Artifact Repository important?",
    "Option1": "It makes builds slower.",
    "Option2": "It ensures consistent, reproducible builds and provides a single source of truth for deployed artifacts.",
    "Option3": "It replaces version control.",
    "Option4": "It only stores documentation.",
    "Answer": "It ensures consistent, reproducible builds and provides a single source of truth for deployed artifacts."
  },
  {
    "question_no.": 61,
    "Question": "What is 'GitFlow'?",
    "Option1": "A single Git branch strategy.",
    "Option2": "A branching model that defines strict rules for branching and merging, often used for release management.",
    "Option3": "A tool for automating Git commands.",
    "Option4": "A graphical user interface for Git.",
    "Answer": "A branching model that defines strict rules for branching and merging, often used for release management."
  },
  {
    "question_no.": 62,
    "Question": "What is a 'release branch' in GitFlow?",
    "Option1": "A branch for daily development.",
    "Option2": "A branch created to prepare for a new production release, allowing for final bug fixes and minor features.",
    "Option3": "A branch for experimental features.",
    "Option4": "A branch that is never merged.",
    "Answer": "A branch created to prepare for a new production release, allowing for final bug fixes and minor features."
  },
  {
    "question_no.": 63,
    "Question": "What is a 'hotfix branch' in GitFlow?",
    "Option1": "A branch for new major features.",
    "Option2": "A branch used to quickly patch production issues without affecting ongoing development.",
    "Option3": "A branch for performance tuning.",
    "Option4": "A branch for testing only.",
    "Answer": "A branch used to quickly patch production issues without affecting ongoing development."
  },
  {
    "question_no.": 64,
    "Question": "What is a 'pull request' (or merge request)?",
    "Option1": "A command to delete a branch.",
    "Option2": "A mechanism for developers to propose changes and have them reviewed before merging into a main branch.",
    "Option3": "A way to download code from a repository.",
    "Option4": "A command to undo a commit.",
    "Answer": "A mechanism for developers to propose changes and have them reviewed before merging into a main branch."
  },
  {
    "question_no.": 65,
    "Question": "What is the purpose of 'Code Review' in CI/CD?",
    "Option1": "To slow down the development process.",
    "Option2": "To improve code quality, share knowledge, and identify potential issues before merging.",
    "Option3": "To replace automated testing.",
    "Option4": "To manually deploy code.",
    "Answer": "To improve code quality, share knowledge, and identify potential issues before merging."
  },
  {
    "question_no.": 66,
    "Question": "What is a 'pipeline as code' approach?",
    "Option1": "Defining pipelines using a graphical user interface.",
    "Option2": "Defining the CI/CD pipeline configuration in a version-controlled script (e.g., Jenkinsfile, GitLab CI/CD YAML).",
    "Option3": "Manually configuring pipeline stages.",
    "Option4": "Documenting pipeline steps in a wiki.",
    "Answer": "Defining the CI/CD pipeline configuration in a version-controlled script (e.g., Jenkinsfile, GitLab CI/CD YAML)."
  },
  {
    "question_no.": 67,
    "Question": "What is the benefit of 'pipeline as code'?",
    "Option1": "It makes pipelines harder to maintain.",
    "Option2": "It provides version control, auditability, and reusability for pipeline definitions.",
    "Option3": "It eliminates the need for build servers.",
    "Option4": "It only works for small projects.",
    "Answer": "It provides version control, auditability, and reusability for pipeline definitions."
  },
  {
    "question_no.": 68,
    "Question": "What is 'Immutable Infrastructure'?",
    "Option1": "Servers that are constantly changed and updated in place.",
    "Option2": "Servers that are never modified after deployment; instead, new versions are deployed by replacing old ones.",
    "Option3": "Infrastructure that is impossible to manage.",
    "Option4": "Infrastructure that only runs static websites.",
    "Answer": "Servers that are never modified after deployment; instead, new versions are deployed by replacing old ones."
  },
  {
    "question_no.": 69,
    "Question": "How does Immutable Infrastructure benefit CI/CD?",
    "Option1": "It increases configuration drift.",
    "Option2": "It reduces configuration drift and makes deployments more predictable and reliable.",
    "Option3": "It makes rollbacks more complex.",
    "Option4": "It requires more manual setup.",
    "Answer": "It reduces configuration drift and makes deployments more predictable and reliable."
  },
  {
    "question_no.": 70,
    "Question": "What is 'Configuration Drift'?",
    "Option1": "Changes to the application code.",
    "Option2": "The phenomenon where the configuration of systems deviates from the desired or expected state over time.",
    "Option3": "A network latency issue.",
    "Option4": "A security vulnerability.",
    "Answer": "The phenomenon where the configuration of systems deviates from the desired or expected state over time."
  },
  {
    "question_no.": 71,
    "Question": "What is 'Idempotence' in the context of automation scripts?",
    "Option1": "Running the script multiple times produces different results.",
    "Option2": "Running the script multiple times has the same effect as running it once.",
    "Option3": "The script runs very slowly.",
    "Option4": "The script requires manual intervention.",
    "Answer": "Running the script multiple times has the same effect as running it once."
  },
  {
    "question_no.": 72,
    "Question": "Why is idempotence important for CI/CD deployment scripts?",
    "Option1": "It makes deployments less reliable.",
    "Option2": "It ensures that rerunning a deployment script won't cause unintended side effects or failures.",
    "Option3": "It reduces the speed of deployments.",
    "Option4": "It increases the complexity of the script.",
    "Answer": "It ensures that rerunning a deployment script won't cause unintended side effects or failures."
  },
  {
    "question_no.": 73,
    "Question": "What is 'Observability' in a CI/CD system?",
    "Option1": "Only collecting logs.",
    "Option2": "The ability to infer the internal state of a system by examining its external outputs (logs, metrics, traces).",
    "Option3": "A synonym for monitoring.",
    "Option4": "A process of reviewing code.",
    "Answer": "The ability to infer the internal state of a system by examining its external outputs (logs, metrics, traces)."
  },
  {
    "question_no.": 74,
    "Question": "What are 'Traces' in observability?",
    "Option1": "Individual log entries.",
    "Option2": "The journey of a request or transaction through a distributed system, showing its path and timing.",
    "Option3": "CPU utilization graphs.",
    "Option4": "Security alerts.",
    "Answer": "The journey of a request or transaction through a distributed system, showing its path and timing."
  },
  {
    "question_no.": 75,
    "Question": "Which tool is commonly used for distributed tracing?",
    "Option1": "Git",
    "Option2": "Jenkins",
    "Option3": "Jaeger or Zipkin",
    "Option4": "Jira",
    "Answer": "Jaeger or Zipkin"
  },
  {
    "question_no.": 76,
    "Question": "What is 'Chaos Engineering'?",
    "Option1": "Introducing random bugs into the code.",
    "Option2": "The practice of intentionally injecting failures into a system to test its resilience and identify weaknesses.",
    "Option3": "A method for organizing project tasks.",
    "Option4": "A strategy for speeding up deployments.",
    "Answer": "The practice of intentionally injecting failures into a system to test its resilience and identify weaknesses."
  },
  {
    "question_no.": 77,
    "Question": "What is a 'Git Repository'?",
    "Option1": "A local folder for storing temporary files.",
    "Option2": "A central storage location where code and its history are maintained.",
    "Option3": "A tool for running tests.",
    "Option4": "A server for deploying applications.",
    "Answer": "A central storage location where code and its history are maintained."
  },
  {
    "question_no.": 78,
    "Question": "What is a 'Commit' in Git?",
    "Option1": "A temporary change to a file.",
    "Option2": "A snapshot of your repository at a specific point in time, including changes and a message.",
    "Option3": "A new Git branch.",
    "Option4": "A deployment to production.",
    "Answer": "A snapshot of your repository at a specific point in time, including changes and a message."
  },
  {
    "question_no.": 79,
    "Question": "What is a 'Branch' in Git?",
    "Option1": "A separate copy of the entire repository.",
    "Option2": "A lightweight movable pointer to a commit, allowing parallel development streams.",
    "Option3": "A log of changes.",
    "Option4": "A tag for a release.",
    "Answer": "A lightweight movable pointer to a commit, allowing parallel development streams."
  },
  {
    "question_no.": 80,
    "Question": "What is 'Merging' in Git?",
    "Option1": "Deleting a branch.",
    "Option2": "Combining changes from one branch into another.",
    "Option3": "Creating a new commit.",
    "Option4": "Reverting changes.",
    "Answer": "Combining changes from one branch into another."
  },
  {
    "question_no.": 81,
    "Question": "What is 'Rebasing' in Git?",
    "Option1": "Combining branches.",
    "Option2": "Moving or combining a sequence of commits to a new base commit.",
    "Option3": "Undoing a merge.",
    "Option4": "Creating a new repository.",
    "Answer": "Moving or combining a sequence of commits to a new base commit."
  },
  {
    "question_no.": 82,
    "Question": "What is a 'Tag' in Git?",
    "Option1": "A temporary label for a commit.",
   "Option2": "A permanent, immutable pointer to a specific commit, typically used for release versions.",
    "Option3": "A way to categorize files.",
    "Option4": "A type of merge conflict.",
    "Answer": "A permanent, immutable pointer to a specific commit, typically used for release versions."
  },
  {
    "question_no.": 83,
    "Question": "What is a 'Webhook' in CI/CD?",
    "Option1": "A type of code review.",
    "Option2": "An automated way for one system to send information to another system when a specific event occurs.",
    "Option3": "A tool for building code.",
    "Option4": "A method for deploying applications.",
    "Answer": "An automated way for one system to send information to another system when a specific event occurs."
  },
  {
    "question_no.": 84,
    "Question": "How are webhooks typically used in CI/CD pipelines?",
    "Option1": "To manually trigger builds.",
    "Option2": "To trigger pipeline runs automatically when a code commit or pull request is made in a Git repository.",
    "Option3": "To send reports to management.",
    "Option4": "To clean up old build artifacts.",
    "Answer": "To trigger pipeline runs automatically when a code commit or pull request is made in a Git repository."
  },
  {
    "question_no.": 85,
    "Question": "What is 'Test Automation Framework'?",
    "Option1": "A single test script.",
    "Option2": "A set of guidelines, tools, and libraries that help standardize and streamline the creation and execution of automated tests.",
    "Option3": "A tool for manual testing.",
    "Option4": "A document for test cases.",
    "Answer": "A set of guidelines, tools, and libraries that help standardize and streamline the creation and execution of automated tests."
  },
  {
    "question_no.": 86,
    "Question": "What is 'Test Data Management'?",
    "Option1": "Manually creating test data for each test run.",
    "Option2": "The process of planning, designing, creating, and managing test data for various testing activities.",
    "Option3": "Storing test results.",
    "Option4": "Analyzing test reports.",
    "Answer": "The process of planning, designing, creating, and managing test data for various testing activities."
  },
  {
    "question_no.": 87,
    "Question": "What is 'Performance Testing' in CI/CD?",
    "Option1": "Testing the functionality of the application.",
    "Option2": "Testing the speed, scalability, and stability of an application under various load conditions.",
    "Option3": "Testing for security vulnerabilities.",
    "Option4": "Testing only the user interface.",
    "Answer": "Testing the speed, scalability, and stability of an application under various load conditions."
  },
  {
    "question_no.": 88,
    "Question": "What is 'Load Testing'?",
    "Option1": "Testing the application with a single user.",
    "Option2": "A type of performance testing that simulates a large number of users accessing the application to measure its response under expected load.",
    "Option3": "Testing for memory leaks.",
    "Option4": "Testing database queries.",
    "Answer": "A type of performance testing that simulates a large number of users accessing the application to measure its response under expected load."
  },
  {
    "question_no.": 89,
    "Question": "What is 'Stress Testing'?",
    "Option1": "Testing the application under normal conditions.",
    "Option2": "A type of performance testing that pushes the application beyond its normal operating capacity to determine its breaking point.",
    "Option3": "Testing for security vulnerabilities.",
    "Option4": "Testing only the network latency.",
    "Answer": "A type of performance testing that pushes the application beyond its normal operating capacity to determine its breaking point."
  },
  {
    "question_no.": 90,
    "Question": "What is 'Security Testing' in a CI/CD pipeline?",
    "Option1": "Only checking user authentication.",
    "Option2": "Automated and manual tests to identify vulnerabilities, weaknesses, and potential threats in the application and infrastructure.",
    "Option3": "Encrypting data at rest.",
    "Option4": "Managing firewall rules.",
    "Answer": "Automated and manual tests to identify vulnerabilities, weaknesses, and potential threats in the application and infrastructure."
  },
  {
    "question_no.": 91,
    "Question": "What is 'Compliance as Code'?",
    "Option1": "Manually enforcing compliance policies.",
    "Option2": "Expressing compliance policies and rules in machine-readable code, enabling automated validation and enforcement.",
    "Option3": "Writing documentation for compliance.",
    "Option4": "A legal framework for software development.",
    "Answer": "Expressing compliance policies and rules in machine-readable code, enabling automated validation and enforcement."
  },
  {
    "question_no.": 92,
    "Question": "What is the benefit of 'Compliance as Code' in CI/CD?",
    "Option1": "It makes compliance more complex.",
    "Option2": "It streamlines audits, ensures consistent policy enforcement, and reduces the manual effort for compliance.",
    "Option3": "It removes the need for security experts.",
    "Option4": "It only works for small teams.",
    "Answer": "It streamlines audits, ensures consistent policy enforcement, and reduces the manual effort for compliance."
  },
  {
    "question_no.": 93,
    "Question": "What is 'Shift Right' in CI/CD and testing?",
    "Option1": "Performing all testing before deployment.",
    "Option2": "Conducting testing and monitoring in production environments to gather real-world data and user feedback.",
    "Option3": "Moving responsibilities to the right side of the team.",
    "Option4": "Only doing manual testing in production.",
    "Answer": "Conducting testing and monitoring in production environments to gather real-world data and user feedback."
  },
  {
    "question_no.": 94,
    "Question": "What is 'Synthetic Monitoring'?",
    "Option1": "Monitoring based on real user traffic.",
    "Option2": "Proactively simulating user interactions with an application to measure performance and availability.",
    "Option3": "Monitoring only internal system metrics.",
    "Option4": "Monitoring network bandwidth.",
    "Answer": "Proactively simulating user interactions with an application to measure performance and availability."
  },
  {
    "question_no.": 95,
    "Question": "What is 'Real User Monitoring' (RUM)?",
    "Option1": "Simulating user interactions.",
    "Option2": "Collecting data directly from actual end-user sessions to understand real-world application performance and experience.",
    "Option3": "Monitoring only server logs.",
    "Option4": "Monitoring database performance.",
    "Answer": "Collecting data directly from actual end-user sessions to understand real-world application performance and experience."
  },
  {
    "question_no.": 96,
    "Question": "What is a 'Build Server'?",
    "Option1": "A server for hosting websites.",
    "Option2": "A server dedicated to compiling source code, running tests, and creating build artifacts.",
    "Option3": "A server for storing databases.",
    "Option4": "A server for managing user accounts.",
    "Answer": "A server dedicated to compiling source code, running tests, and creating build artifacts."
  },
  {
    "question_no.": 97,
    "Question": "What is 'Container Orchestration'?",
    "Option1": "Manually deploying individual containers.",
    "Option2": "The automated management of containers, including deployment, scaling, networking, and availability.",
    "Option3": "A tool for building Docker images.",
    "Option4": "A method for encrypting containers.",
    "Answer": "The automated management of containers, including deployment, scaling, networking, and availability."
  },
  {
    "question_no.": 98,
    "Question": "What is a 'Registry' for container images (e.g., Docker Hub, ECR)?",
    "Option1": "A local storage for images.",
    "Option2": "A centralized service for storing and distributing Docker images.",
    "Option3": "A tool for running containers.",
    "Option4": "A virtual machine manager.",
    "Answer": "A centralized service for storing and distributing Docker images."
  },
  {
    "question_no.": 99,
    "Question": "What is 'Image Tagging' in containerization?",
    "Option1": "Adding labels to physical servers.",
    "Option2": "Applying labels (e.g., version numbers, 'latest') to container images for identification and versioning.",
    "Option3": "Encrypting container images.",
    "Option4": "Scanning images for vulnerabilities.",
    "Answer": "Applying labels (e.g., version numbers, 'latest') to container images for identification and versioning."
  },
  {
    "question_no.": 100,
    "Question": "What is 'GitOps'?",
    "Option1": "A methodology for managing Git repositories.",
    "Option2": "An operational framework that takes DevOps best practices (like IaC and CI/CD) and applies them to managing infrastructure and applications using Git as the single source of truth.",
    "Option3": "A tool for merging Git branches.",
    "Option4": "A specific Git branching strategy.",
    "Answer": "An operational framework that takes DevOps best practices (like IaC and CI/CD) and applies them to managing infrastructure and applications using Git as the single source of truth."
  },
  {
    "question_no.": 101,
    "Question": "What is the main principle behind GitOps?",
    "Option1": "Manual deployments are preferred.",
    "Option2": "All changes to infrastructure and applications are made through Git commits, which then trigger automated deployments.",
    "Option3": "Using a GUI for all operations.",
    "Option4": "Separating code from configuration.",
    "Answer": "All changes to infrastructure and applications are made through Git commits, which then trigger automated deployments."
  },
  {
    "question_no.": 102,
    "Question": "What is a 'Pull-based deployment' in GitOps?",
    "Option1": "A deployment where the CI server pushes changes to the environment.",
    "Option2": "A deployment where an agent in the target environment pulls changes from the Git repository and applies them.",
    "Option3": "A manual deployment initiated by pulling a lever.",
    "Option4": "A deployment that is always reverted.",
    "Answer": "A deployment where an agent in the target environment pulls changes from the Git repository and applies them."
  },
  {
    "question_no.": 103,
    "Question": "What is 'Immutable Deployments'?",
    "Option1": "Updating existing servers in place.",
    "Option2": "Deploying a new version of an application by replacing old infrastructure components with new ones, rather than modifying them.",
    "Option3": "Deployments that cannot be rolled back.",
    "Option4": "Deployments that are never tested.",
    "Answer": "Deploying a new version of an application by replacing old infrastructure components with new ones, rather than modifying them."
  },
  {
    "question_no.": 104,
    "Question": "What is a 'Deployment Strategy'?",
    "Option1": "A plan for testing applications.",
    "Option2": "The method or approach used to release new versions of software to production environments.",
    "Option3": "A way to manage code branches.",
    "Option4": "A communication plan for releases.",
    "Answer": "The method or approach used to release new versions of software to production environments."
  },
  {
    "question_no.": 105,
    "Question": "Which deployment strategy involves releasing the new version to a small, isolated group of users first?",
    "Option1": "Blue/Green",
    "Option2": "Rolling Update",
    "Option3": "Canary Release",
    "Option4": "All-at-once",
    "Answer": "Canary Release"
  },
  {
    "question_no.": 106,
    "Question": "Which deployment strategy involves gradually replacing old instances with new ones, maintaining service availability?",
    "Option1": "Blue/Green",
    "Option2": "Rolling Update",
    "Option3": "Canary Release",
    "Option4": "All-at-once",
    "Answer": "Rolling Update"
  },
  {
    "question_no.": 107,
    "Question": "What is a 'Dark Launch'?",
    "Option1": "Launching a feature publicly without testing.",
    "Option2": "Deploying new features to production but keeping them hidden from end-users, often for performance testing or A/B testing setup.",
    "Option3": "Launching a feature only at night.",
    "Option4": "A failed deployment.",
    "Answer": "Deploying new features to production but keeping them hidden from end-users, often for performance testing or A/B testing setup."
  },
  {
    "question_no.": 108,
    "Question": "What is 'Progressive Delivery'?",
    "Option1": "Delivering all features at once.",
    "Option2": "A set of techniques (like Canary, Blue/Green, Feature Flags) that allow for controlled, gradual rollout of new features.",
    "Option3": "Delivering software manually.",
    "Option4": "Delivering only major releases.",
    "Answer": "A set of techniques (like Canary, Blue/Green, Feature Flags) that allow for controlled, gradual rollout of new features."
  },
  {
    "question_no.": 109,
    "Question": "What is a 'Deployment Pipeline'?",
    "Option1": "A single script for deployment.",
    "Option2": "An automated workflow that takes code from version control through building, testing, and deployment to various environments.",
    "Option3": "A manual checklist for releases.",
    "Option4": "A tool for managing user accounts.",
    "Answer": "An automated workflow that takes code from version control through building, testing, and deployment to various environments."
  },
  {
    "question_no.": 110,
    "Question": "What is 'Zero Downtime Deployment'?",
    "Option1": "Deploying without any testing.",
    "Option2": "Deploying new versions of an application without any interruption to service availability for end-users.",
    "Option3": "Deploying only during off-peak hours.",
    "Option4": "A deployment that always fails.",
    "Answer": "Deploying new versions of an application without any interruption to service availability for end-users."
  },
  {
    "question_no.": 111,
    "Question": "Which CI/CD concept aims to catch bugs and issues as early as possible in the development lifecycle?",
    "Option1": "Continuous Deployment",
    "Option2": "Shift Left",
    "Option3": "Blue/Green Deployment",
    "Option4": "Post-Mortem",
    "Answer": "Shift Left"
  },
  {
    "question_no.": 112,
    "Question": "What is a 'Build Agent' (or Slave/Node in Jenkins)?",
    "Option1": "The main server running the CI/CD orchestrator.",
    "Option2": "A machine or container that executes build and test jobs in a CI/CD pipeline.",
    "Option3": "A person who manually tests the code.",
    "Option4": "A database for storing build results.",
    "Answer": "A machine or container that executes build and test jobs in a CI/CD pipeline."
  },
  {
    "question_no.": 113,
    "Question": "What is a 'Shared Library' in Jenkins Pipelines?",
    "Option1": "A collection of build artifacts.",
    "Option2": "A way to define reusable pipeline code that can be shared across multiple Jenkinsfiles.",
    "Option3": "A place to store source code.",
    "Option4": "A type of test report.",
    "Answer": "A way to define reusable pipeline code that can be shared across multiple Jenkinsfiles."
  },
  {
    "question_no.": 114,
    "Question": "What is 'Secrets Management' in CI/CD?",
    "Option1": "Storing all credentials directly in code.",
    "Option2": "Securely storing and managing sensitive information (e.g., API keys, database passwords) used in the pipeline.",
    "Option3": "Sharing secrets openly with the team.",
    "Option4": "Encrypting application binaries.",
    "Answer": "Securely storing and managing sensitive information (e.g., API keys, database passwords) used in the pipeline."
  },
  {
    "question_no.": 115,
    "Question": "Which tool is commonly used for Secrets Management in a CI/CD context?",
    "Option1": "Text file on a desktop",
    "Option2": "AWS Secrets Manager / HashiCorp Vault",
    "Option3": "Spreadsheet",
    "Option4": "Public GitHub repository",
    "Answer": "AWS Secrets Manager / HashiCorp Vault"
  },
  {
    "question_no.": 116,
    "Question": "What is a 'Supply Chain Attack' in software development?",
    "Option1": "An attack on the network infrastructure.",
    "Option2": "An attack that targets vulnerabilities in the software's components, libraries, or build processes.",
    "Option3": "An attack on user accounts.",
    "Option4": "An attack on the production database.",
    "Answer": "An attack that targets vulnerabilities in the software's components, libraries, or build processes."
  },
  {
    "question_no.": 117,
    "Question": "How does CI/CD help mitigate supply chain attacks?",
    "Option1": "By eliminating all third-party dependencies.",
    "Option2": "By incorporating security scans, artifact validation, and dependency management throughout the pipeline.",
    "Option3": "By only using open-source software.",
    "Option4": "By manually reviewing all code.",
    "Answer": "By incorporating security scans, artifact validation, and dependency management throughout the pipeline."
  },
  {
    "question_no.": 118,
    "Question": "What is 'DevSecOps'?",
    "Option1": "A methodology that ignores security.",
    "Option2": "Integrating security practices and considerations throughout the entire DevOps lifecycle.",
    "Option3": "Focusing security efforts only at the end of the development cycle.",
    "Option4": "A tool for network security.",
    "Answer": "Integrating security practices and considerations throughout the entire DevOps lifecycle."
  },
  {
    "question_no.": 119,
    "Question": "What is the primary goal of DevSecOps?",
    "Option1": "To make security a bottleneck.",
    "Option2": "To 'shift security left' and make security a shared responsibility across the entire team.",
    "Option3": "To centralize security decisions with a single team.",
    "Option4": "To reduce the number of security checks.",
    "Answer": "To 'shift security left' and make security a shared responsibility across the entire team."
  },
  {
    "question_no.": 120,
    "Question": "What is 'Policy as Code'?",
    "Option1": "Manually writing security policies.",
    "Option2": "Defining and managing security, compliance, or operational policies in a machine-readable, version-controlled format.",
    "Option3": "A programming language for policies.",
    "Option4": "A document describing policies.",
    "Answer": "Defining and managing security, compliance, or operational policies in a machine-readable, version-controlled format."
  },
  {
    "question_no.": 121,
    "Question": "What is the benefit of 'Policy as Code' in CI/CD?",
    "Option1": "It makes policies harder to update.",
    "Option2": "It enables automated policy enforcement, ensures consistency, and speeds up audits.",
    "Option3": "It increases manual policy reviews.",
    "Option4": "It only applies to cloud infrastructure.",
    "Answer": "It enables automated policy enforcement, ensures consistency, and speeds up audits."
  },
  {
    "question_no.": 122,
    "Question": "What is a 'Release Train'?",
    "Option1": "A single, isolated release.",
    "Option2": "A concept in Agile and DevOps where multiple teams synchronize their releases on a regular, predictable cadence.",
    "Option3": "A physical train carrying software.",
    "Option4": "A continuous stream of code commits.",
    "Answer": "A concept in Agile and DevOps where multiple teams synchronize their releases on a regular, predictable cadence."
  },
  {
    "question_no.": 123,
    "Question": "What is 'Value Stream Mapping'?",
    "Option1": "A method to track project budget.",
    "Option2": "A lean management technique to analyze the flow of materials and information required to bring a product or service to a customer.",
    "Option3": "A way to visualize code dependencies.",
    "Option4": "A mapping of network connections.",
    "Answer": "A lean management technique to analyze the flow of materials and information required to bring a product or service to a customer."
  },
  {
    "question_no.": 124,
    "Question": "How does Value Stream Mapping help CI/CD?",
    "Option1": "It makes the pipeline longer.",
    "Option2": "It helps identify bottlenecks, waste, and opportunities for improvement in the software delivery process.",
    "Option3": "It focuses only on technical issues.",
    "Option4": "It reduces communication between teams.",
    "Answer": "It helps identify bottlenecks, waste, and opportunities for improvement in the software delivery process."
  },
  {
    "question_no.": 125,
    "Question": "What is 'Test Pyramid'?",
    "Option1": "A testing strategy that emphasizes more manual testing at the top.",
    "Option2": "A testing strategy that suggests a high number of fast, automated unit tests at the base, fewer integration tests, and even fewer UI tests at the top.",
    "Option3": "A hierarchy of testing tools.",
    "Option4": "A pyramid-shaped chart of test results.",
    "Answer": "A testing strategy that suggests a high number of fast, automated unit tests at the base, fewer integration tests, and even fewer UI tests at the top."
  },
  {
    "question_no.": 126,
    "Question": "What is the benefit of following the Test Pyramid strategy?",
    "Option1": "It increases the cost of testing.",
    "Option2": "It leads to faster feedback cycles, more robust tests, and more efficient overall testing.",
    "Option3": "It reduces the need for unit tests.",
    "Option4": "It focuses only on UI testing.",
    "Answer": "It leads to faster feedback cycles, more robust tests, and more efficient overall testing."
  },
  {
    "question_no.": 127,
    "Question": "What is 'Code Smells'?",
    "Option1": "Well-written, clean code.",
    "Option2": "Any characteristic in the source code of a program that indicates a deeper problem.",
    "Option3": "A new programming language feature.",
    "Option4": "A type of security vulnerability.",
    "Answer": "Any characteristic in the source code of a program that indicates a deeper problem."
  },
  {
    "question_no.": 128,
    "Question": "How do CI/CD tools help detect code smells?",
    "Option1": "By manual code review.",
    "Option2": "Through integration with static code analysis tools that scan code for patterns indicating potential issues.",
    "Option3": "By running performance tests.",
    "Option4": "By deploying the code to production.",
    "Answer": "Through integration with static code analysis tools that scan code for patterns indicating potential issues."
  },
  {
    "question_no.": 129,
    "Question": "What is 'Technical Debt'?",
    "Option1": "Money owed to cloud providers.",
    "Option2": "The extra development work that arises when code that is easy to implement in the short run is used instead of applying a better overall solution.",
    "Option3": "The cost of building software.",
    "Option4": "The number of bugs in the code.",
    "Answer": "The extra development work that arises when code that is easy to implement in the short run is used instead of applying a better overall solution."
  },
  {
    "question_no.": 130,
    "Question": "How can CI/CD help manage Technical Debt?",
    "Option1": "By ignoring it.",
    "Option2": "By promoting frequent code integration, automated testing, and continuous feedback, which helps identify and address debt early.",
    "Option3": "By increasing manual processes.",
    "Option4": "By deploying features faster without fixing bugs.",
    "Answer": "By promoting frequent code integration, automated testing, and continuous feedback, which helps identify and address debt early."
  },
  {
    "question_no.": 131,
    "Question": "What is 'Artifact Promotion' in CI/CD?",
    "Option1": "Marketing released software.",
    "Option2": "Moving a build artifact through different environments (e.g., dev -> staging -> production) after it has passed tests in each environment.",
    "Option3": "Creating new build artifacts.",
    "Option4": "Deleting old artifacts.",
    "Answer": "Moving a build artifact through different environments (e.g., dev -> staging -> production) after it has passed tests in each environment."
  },
  {
    "question_no.": 132,
    "Question": "What is 'SemVer' (Semantic Versioning)?",
    "Option1": "Using random numbers for versioning.",
    "Option2": "A versioning scheme (MAJOR.MINOR.PATCH) that conveys meaning about the underlying changes in new releases.",
    "Option3": "A version control system.",
    "Option4": "A naming convention for branches.",
    "Answer": "A versioning scheme (MAJOR.MINOR.PATCH) that conveys meaning about the underlying changes in new releases."
  },
  {
    "question_no.": 133,
    "Question": "Why is SemVer important for CI/CD?",
    "Option1": "It makes version numbers shorter.",
    "Option2": "It provides clarity about compatibility and the nature of changes, aiding automated deployments and dependency management.",
    "Option3": "It removes the need for release notes.",
    "Option4": "It only applies to open-source projects.",
    "Answer": "It provides clarity about compatibility and the nature of changes, aiding automated deployments and dependency management."
  },
  {
    "question_no.": 134,
    "Question": "What is a 'Hot Deployment'?",
    "Option1": "Deploying code with a hot iron.",
    "Option2": "Deploying application changes without restarting the running application or server.",
    "Option3": "A deployment that fails quickly.",
    "Option4": "Deploying to a hot environment (high temperature).",
    "Answer": "Deploying application changes without restarting the running application or server."
  },
  {
    "question_no.": 135,
    "Question": "What is the main challenge with Hot Deployment?",
    "Option1": "It's too slow.",
    "Option2": "It can lead to memory leaks, inconsistent states, and difficulties in rolling back if not carefully managed.",
    "Option3": "It requires more hardware.",
    "Option4": "It's difficult to automate.",
    "Answer": "It can lead to memory leaks, inconsistent states, and difficulties in rolling back if not carefully managed."
  },
  {
    "question_no.": 136,
    "Question": "What is 'Backward Compatibility' in software?",
    "Option1": "New versions of software that are incompatible with older versions.",
    "Option2": "The ability of a new version of software to work with existing data, systems, or components from older versions.",
    "Option3": "Compatibility with older operating systems only.",
    "Option4": "The ability to revert to older code.",
    "Answer": "The ability of a new version of software to work with existing data, systems, or components from older versions."
  },
  {
    "question_no.": 137,
    "Question": "Why is Backward Compatibility important for continuous deployment?",
    "Option1": "It makes deployments riskier.",
    "Option2": "It ensures that new deployments do not break existing functionality or disrupt user experience during gradual rollouts.",
    "Option3": "It requires more testing.",
    "Option4": "It slows down feature development.",
    "Answer": "It ensures that new deployments do not break existing functionality or disrupt user experience during gradual rollouts."
  },
  {
    "question_no.": 138,
    "Question": "What is 'Forward Compatibility'?",
    "Option1": "Old versions of software that are compatible with new data or systems.",
    "Option2": "The ability of an older version of software to work with data or components produced by a newer version.",
    "Option3": "Compatibility with future hardware.",
    "Option4": "The ability to run on multiple platforms.",
    "Answer": "The ability of an older version of software to work with data or components produced by a newer version."
  },
  {
    "question_no.": 139,
    "Question": "What is 'Code Quality Gates' in a CI/CD pipeline?",
    "Option1": "Manual checks at the end of the pipeline.",
    "Option2": "Automated checks at various stages of the pipeline that must pass before code can proceed to the next stage.",
    "Option3": "Physical gates for data centers.",
    "Option4": "A type of security group.",
    "Answer": "Automated checks at various stages of the pipeline that must pass before code can proceed to the next stage."
  },
  {
    "question_no.": 140,
    "Question": "What kind of checks can be part of a Code Quality Gate?",
    "Option1": "Only security vulnerabilities.",
    "Option2": "Unit test pass rates, code coverage, static analysis results, security scan findings.",
    "Option3": "User interface design reviews.",
    "Option4": "Marketing content approval.",
    "Answer": "Unit test pass rates, code coverage, static analysis results, security scan findings."
  },
  {
    "question_no.": 141,
    "Question": "What is 'Pipeline Orchestration'?",
    "Option1": "Manually running each stage of the pipeline.",
    "Option2": "The automated management and coordination of the various stages and tools within a CI/CD pipeline.",
    "Option3": "Creating pipeline dashboards.",
    "Option4": "Writing code for pipeline steps.",
    "Answer": "The automated management and coordination of the various stages and tools within a CI/CD pipeline."
  },
  {
    "question_no.": 142,
    "Question": "What is a 'Distributed Build System'?",
    "Option1": "A build system that runs on a single machine.",
    "Option2": "A build system that distributes build and test jobs across multiple machines or agents to speed up execution.",
    "Option3": "A build system that only builds distributed applications.",
    "Option4": "A manual build process.",
    "Answer": "A build system that distributes build and test jobs across multiple machines or agents to speed up execution."
  },
  {
    "question_no.": 143,
    "Question": "What is the benefit of a Distributed Build System?",
    "Option1": "It slows down builds.",
    "Option2": "It significantly reduces build and test times, enabling faster feedback cycles.",
    "Option3": "It increases build failures.",
    "Option4": "It makes builds less reproducible.",
    "Answer": "It significantly reduces build and test times, enabling faster feedback cycles."
  },
  {
    "question_no.": 144,
    "Question": "What is 'Agent Pooling' in CI/CD?",
    "Option1": "A group of development teams.",
    "Option2": "A pool of build agents that can be dynamically scaled up or down based on demand to execute pipeline jobs.",
    "Option3": "A method for collecting agent logs.",
    "Option4": "A type of network configuration.",
    "Answer": "A pool of build agents that can be dynamically scaled up or down based on demand to execute pipeline jobs."
  },
  {
    "question_no.": 145,
    "Question": "What is 'Cache Management' in CI/CD builds?",
    "Option1": "Storing all temporary files.",
    "Option2": "Optimizing build times by storing and reusing artifacts from previous builds (e.g., dependencies, compiled modules).",
    "Option3": "Deleting all build output.",
    "Option4": "Only caching database queries.",
    "Answer": "Optimizing build times by storing and reusing artifacts from previous builds (e.g., dependencies, compiled modules)."
  },
  {
    "question_no.": 146,
    "Question": "What is 'Dependency Management' in CI/CD?",
    "Option1": "Manually adding all necessary libraries.",
    "Option2": "The process of identifying, resolving, and managing external libraries and packages required by a software project.",
    "Option3": "Managing relationships between team members.",
    "Option4": "Managing network dependencies.",
    "Answer": "The process of identifying, resolving, and managing external libraries and packages required by a software project."
  },
  {
    "question_no.": 147,
    "Question": "What is a 'Dependency Conflict'?",
    "Option1": "When two team members disagree.",
    "Option2": "When different parts of a project require different, incompatible versions of the same dependency.",
    "Option3": "A conflict in Git merges.",
    "Option4": "A network connectivity issue.",
    "Answer": "When different parts of a project require different, incompatible versions of the same dependency."
  },
  {
    "question_no.": 148,
    "Question": "How does CI/CD help resolve dependency conflicts?",
    "Option1": "By ignoring them.",
    "Option2": "By providing automated tools for dependency resolution and by enforcing consistent build environments.",
    "Option3": "By always using the latest version of every dependency.",
    "Option4": "By manually fixing conflicts.",
    "Answer": "By providing automated tools for dependency resolution and by enforcing consistent build environments."
  },
  {
    "question_no.": 149,
    "Question": "What is 'Environment Parity'?",
    "Option1": "Ensuring all environments have the same operating system.",
    "Option2": "Maintaining consistency across all environments (development, staging, production) to reduce 'it works on my machine' issues.",
    "Option3": "Ensuring all environments have different configurations.",
    "Option4": "Only applies to production environments.",
    "Answer": "Maintaining consistency across all environments (development, staging, production) to reduce 'it works on my machine' issues."
  },
  {
    "question_no.": 150,
    "Question": "How does CI/CD contribute to Environment Parity?",
    "Option1": "By manual configuration of each environment.",
    "Option2": "Through Infrastructure as Code (IaC), containerization, and automated provisioning, ensuring environments are built consistently.",
    "Option3": "By using different tools for each environment.",
    "Option4": "By running different tests in different environments.",
    "Answer": "Through Infrastructure as Code (IaC), containerization, and automated provisioning, ensuring environments are built consistently."
  },
  {
    "question_no.": 151,
    "Question": "What is 'Disposable Environments'?",
    "Option1": "Environments that are never cleaned up.",
    "Option2": "Environments that can be quickly provisioned, used for a specific purpose (e.g., testing a feature), and then torn down.",
    "Option3": "Environments that are very expensive.",
    "Option4": "Environments that are shared by many teams.",
    "Answer": "Environments that can be quickly provisioned, used for a specific purpose (e.g., testing a feature), and then torn down."
  },
  {
    "question_no.": 152,
    "Question": "What is the benefit of Disposable Environments in CI/CD?",
    "Option1": "They increase resource consumption.",
    "Option2": "They ensure clean, consistent testing surfaces and prevent 'environment drift' problems.",
    "Option3": "They require more manual setup.",
    "Option4": "They are only for production use.",
    "Answer": "They ensure clean, consistent testing surfaces and prevent 'environment drift' problems."
  },
  {
    "question_no.": 153,
    "Question": "What is a 'Release Manager' role in a traditional vs. CI/CD context?",
    "Option1": "In CI/CD, the Release Manager becomes less involved in manual tasks and more focused on pipeline health and process improvement.",
    "Option2": "The Release Manager's role is eliminated in CI/CD.",
    "Option3": "The Release Manager primarily performs manual deployments in CI/CD.",
    "Option4": "The role remains exactly the same.",
    "Answer": "In CI/CD, the Release Manager becomes less involved in manual tasks and more focused on pipeline health and process improvement."
  },
  {
    "question_no.": 154,
    "Question": "What is 'Metrics Driven Development'?",
    "Option1": "Developing features based on team size.",
    "Option2": "Making development decisions and improvements based on quantitative data gathered from monitoring and feedback loops.",
    "Option3": "Only looking at code coverage metrics.",
    "Option4": "A development methodology that ignores data.",
    "Answer": "Making development decisions and improvements based on quantitative data gathered from monitoring and feedback loops."
  },
  {
    "question_no.": 155,
    "Question": "What are 'DORA Metrics' (DevOps Research and Assessment)?",
    "Option1": "Metrics for financial performance.",
    "Option2": "Four key metrics (Lead Time for Changes, Deployment Frequency, Mean Time to Restore, Change Failure Rate) used to measure DevOps performance.",
    "Option3": "Metrics for user engagement.",
    "Option4": "Metrics specific to database operations.",
    "Answer": "Four key metrics (Lead Time for Changes, Deployment Frequency, Mean Time to Restore, Change Failure Rate) used to measure DevOps performance."
  },
  {
    "question_no.": 156,
    "Question": "What is 'Lead Time for Changes' in DORA metrics?",
    "Option1": "The time it takes to deploy a feature.",
    "Option2": "The time from code committed to code successfully running in production.",
    "Option3": "The time spent planning a change.",
    "Option4": "The time required for a bug fix.",
    "Answer": "The time from code committed to code successfully running in production."
  },
  {
    "question_no.": 157,
    "Question": "What is 'Deployment Frequency' in DORA metrics?",
    "Option1": "How often code is committed.",
    "Option2": "How often an organization successfully releases to production.",
    "Option3": "How often tests are run.",
    "Option4": "How often developers meet.",
    "Answer": "How often an organization successfully releases to production."
  },
  {
    "question_no.": 158,
    "Question": "What is 'Mean Time to Restore (MTTR)' in DORA metrics?",
    "Option1": "The time it takes to backup data.",
    "Option2": "The average time it takes to restore service after an outage or degradation.",
    "Option3": "The time for a new server to boot up.",
    "Option4": "The time to complete a full regression test.",
    "Answer": "The average time it takes to restore service after an outage or degradation."
  },
  {
    "question_no.": 159,
    "Question": "What is 'Change Failure Rate' in DORA metrics?",
    "Option1": "The percentage of tests that fail.",
    "Option2": "The percentage of deployments to production that result in a degraded service or require a rollback.",
    "Option3": "The number of bugs found in code review.",
    "Option4": "The rate of successful builds.",
    "Answer": "The percentage of deployments to production that result in a degraded service or require a rollback."
  },
  {
    "question_no.": 160,
    "Question": "Why are DORA metrics important for CI/CD adoption?",
    "Option1": "They help justify investment in manual processes.",
    "Option2": "They provide a quantifiable way to measure the effectiveness and maturity of an organization's CI/CD and DevOps practices.",
    "Option3": "They are only relevant for security teams.",
    "Option4": "They focus solely on cost reduction.",
    "Answer": "They provide a quantifiable way to measure the effectiveness and maturity of an organization's CI/CD and DevOps practices."
  },
  {
    "question_no.": 161,
    "Question": "What is 'Shift Left on Security'?",
    "Option1": "Applying security measures only at the end of the SDLC.",
    "Option2": "Integrating security practices and tools early and throughout the software development lifecycle.",
    "Option3": "Moving security responsibilities to the left side of the data center.",
    "Option4": "Delegating all security to a separate team.",
    "Answer": "Integrating security practices and tools early and throughout the software development lifecycle."
  },
  {
    "question_no.": 162,
    "Question": "What is 'Security as Code'?",
    "Option1": "Manually enforcing security policies.",
    "Option2": "Defining security policies, configurations, and controls in a machine-readable format, allowing for automation and version control.",
    "Option3": "Writing security vulnerabilities in code.",
    "Option4": "A programming language for security.",
    "Answer": "Defining security policies, configurations, and controls in a machine-readable format, allowing for automation and version control."
  },
  {
    "question_no.": 163,
    "Question": "What is 'Mutation Testing'?",
    "Option1": "Testing with random inputs.",
    "Option2": "A testing technique that involves making small, intentional changes (mutations) to the source code to assess the effectiveness of existing test suites.",
    "Option3": "Testing for data corruption.",
    "Option4": "Testing in different environments.",
    "Answer": "A testing technique that involves making small, intentional changes (mutations) to the source code to assess the effectiveness of existing test suites."
  },
  {
    "question_no.": 164,
    "Question": "How does Mutation Testing benefit CI/CD?",
    "Option1": "It speeds up builds.",
    "Option2": "It helps identify weak or insufficient test cases by revealing if mutations can escape detection.",
    "Option3": "It reduces the need for unit tests.",
    "Option4": "It focuses on performance bottlenecks.",
    "Answer": "It helps identify weak or insufficient test cases by revealing if mutations can escape detection."
  },
  {
    "question_no.": 165,
    "Question": "What is 'Contract Testing'?",
    "Option1": "Testing legal contracts.",
    "Option2": "Testing that ensures the integration between two services (consumer and provider) adheres to a shared agreement (contract).",
    "Option3": "Testing only database connections.",
    "Option4": "Testing only the user interface.",
    "Answer": "Testing that ensures the integration between two services (consumer and provider) adheres to a shared agreement (contract)."
  },
  {
    "question_no.": 166,
    "Question": "What is 'Consumer-Driven Contract Testing'?",
    "Option1": "The provider defines the contract.",
    "Option2": "The consumer of a service defines the contract it expects from the provider, and both sides test against this contract.",
    "Option3": "Testing only from the provider's perspective.",
    "Option4": "A type of performance test.",
    "Answer": "The consumer of a service defines the contract it expects from the provider, and both sides test against this contract."
  },
  {
    "question_no.": 167,
    "Question": "What is 'Test Data Generation'?",
    "Option1": "Manually creating test data.",
    "Option2": "Automated creation of realistic or synthetic data for use in testing scenarios.",
    "Option3": "Analyzing existing production data.",
    "Option4": "Backing up test results.",
    "Answer": "Automated creation of realistic or synthetic data for use in testing scenarios."
  },
  {
    "question_no.": 168,
    "Question": "What is a 'Test Harness'?",
    "Option1": "A single test script.",
    "Option2": "A collection of software and test data configured to test a program, or a part of a program.",
    "Option3": "A tool for manual testing.",
    "Option4": "A report of test failures.",
    "Answer": "A collection of software and test data configured to test a program, or a part of a program."
  },
  {
    "question_no.": 169,
    "Question": "What is 'Performance Baseline'?",
    "Option1": "The maximum performance an application can achieve.",
    "Option2": "A set of measurements that represents the typical or expected performance of a system under normal operating conditions.",
    "Option3": "The minimum acceptable performance.",
    "Option4": "The performance of a single component.",
    "Answer": "A set of measurements that represents the typical or expected performance of a system under normal operating conditions."
  },
  {
    "question_no.": 170,
    "Question": "Why is a Performance Baseline important in CI/CD?",
    "Option1": "It increases testing time.",
    "Option2": "It provides a reference point for comparing performance after changes and identifying regressions or improvements.",
    "Option3": "It replaces functional testing.",
    "Option4": "It only focuses on security.",
    "Answer": "It provides a reference point for comparing performance after changes and identifying regressions or improvements."
  },
  {
    "question_no.": 171,
    "Question": "What is 'Rollback Strategy'?",
    "Option1": "A strategy for creating new features.",
    "Option2": "A predefined plan for reverting a deployed application to a previous stable state in case of issues.",
    "Option3": "A strategy for pushing new code.",
    "Option4": "A plan for testing new features.",
    "Answer": "A predefined plan for reverting a deployed application to a previous stable state in case of issues."
  },
  {
    "question_no.": 172,
    "Question": "Why is a clear Rollback Strategy essential for Continuous Deployment?",
    "Option1": "It makes deployments riskier.",
    "Option2": "It minimizes the impact of failed deployments by allowing rapid recovery to a known good state.",
    "Option3": "It increases downtime.",
    "Option4": "It's only for major outages.",
    "Answer": "It minimizes the impact of failed deployments by allowing rapid recovery to a known good state."
  },
  {
    "question_no.": 173,
    "Question": "What is a 'Circuit Breaker' pattern in microservices and CI/CD?",
    "Option1": "A device that shorts circuits.",
    "Option2": "A design pattern that prevents a failing service from continuously retrying and overwhelming another service, allowing it to recover.",
    "Option3": "A way to increase network latency.",
    "Option4": "A tool for logging errors.",
    "Answer": "A design pattern that prevents a failing service from continuously retrying and overwhelming another service, allowing it to recover."
  },
  {
    "question_no.": 174,
    "Question": "How does the Circuit Breaker pattern aid Continuous Deployment?",
    "Option1": "It prevents deployments from happening.",
    "Option2": "It improves system resilience and allows for more confident deployments by isolating failures and preventing cascading effects.",
    "Option3": "It increases coupling between services.",
    "Option4": "It adds more manual steps.",
    "Answer": "It improves system resilience and allows for more confident deployments by isolating failures and preventing cascading effects."
  },
  {
    "question_no.": 175,
    "Question": "What is 'Dark Monitoring'?",
    "Option1": "Monitoring only during nighttime.",
    "Option2": "Monitoring a new feature or version in production before it's made visible or accessible to all users.",
    "Option3": "Monitoring without logging.",
    "Option4": "Monitoring only internal network traffic.",
    "Answer": "Monitoring a new feature or version in production before it's made visible or accessible to all users."
  },
  {
    "question_no.": 176,
    "Question": "What is 'Site Reliability Engineering' (SRE)?",
    "Option1": "A role focused only on development.",
    "Option2": "A discipline that applies aspects of software engineering to infrastructure and operations problems with the goal of creating highly reliable, scalable software systems.",
    "Option3": "A methodology for manual operations.",
    "Option4": "A framework for project management.",
    "Answer": "A discipline that applies aspects of software engineering to infrastructure and operations problems with the goal of creating highly reliable, scalable software systems."
  },
  {
    "question_no.": 177,
    "Question": "How does SRE relate to CI/CD?",
    "Option1": "SRE promotes manual operations.",
    "Option2": "SRE principles (e.g., automation, measurement, toil reduction) heavily leverage and benefit from CI/CD practices.",
    "Option3": "SRE is a competitor to CI/CD.",
    "Option4": "SRE is only for large enterprises.",
    "Answer": "SRE principles (e.g., automation, measurement, toil reduction) heavily leverage and benefit from CI/CD practices."
  },
  {
    "question_no.": 178,
    "Question": "What is 'Toil' in SRE?",
    "Option1": "Meaningful and impactful work.",
    "Option2": "Manual, repetitive, automatable, tactical work that lacks enduring value.",
    "Option3": "Creative problem-solving.",
    "Option4": "Strategic planning activities.",
    "Answer": "Manual, repetitive, automatable, tactical work that lacks enduring value."
  },
  {
    "question_no.": 179,
    "Question": "How does CI/CD help reduce Toil?",
    "Option1": "By introducing more manual steps.",
    "Option2": "By automating repetitive tasks like building, testing, and deploying, freeing up engineers for more valuable work.",
    "Option3": "By making processes more complex.",
    "Option4": "By increasing human intervention.",
    "Answer": "By automating repetitive tasks like building, testing, and deploying, freeing up engineers for more valuable work."
  },
  {
    "question_no.": 180,
    "Question": "What is 'Root Cause Analysis' (RCA)?",
    "Option1": "Fixing symptoms of a problem.",
    "Option2": "A systematic process for identifying the underlying causes of problems or incidents, rather than just treating symptoms.",
    "Option3": "A quick fix for bugs.",
    "Option4": "A method for deploying code.",
    "Answer": "A systematic process for identifying the underlying causes of problems or incidents, rather than just treating symptoms."
  },
  {
    "question_no.": 181,
    "Question": "How does RCA improve CI/CD processes?",
    "Option1": "It makes incident response slower.",
    "Option2": "It helps identify systemic weaknesses in the pipeline or deployed systems, leading to more robust and reliable processes.",
    "Option3": "It focuses on blaming individuals.",
    "Option4": "It prevents future deployments.",
    "Answer": "It helps identify systemic weaknesses in the pipeline or deployed systems, leading to more robust and reliable processes."
  },
  {
    "question_no.": 182,
    "Question": "What is a 'Blameless Post-Mortem'?",
    "Option1": "A post-mortem that assigns blame to individuals.",
    "Option2": "A post-mortem focused on systemic issues and process improvements, rather than individual mistakes, to foster a culture of learning.",
    "Option3": "A post-mortem without any follow-up actions.",
    "Option4": "A post-mortem that only analyzes successful deployments.",
    "Answer": "A post-mortem focused on systemic issues and process improvements, rather than individual mistakes, to foster a culture of learning."
  },
  {
    "question_no.": 183,
    "Question": "What is 'Mean Time Between Failures (MTBF)'?",
    "Option1": "The average time it takes to fix a failure.",
    "Option2": "The predicted elapsed time between inherent failures of a system during operation.",
    "Option3": "The time between deployments.",
    "Option4": "The average time for a test to run.",
    "Answer": "The predicted elapsed time between inherent failures of a system during operation."
  },
  {
    "question_no.": 184,
    "Question": "How does CI/CD aim to impact MTBF?",
    "Option1": "To decrease it.",
    "Option2": "To increase it by catching issues earlier and promoting more reliable deployments.",
    "Option3": "It has no impact on MTBF.",
    "Option4": "To make failures more frequent.",
    "Answer": "To increase it by catching issues earlier and promoting more reliable deployments."
  },
  {
    "question_no.": 185,
    "Question": "What is 'Chaos Monkey'?",
    "Option1": "A tool for building code.",
    "Option2": "A tool developed by Netflix that randomly disables production instances to test system resilience.",
    "Option3": "A tool for managing Git repositories.",
    "Option4": "A tool for manual testing.",
    "Answer": "A tool developed by Netflix that randomly disables production instances to test system resilience."
  },
  {
    "question_no.": 186,
    "Question": "What is a 'Continuous Feedback Loop' in CI/CD?",
    "Option1": "A one-way communication from developers to users.",
    "Option2": "The constant flow of information and insights from monitoring, testing, and user feedback back into the development process.",
    "Option3": "A loop that only happens once a month.",
    "Option4": "A feedback process that is always positive.",
    "Answer": "The constant flow of information and insights from monitoring, testing, and user feedback back into the development process."
  },
  {
    "question_no.": 187,
    "Question": "Why is a Continuous Feedback Loop crucial for CI/CD success?",
    "Option1": "It slows down development.",
    "Option2": "It enables rapid learning, adaptation, and continuous improvement of both the software and the delivery process.",
    "Option3": "It increases the number of bugs.",
    "Option4": "It removes the need for human input.",
    "Answer": "It enables rapid learning, adaptation, and continuous improvement of both the software and the delivery process."
  },
  {
    "question_no.": 188,
    "Question": "What is 'Value Stream Management'?",
    "Option1": "Managing project budgets.",
    "Option2": "An organizational approach to optimizing the end-to-end flow of value from idea to customer, often building on Value Stream Mapping.",
    "Option3": "Managing only the development phase.",
    "Option4": "A tool for writing code.",
    "Answer": "An organizational approach to optimizing the end-to-end flow of value from idea to customer, often building on Value Stream Mapping."
  },
  {
    "question_no.": 189,
    "Question": "How does Value Stream Management enhance CI/CD?",
    "Option1": "It makes processes more rigid.",
    "Option2": "It provides a holistic view of the delivery process, helping identify and eliminate bottlenecks beyond just the automated pipeline.",
    "Option3": "It reduces the scope of automation.",
    "Option4": "It focuses solely on individual tasks.",
    "Answer": "It provides a holistic view of the delivery process, helping identify and eliminate bottlenecks beyond just the automated pipeline."
  },
  {
    "question_no.": 190,
    "Question": "What is 'Shift Left on Testing'?",
    "Option1": "Testing only at the end of the development cycle.",
    "Option2": "Moving testing activities to earlier stages of the software development lifecycle, performed by developers themselves.",
    "Option3": "Reducing the amount of testing.",
    "Option4": "Testing only on the production environment.",
    "Answer": "Moving testing activities to earlier stages of the software development lifecycle, performed by developers themselves."
  },
  {
    "question_no.": 191,
    "Question": "What is 'Code Signing' in CI/CD?",
    "Option1": "Manually approving code changes.",
    "Option2": "Digitally signing code or artifacts to verify their authenticity and integrity, ensuring they haven't been tampered with.",
    "Option3": "A type of code review.",
    "Option4": "Adding comments to code.",
    "Answer": "Digitally signing code or artifacts to verify their authenticity and integrity, ensuring they haven't been tampered with."
  },
  {
    "question_no.": 192,
    "Question": "Why is Code Signing important for CI/CD security?",
    "Option1": "It prevents all security vulnerabilities.",
    "Option2": "It helps prevent supply chain attacks and ensures that only trusted, verified code is deployed.",
    "Option3": "It encrypts the entire pipeline.",
    "Option4": "It reduces the need for source control.",
    "Answer": "It helps prevent supply chain attacks and ensures that only trusted, verified code is deployed."
  },
  {
    "question_no.": 193,
    "Question": "What is 'Compliance Automation'?",
    "Option1": "Manually checking compliance requirements.",
    "Option2": "Automating the process of verifying adherence to regulatory standards and internal policies.",
    "Option3": "Automating the creation of new compliance policies.",
    "Option4": "A tool for legal advice.",
    "Answer": "Automating the process of verifying adherence to regulatory standards and internal policies."
  },
  {
    "question_no.": 194,
    "Question": "How does CI/CD facilitate Compliance Automation?",
    "Option1": "By adding more manual checks.",
    "Option2": "By integrating automated policy checks, security scans, and audit trails directly into the pipeline.",
    "Option3": "By making compliance a one-time activity.",
    "Option4": "By removing all regulations.",
    "Answer": "By integrating automated policy checks, security scans, and audit trails directly into the pipeline."
  },
  {
    "question_no.": 195,
    "Question": "What is 'Continuous Security'?",
    "Option1": "Security applied only at the end of the development lifecycle.",
    "Option2": "Integrating security practices and tools throughout every stage of the CI/CD pipeline and the software lifecycle.",
    "Option3": "A separate security team that operates independently.",
    "Option4": "Performing security audits only once a year.",
    "Answer": "Integrating security practices and tools throughout every stage of the CI/CD pipeline and the software lifecycle."
  },
  {
    "question_no.": 196,
    "Question": "What is a 'Pipeline as a Service' (PaaS) offering?",
    "Option1": "A local CI/CD server installed on-premises.",
    "Option2": "A cloud-based service that provides a fully managed CI/CD pipeline infrastructure (e.g., GitLab CI/CD, GitHub Actions).",
    "Option3": "A manual pipeline setup.",
    "Option4": "A service for deploying static websites only.",
    "Answer": "A cloud-based service that provides a fully managed CI/CD pipeline infrastructure (e.g., GitLab CI/CD, GitHub Actions)."
  },
  {
    "question_no.": 197,
    "Question": "What is the benefit of a Pipeline as a Service?",
    "Option1": "Increased operational overhead.",
    "Option2": "Reduced setup and maintenance of CI/CD infrastructure, allowing teams to focus more on building and deploying applications.",
    "Option3": "Less flexibility in pipeline configuration.",
    "Option4": "Higher costs.",
    "Answer": "Reduced setup and maintenance of CI/CD infrastructure, allowing teams to focus more on building and deploying applications."
  },
  {
    "question_no.": 198,
    "Question": "What is 'Feature Toggles' also known as?",
    "Option1": "Release Branches",
    "Option2": "Feature Flags",
    "Option3": "Hotfixes",
    "Option4": "Merge Requests",
    "Answer": "Feature Flags"
  },
  {
    "question_no.": 199,
    "Question": "What is a 'Roll Forward' strategy?",
    "Option1": "Reverting to a previous version of the application.",
    "Option2": "Deploying a new hotfix or subsequent version to correct a problem, rather than reverting to an old version.",
    "Option3": "A strategy for creating new features.",
    "Option4": "A method for backing up data.",
    "Answer": "Deploying a new hotfix or subsequent version to correct a problem, rather than reverting to an old version."
  },
  {
    "question_no.": 200,
    "Question": "When might a 'Roll Forward' strategy be preferred over a 'Rollback'?",
    "Option1": "When the issue is complex and requires a full revert.",
    "Option2": "When the fix is small, quick to implement, and tested, and rollback is deemed too disruptive.",
    "Option3": "Always, as it's simpler.",
    "Option4": "Never, rollback is always better.",
    "Answer": "When the fix is small, quick to implement, and tested, and rollback is deemed too disruptive."
  },
  {
    "question_no.": 201,
    "Question": "What is 'Immutable Artifacts'?",
    "Option1": "Artifacts that are constantly changed after creation.",
    "Option2": "Build artifacts (e.g., JAR files, Docker images) that, once created, are never modified, ensuring consistent deployments.",
    "Option3": "Artifacts that are only stored temporarily.",
    "Option4": "Artifacts that are manually created.",
    "Answer": "Build artifacts (e.g., JAR files, Docker images) that, once created, are never modified, ensuring consistent deployments."
  },
  {
    "question_no.": 202,
    "Question": "Why are Immutable Artifacts important for CI/CD?",
    "Option1": "They increase build times.",
    "Option2": "They guarantee that the exact same tested component is deployed to each environment, reducing 'works on my machine' issues.",
    "Option3": "They complicate rollbacks.",
    "Option4": "They require more storage.",
    "Answer": "They guarantee that the exact same tested component is deployed to each environment, reducing 'works on my machine' issues."
  },
  {
    "question_no.": 203,
    "Question": "What is 'Pipeline Visualization'?",
    "Option1": "A text-based representation of the pipeline.",
    "Option2": "Graphical dashboards or tools that display the status and progress of a CI/CD pipeline in real-time.",
    "Option3": "A type of code review.",
    "Option4": "A document outlining pipeline steps.",
    "Answer": "Graphical dashboards or tools that display the status and progress of a CI/CD pipeline in real-time."
  },
  {
    "question_no.": 204,
    "Question": "What is the benefit of Pipeline Visualization?",
    "Option1": "It makes the pipeline more complex.",
    "Option2": "It provides transparency into the release process, helps identify bottlenecks, and improves communication within the team.",
    "Option3": "It reduces the need for automated tests.",
    "Option4": "It only shows successful deployments.",
    "Answer": "It provides transparency into the release process, helps identify bottlenecks, and improves communication within the team."
  },
  {
    "question_no.": 205,
    "Question": "What is 'Pipeline Metrics'?",
    "Option1": "Only the number of successful builds.",
    "Option2": "Quantitative data collected from the CI/CD pipeline (e.g., build duration, test pass rate, deployment frequency) to measure its efficiency and effectiveness.",
    "Option3": "Metrics for application performance.",
    "Option4": "Metrics for user engagement.",
    "Answer": "Quantitative data collected from the CI/CD pipeline (e.g., build duration, test pass rate, deployment frequency) to measure its efficiency and effectiveness."
  }
]