[
  {
    "question_no.": 1,
    "Question": "What is a 'variable' in programming?",
    "Option1": "A fixed value that cannot be changed",
    "Option2": "A named storage location that holds a value, which can change during program execution",
    "Option3": "A function that performs a specific task",
    "Option4": "A keyword in the programming language",
    "Answer": "A named storage location that holds a value, which can change during program execution"
  },
  {
    "question_no.": 2,
    "Question": "What is an 'algorithm' in programming?",
    "Option1": "A specific programming language",
    "Option2": "A step-by-step procedure or set of rules for solving a problem or accomplishing a task",
    "Option3": "A type of data structure",
    "Option4": "A user interface component",
    "Answer": "A step-by-step procedure or set of rules for solving a problem or accomplishing a task"
  },
  {
    "question_no.": 3,
    "Question": "What is 'syntax' in programming?",
    "Option1": "The logical flow of a program",
    "Option2": "The set of rules that defines the combinations of symbols that are considered to be correctly structured programs in that language",
    "Option3": "The meaning of programming statements",
    "Option4": "The speed at which a program executes",
    "Answer": "The set of rules that defines the combinations of symbols that are considered to be correctly structured programs in that language"
  },
  {
    "question_no.": 4,
    "Question": "What is a 'bug' in programming?",
    "Option1": "A feature that enhances performance",
    "Option2": "An error or flaw in a computer program that causes it to produce an incorrect or unexpected result, or to behave in unintended ways",
    "Option3": "A type of data encryption",
    "Option4": "A successful program execution",
    "Answer": "An error or flaw in a computer program that causes it to produce an incorrect or unexpected result, or to behave in unintended ways"
  },
  {
    "question_no.": 5,
    "Question": "What is 'debugging'?",
    "Option1": "The process of writing new code",
    "Option2": "The process of finding and fixing errors (bugs) in software",
    "Option3": "The process of optimizing code for speed",
    "Option4": "The process of converting code to machine language",
    "Answer": "The process of finding and fixing errors (bugs) in software"
  },
  {
    "question_no.": 6,
    "Question": "What is a 'compiler'?",
    "Option1": "A program that executes code line by line",
    "Option2": "A program that translates source code written in a high-level programming language into machine code or other lower-level code, typically an executable file, before execution",
    "Option3": "A tool for creating user interfaces",
    "Option4": "A program that manages data storage",
    "Answer": "A program that translates source code written in a high-level programming language into machine code or other lower-level code, typically an executable file, before execution"
  },
  {
    "question_no.": 7,
    "Question": "What is an 'interpreter'?",
    "Option1": "A program that translates source code into machine code before execution",
    "Option2": "A program that executes code directly, line by line, without requiring prior compilation into a machine language program",
    "Option3": "A tool for debugging only",
    "Option4": "A program for managing network connections",
    "Answer": "A program that executes code directly, line by line, without requiring prior compilation into a machine language program"
  },
  {
    "question_no.": 8,
    "Question": "What is 'source code'?",
    "Option1": "The executable version of a program",
    "Option2": "The human-readable instructions written by a programmer in a programming language before compilation or interpretation",
    "Option3": "The output of a program",
    "Option4": "The hardware instructions of a computer",
    "Answer": "The human-readable instructions written by a programmer in a programming language before compilation or interpretation"
  },
  {
    "question_no.": 9,
    "Question": "What is 'machine code'?",
    "Option1": "High-level programming language",
    "Option2": "The low-level instructions directly executable by a computer's central processing unit (CPU), consisting of binary or hexadecimal codes",
    "Option3": "Code written in JavaScript",
    "Option4": "Code that needs to be interpreted",
    "Answer": "The low-level instructions directly executable by a computer's central processing unit (CPU), consisting of binary or hexadecimal codes"
  },
  {
    "question_no.": 10,
    "Question": "What is a 'data type'?",
    "Option1": "A method for sorting data",
    "Option2": "A classification that specifies which type of value a variable can hold (e.g., integer, string, boolean) and what operations can be performed on it",
    "Option3": "A format for storing files",
    "Option4": "A design pattern for functions",
    "Answer": "A classification that specifies which type of value a variable can hold (e.g., integer, string, boolean) and what operations can be performed on it"
  },
  {
    "question_no.": 11,
    "Question": "What is a 'function' (or method, subroutine)?",
    "Option1": "A variable that stores multiple values",
    "Option2": "A block of organized, reusable code that performs a specific task and can be called by name from other parts of a program",
    "Option3": "A type of data structure",
    "Option4": "A declaration of a variable",
    "Answer": "A block of organized, reusable code that performs a specific task and can be called by name from other parts of a program"
  },
  {
    "question_no.": 12,
    "Question": "What is 'conditional statement'?",
    "Option1": "A statement that repeats a block of code",
    "Option2": "A programming construct that allows different blocks of code to be executed based on whether a specified condition is true or false (e.g., if-else, switch)",
    "Option3": "A statement that defines a variable",
    "Option4": "A statement that calls a function",
    "Answer": "A programming construct that allows different blocks of code to be executed based on whether a specified condition is true or false (e.g., if-else, switch)"
  },
  {
    "question_no.": 13,
    "Question": "What is a 'loop'?",
    "Option1": "A statement that ends a program",
    "Option2": "A programming construct that repeatedly executes a block of code as long as a certain condition is met or for a specified number of times (e.g., for, while, do-while)",
    "Option3": "A statement for defining functions",
    "Option4": "A statement for printing output",
    "Answer": "A programming construct that repeatedly executes a block of code as long as a certain condition is met or for a specified number of times (e.g., for, while, do-while)"
  },
  {
    "question_no.": 14,
    "Question": "What is 'input' in programming?",
    "Option1": "The data generated by the program",
    "Option2": "Data provided to a computer program for processing, typically from a user, file, or another program",
    "Option3": "The process of saving a file",
    "Option4": "The internal memory of the computer",
    "Answer": "Data provided to a computer program for processing, typically from a user, file, or another program"
  },
  {
    "question_no.": 15,
    "Question": "What is 'output' in programming?",
    "Option1": "Data provided to the program",
    "Option2": "The results or information generated by a computer program and presented to the user, a file, or another program",
    "Option3": "The process of compiling code",
    "Option4": "The source code of a program",
    "Answer": "The results or information generated by a computer program and presented to the user, a file, or another program"
  },
  {
    "question_no.": 16,
    "Question": "What is an 'array'?",
    "Option1": "A single variable that stores one value",
    "Option2": "A data structure that stores a collection of elements of the same data type in contiguous memory locations, accessed using an index",
    "Option3": "A function that performs mathematical calculations",
    "Option4": "A conditional statement",
    "Answer": "A data structure that stores a collection of elements of the same data type in contiguous memory locations, accessed using an index"
  },
  {
    "question_no.": 17,
    "Question": "What is a 'string' data type?",
    "Option1": "A numerical value",
    "Option2": "A sequence of characters, typically used to represent text",
    "Option3": "A true/false value",
    "Option4": "A decimal number",
    "Answer": "A sequence of characters, typically used to represent text"
  },
  {
    "question_no.": 18,
    "Question": "What is an 'integer' data type?",
    "Option1": "A number with a decimal point",
    "Option2": "A whole number (positive, negative, or zero) without a fractional component",
    "Option3": "A sequence of characters",
    "Option4": "A true/false value",
    "Answer": "A whole number (positive, negative, or zero) without a fractional component"
  },
  {
    "question_no.": 19,
    "Question": "What is a 'float' (or double) data type?",
    "Option1": "A whole number",
    "Option2": "A number that can have a fractional or decimal component, used to represent real numbers",
    "Option3": "A character",
    "Option4": "A boolean value",
    "Answer": "A number that can have a fractional or decimal component, used to represent real numbers"
  },
  {
    "question_no.": 20,
    "Question": "What is a 'boolean' data type?",
    "Option1": "A sequence of numbers",
    "Option2": "A data type that can only have one of two possible values, typically 'true' or 'false'",
    "Option3": "A complex numerical value",
    "Option4": "A character string",
    "Answer": "A data type that can only have one of two possible values, typically 'true' or 'false'"
  },
  {
    "question_no.": 21,
    "Question": "What is a 'comment' in programming?",
    "Option1": "A line of code that is executed by the compiler",
    "Option2": "Non-executable text within source code, used to explain the code to human readers, ignored by compilers/interpreters",
    "Option3": "A type of error message",
    "Option4": "A keyword that changes program flow",
    "Answer": "Non-executable text within source code, used to explain the code to human readers, ignored by compilers/interpreters"
  },
  {
    "question_no.": 22,
    "Question": "What is 'pseudocode'?",
    "Option1": "Actual executable code in a specific language",
    "Option2": "An informal high-level description of the operating principle of a computer program or algorithm, using natural language elements and programming-like conventions",
    "Option3": "Machine code representation",
    "Option4": "A compiled program",
    "Answer": "An informal high-level description of the operating principle of a computer program or algorithm, using natural language elements and programming-like conventions"
  },
  {
    "question_no.": 23,
    "Question": "What is a 'flowchart'?",
    "Option1": "A list of program variables",
    "Option2": "A graphical representation of an algorithm or process, showing the steps as boxes of various kinds, and their order by connecting them with arrows",
    "Option3": "A type of programming error",
    "Option4": "A numerical calculation tool",
    "Answer": "A graphical representation of an algorithm or process, showing the steps as boxes of various kinds, and their order by connecting them with arrows"
  },
  {
    "question_no.": 24,
    "Question": "What is 'indentation' in programming?",
    "Option1": "A type of comment",
    "Option2": "The use of white space (spaces or tabs) at the beginning of a line of code to visually organize and indicate the hierarchical structure of the code, crucial in some languages like Python",
    "Option3": "A syntax error",
    "Option4": "A method for naming variables",
    "Answer": "The use of white space (spaces or tabs) at the beginning of a line of code to visually organize and indicate the hierarchical structure of the code, crucial in some languages like Python"
  },
  {
    "question_no.": 25,
    "Question": "What is 'error handling'?",
    "Option1": "Ignoring program errors",
    "Option2": "The process of anticipating, detecting, and resolving errors or exceptions that occur during the execution of a program to prevent crashes and ensure graceful degradation",
    "Option3": "Optimizing code for speed",
    "Option4": "Writing comments in code",
    "Answer": "The process of anticipating, detecting, and resolving errors or exceptions that occur during the execution of a program to prevent crashes and ensure graceful degradation"
  },
  {
    "question_no.": 26,
    "Question": "What is an 'exception'?",
    "Option1": "A normal program execution path",
    "Option2": "An event that disrupts the normal flow of a program, typically an error or an unexpected condition that occurs during runtime",
    "Option3": "A reserved keyword in a language",
    "Option4": "A variable declaration",
    "Answer": "An event that disrupts the normal flow of a program, typically an error or an unexpected condition that occurs during runtime"
  },
  {
    "question_no.": 27,
    "Question": "What is a 'syntax error'?",
    "Option1": "An error that occurs during program execution",
    "Option2": "An error that violates the grammatical rules of a programming language, typically detected by the compiler or interpreter before execution",
    "Option3": "A logical error in the program's design",
    "Option4": "An error due to insufficient memory",
    "Answer": "An error that violates the grammatical rules of a programming language, typically detected by the compiler or interpreter before execution"
  },
  {
    "question_no.": 28,
    "Question": "What is a 'runtime error'?",
    "Option1": "An error detected before program execution",
    "Option2": "An error that occurs during the execution of a program, often due to unexpected conditions or invalid operations (e.g., division by zero, null pointer dereference)",
    "Option3": "An error in the program's user interface",
    "Option4": "An error in hardware components",
    "Answer": "An error that occurs during the execution of a program, often due to unexpected conditions or invalid operations (e.g., division by zero, null pointer dereference)"
  },
  {
    "question_no.": 29,
    "Question": "What is a 'logical error'?",
    "Option1": "An error that prevents the program from compiling",
    "Option2": "A flaw in the program's design or algorithm that causes it to produce incorrect or unintended results, even though the syntax is correct and no runtime errors occur",
    "Option3": "An error due to incorrect indentation",
    "Option4": "An error related to network connectivity",
    "Answer": "A flaw in the program's design or algorithm that causes it to produce incorrect or unintended results, even though the syntax is correct and no runtime errors occur"
  },
  {
    "question_no.": 30,
    "Question": "What is 'version control'?",
    "Option1": "A system for tracking program execution speed",
    "Option2": "A system that records changes to a file or set of files over time so that you can recall specific versions later, essential for collaborative software development",
    "Option3": "A tool for compressing files",
    "Option4": "A method for encrypting code",
    "Answer": "A system that records changes to a file or set of files over time so that you can recall specific versions later, essential for collaborative software development"
  },
  {
    "question_no.": 31,
    "Question": "What is 'git'?",
    "Option1": "A type of programming language",
    "Option2": "A distributed version control system for tracking changes in source code during software development, enabling collaboration among developers",
    "Option3": "A graphical user interface library",
    "Option4": "A database management system",
    "Answer": "A distributed version control system for tracking changes in source code during software development, enabling collaboration among developers"
  },
  {
    "question_no.": 32,
    "Question": "What is a 'repository' in version control?",
    "Option1": "A single file containing all source code",
    "Option2": "A central location where all the files, changes, and history of a project are stored, allowing multiple developers to collaborate and track modifications",
    "Option3": "A database of user information",
    "Option4": "A folder for temporary files",
    "Answer": "A central location where all the files, changes, and history of a project are stored, allowing multiple developers to collaborate and track modifications"
  },
  {
    "question_no.": 33,
    "Question": "What is a 'commit' in version control?",
    "Option1": "Deleting a file from the repository",
    "Option2": "A snapshot of the changes made to the repository at a specific point in time, along with a message describing those changes",
    "Option3": "A command to compile code",
    "Option4": "A command to run tests",
    "Answer": "A snapshot of the changes made to the repository at a specific point in time, along with a message describing those changes"
  },
  {
    "question_no.": 34,
    "Question": "What is 'branching' in version control?",
    "Option1": "Merging code from different versions",
    "Option2": "Creating a separate line of development from the main codebase, allowing developers to work on new features or bug fixes independently without affecting the main project",
    "Option3": "Deleting old versions of code",
    "Option4": "Reverting to an earlier version",
    "Answer": "Creating a separate line of development from the main codebase, allowing developers to work on new features or bug fixes independently without affecting the main project"
  },
  {
    "question_no.": 35,
    "Question": "What is 'merging' in version control?",
    "Option1": "Creating a new branch of code",
    "Option2": "The process of integrating changes from one branch of code into another, combining different lines of development back together",
    "Option3": "Deleting unnecessary code",
    "Option4": "Renaming a repository",
    "Answer": "The process of integrating changes from one branch of code into another, combining different lines of development back together"
  },
  {
    "question_no.": 36,
    "Question": "What is 'object-oriented programming (OOP)'?",
    "Option1": "A programming paradigm based on functions and procedures",
    "Option2": "A programming paradigm based on the concept of 'objects', which can contain data (attributes) and code (methods) that operate on that data",
    "Option3": "A programming approach that uses only sequential execution",
    "Option4": "A method for writing machine code directly",
    "Answer": "A programming paradigm based on the concept of 'objects', which can contain data (attributes) and code (methods) that operate on that data"
  },
  {
    "question_no.": 37,
    "Question": "What is a 'class' in OOP?",
    "Option1": "A specific object instance",
    "Option2": "A blueprint or template for creating objects, defining their attributes (data) and methods (behaviors)",
    "Option3": "A type of variable",
    "Option4": "A function that returns a value",
    "Answer": "A blueprint or template for creating objects, defining their attributes (data) and methods (behaviors)"
  },
  {
    "question_no.": 38,
    "Question": "What is an 'object' in OOP?",
    "Option1": "A blueprint for creating instances",
    "Option2": "An instance of a class, representing a real-world entity with specific attributes and behaviors defined by its class",
    "Option3": "A function within a class",
    "Option4": "A collection of unrelated data",
    "Answer": "An instance of a class, representing a real-world entity with specific attributes and behaviors defined by its class"
  },
  {
    "question_no.": 39,
    "Question": "What is 'encapsulation' in OOP?",
    "Option1": "Allowing direct access to all data",
    "Option2": "Bundling data (attributes) and the methods (functions) that operate on the data into a single unit (class), and restricting direct access to some of the object's components",
    "Option3": "The ability to perform multiple tasks at once",
    "Option4": "Creating new classes from existing ones",
    "Answer": "Bundling data (attributes) and the methods (functions) that operate on the data into a single unit (class), and restricting direct access to some of the object's components"
  },
  {
    "question_no.": 40,
    "Question": "What is 'inheritance' in OOP?",
    "Option1": "Bundling data and methods into a single unit",
    "Option2": "A mechanism by which one class (subclass/child class) acquires the properties and behaviors of another class (superclass/parent class), promoting code reusability",
    "Option3": "The ability of an object to take on many forms",
    "Option4": "Hiding implementation details from the user",
    "Answer": "A mechanism by which one class (subclass/child class) acquires the properties and behaviors of another class (superclass/parent class), promoting code reusability"
  },
  {
    "question_no.": 41,
    "Question": "What is 'polymorphism' in OOP?",
    "Option1": "Bundling data and methods",
    "Option2": "The ability of objects of different classes to be treated as objects of a common superclass, allowing methods to be called on objects of different types through a single interface",
    "Option3": "Acquiring properties from another class",
    "Option4": "Restricting access to internal data",
    "Answer": "The ability of objects of different classes to be treated as objects of a common superclass, allowing methods to be called on objects of different types through a single interface"
  },
  {
    "question_no.": 42,
    "Question": "What is 'abstraction' in OOP?",
    "Option1": "Showing all complex details to the user",
    "Option2": "The process of hiding the complex implementation details and showing only the essential features of an object or system to the user, focusing on 'what' it does rather than 'how' it does it",
    "Option3": "Creating multiple objects from one class",
    "Option4": "Combining different data types into one",
    "Answer": "The process of hiding the complex implementation details and showing only the essential features of an object or system to the user, focusing on 'what' it does rather than 'how' it does it"
  },
  {
    "question_no.": 43,
    "Question": "What is 'constructor' in OOP?",
    "Option1": "A method that destroys an object",
    "Option2": "A special method in a class that is automatically called when an object of that class is created (instantiated), used to initialize the object's state",
    "Option3": "A regular method that performs a task",
    "Option4": "A keyword for inheritance",
    "Answer": "A special method in a class that is automatically called when an object of that class is created (instantiated), used to initialize the object's state"
  },
  {
    "question_no.": 44,
    "Question": "What is 'destructor' in OOP?",
    "Option1": "A method that creates an object",
    "Option2": "A special method in a class that is automatically called when an object is about to be destroyed or goes out of scope, used to clean up resources (e.g., free memory)",
    "Option3": "A method for setting object properties",
    "Option4": "A method for getting object properties",
    "Answer": "A special method in a class that is automatically called when an object is about to be destroyed or goes out of scope, used to clean up resources (e.g., free memory)"
  },
  {
    "question_no.": 45,
    "Question": "What is 'method overloading'?",
    "Option1": "Defining multiple methods with the same name but different return types",
    "Option2": "Defining multiple methods in the same class with the same name but different parameters (number, type, or order of arguments)",
    "Option3": "Overwriting a method in a subclass",
    "Option4": "Calling a method repeatedly in a loop",
    "Answer": "Defining multiple methods in the same class with the same name but different parameters (number, type, or order of arguments)"
  },
  {
    "question_no.": 46,
    "Question": "What is 'method overriding'?",
    "Option1": "Defining multiple methods with the same name in the same class",
    "Option2": "Providing a new implementation for a method in a subclass that is already defined in its superclass, allowing specific behavior for the subclass",
    "Option3": "Calling a method from a different class",
    "Option4": "A type of error in method definition",
    "Answer": "Providing a new implementation for a method in a subclass that is already defined in its superclass, allowing specific behavior for the subclass"
  },
  {
    "question_no.": 47,
    "Question": "What is 'primitive data type'?",
    "Option1": "A complex data structure like an array",
    "Option2": "Basic data types built into a programming language that are not composed of other data types (e.g., int, char, boolean, float)",
    "Option3": "A user-defined data type",
    "Option4": "A data type that holds objects",
    "Answer": "Basic data types built into a programming language that are not composed of other data types (e.g., int, char, boolean, float)"
  },
  {
    "question_no.": 48,
    "Question": "What is 'reference data type' (or non-primitive)?",
    "Option1": "A basic data type like an integer",
    "Option2": "Data types that store references (memory addresses) to objects rather than the actual values (e.g., classes, arrays, interfaces)",
    "Option3": "A data type that can only store true/false",
    "Option4": "A data type that always stores numbers",
    "Answer": "Data types that store references (memory addresses) to objects rather than the actual values (e.g., classes, arrays, interfaces)"
  },
  {
    "question_no.": 49,
    "Question": "What is 'recursion'?",
    "Option1": "A function that always runs in a loop",
    "Option2": "A programming technique where a function calls itself directly or indirectly to solve a problem by breaking it down into smaller, similar subproblems",
    "Option3": "A type of iterative statement",
    "Option4": "A method for handling errors",
    "Answer": "A programming technique where a function calls itself directly or indirectly to solve a problem by breaking it down into smaller, similar subproblems"
  },
  {
    "question_no.": 50,
    "Question": "What is 'iteration'?",
    "Option1": "A function calling itself",
    "Option2": "A programming technique that repeatedly executes a block of code using loops (e.g., for, while) until a specific condition is met",
    "Option3": "A method for defining classes",
    "Option4": "A way to define variables",
    "Answer": "A programming technique that repeatedly executes a block of code using loops (e.g., for, while) until a specific condition is met"
  },
  {
    "question_no.": 51,
    "Question": "What is 'scope' in programming?",
    "Option1": "The type of data a variable can hold",
    "Option2": "The region of a program where a variable, function, or other identifier is visible and can be accessed",
    "Option3": "The value of a variable",
    "Option4": "The execution speed of a program",
    "Answer": "The region of a program where a variable, function, or other identifier is visible and can be accessed"
  },
  {
    "question_no.": 52,
    "Question": "What is 'global variable'?",
    "Option1": "A variable only accessible within a function",
    "Option2": "A variable declared outside of any function or block, making it accessible from anywhere in the program",
    "Option3": "A variable that stores a true/false value",
    "Option4": "A variable whose value cannot change",
    "Answer": "A variable declared outside of any function or block, making it accessible from anywhere in the program"
  },
  {
    "question_no.": 53,
    "Question": "What is 'local variable'?",
    "Option1": "A variable accessible from anywhere in the program",
    "Option2": "A variable declared inside a function or a block, making it accessible only within that specific function or block",
    "Option3": "A variable that stores a fixed value",
    "Option4": "A variable for network communication",
    "Answer": "A variable declared inside a function or a block, making it accessible only within that specific function or block"
  },
  {
    "question_no.": 54,
    "Question": "What is 'parameters' (or arguments) in a function?",
    "Option1": "The return value of a function",
    "Option2": "The values that are passed into a function when it is called, allowing the function to operate on specific data",
    "Option3": "Variables declared inside a function",
    "Option4": "The name of the function",
    "Answer": "The values that are passed into a function when it is called, allowing the function to operate on specific data"
  },
  {
    "question_no.": 55,
    "Question": "What is 'return value' of a function?",
    "Option1": "The input provided to the function",
    "Option2": "The value that a function sends back to the part of the code that called it after completing its execution",
    "Option3": "A side effect of the function",
    "Option4": "The name of the function",
    "Answer": "The value that a function sends back to the part of the code that called it after completing its execution"
  },
  {
    "question_no.": 56,
    "Question": "What is a 'library' in programming?",
    "Option1": "A single executable program",
    "Option2": "A collection of pre-written functions, classes, and resources that can be reused in other programs, providing common functionalities",
    "Option3": "A place to store temporary files",
    "Option4": "A hardware component for storage",
    "Answer": "A collection of pre-written functions, classes, and resources that can be reused in other programs, providing common functionalities"
  },
  {
    "question_no.": 57,
    "Question": "What is a 'framework' in programming?",
    "Option1": "A simple collection of functions",
    "Option2": "A standardized collection of classes, interfaces, and APIs that provides a structured foundation for building applications, often dictating the architecture of the application",
    "Option3": "A tool for debugging only",
    "Option4": "A specific algorithm for sorting data",
    "Answer": "A standardized collection of classes, interfaces, and APIs that provides a structured foundation for building applications, often dictating the architecture of the application"
  },
  {
    "question_no.": 58,
    "Question": "What is an 'API' (Application Programming Interface)?",
    "Option1": "A type of hardware interface",
    "Option2": "A set of rules, protocols, and tools for building software applications, defining how different software components should interact with each other",
    "Option3": "A graphical user interface",
    "Option4": "A physical connection between devices",
    "Answer": "A set of rules, protocols, and tools for building software applications, defining how different software components should interact with each other"
  },
  {
    "question_no.": 59,
    "Question": "What is 'pseudocode' typically used for?",
    "Option1": "Writing final executable code",
    "Option2": "Planning and designing algorithms and program logic before writing actual code, focusing on clarity and not specific syntax",
    "Option3": "Debugging compiled programs",
    "Option4": "Generating reports from databases",
    "Answer": "Planning and designing algorithms and program logic before writing actual code, focusing on clarity and not specific syntax"
  },
  {
    "question_no.": 60,
    "Question": "What is a 'data structure'?",
    "Option1": "A specific programming language",
    "Option2": "A specialized format for organizing and storing data in a computer so that it can be accessed and modified efficiently",
    "Option3": "A type of error in a program",
    "Option4": "A tool for code compilation",
    "Answer": "A specialized format for organizing and storing data in a computer so that it can be accessed and modified efficiently"
  },
  {
    "question_no.": 61,
    "Question": "What is a 'linked list'?",
    "Option1": "A data structure where elements are stored in contiguous memory",
    "Option2": "A linear data structure where elements are stored in nodes, and each node contains data and a pointer (or reference) to the next node in the sequence",
    "Option3": "A type of sorting algorithm",
    "Option4": "A method for network communication",
    "Answer": "A linear data structure where elements are stored in nodes, and each node contains data and a pointer (or reference) to the next node in the sequence"
  },
  {
    "question_no.": 62,
    "Question": "What is a 'stack' data structure?",
    "Option1": "First-In, First-Out (FIFO) access",
    "Option2": "A linear data structure that follows the Last-In, First-Out (LIFO) principle, where the last element added is the first one to be removed",
    "Option3": "Elements are accessed by index",
    "Option4": "Used for managing memory segments",
    "Answer": "A linear data structure that follows the Last-In, First-Out (LIFO) principle, where the last element added is the first one to be removed"
  },
  {
    "question_no.": 63,
    "Question": "What is a 'queue' data structure?",
    "Option1": "Last-In, First-Out (LIFO) access",
    "Option2": "A linear data structure that follows the First-In, First-Out (FIFO) principle, where the first element added is the first one to be removed",
    "Option3": "Elements are stored randomly",
    "Option4": "Used for graphical display management",
    "Answer": "A linear data structure that follows the First-In, First-Out (FIFO) principle, where the first element added is the first one to be removed"
  },
  {
    "question_no.": 64,
    "Question": "What is a 'tree' data structure?",
    "Option1": "A linear data structure",
    "Option2": "A hierarchical data structure composed of nodes, where each node has a value and may have child nodes, organized in a parent-child relationship",
    "Option3": "A data structure for storing unrelated items",
    "Option4": "A type of database table",
    "Answer": "A hierarchical data structure composed of nodes, where each node has a value and may have child nodes, organized in a parent-child relationship"
  },
  {
    "question_no.": 65,
    "Question": "What is a 'hash table' (or hash map)?",
    "Option1": "A data structure that stores data in a sorted order",
    "Option2": "A data structure that maps keys to values using a hash function to compute an index into an array of buckets or slots, providing fast data retrieval",
    "Option3": "A linear data structure with sequential access",
    "Option4": "A data structure for managing network packets",
    "Answer": "A data structure that maps keys to values using a hash function to compute an index into an array of buckets or slots, providing fast data retrieval"
  },
  {
    "question_no.": 66,
    "Question": "What is a 'pointer' in programming?",
    "Option1": "A variable that stores a numerical value",
    "Option2": "A variable that stores the memory address of another variable or a memory location, allowing direct memory access",
    "Option3": "A type of string data",
    "Option4": "A fixed value that cannot be changed",
    "Answer": "A variable that stores the memory address of another variable or a memory location, allowing direct memory access"
  },
  {
    "question_no.": 67,
    "Question": "What is 'memory allocation'?",
    "Option1": "Storing data on a hard drive",
    "Option2": "The process of reserving portions of computer memory for a program to use for storing data and instructions",
    "Option3": "Managing CPU cache",
    "Option4": "Optimizing network bandwidth",
    "Answer": "The process of reserving portions of computer memory for a program to use for storing data and instructions"
  },
  {
    "question_no.": 68,
    "Question": "What is 'static memory allocation'?",
    "Option1": "Memory allocated during program execution",
    "Option2": "Memory allocated at compile time, with a fixed size that cannot be changed during runtime, often for global or static variables",
    "Option3": "Memory that can be freed at any time",
    "Option4": "Memory used for temporary data only",
    "Answer": "Memory allocated at compile time, with a fixed size that cannot be changed during runtime, often for global or static variables"
  },
  {
    "question_no.": 69,
    "Question": "What is 'dynamic memory allocation'?",
    "Option1": "Memory allocated at compile time",
    "Option2": "Memory allocated during program runtime, allowing programs to request memory as needed and release it when no longer required (e.g., using malloc/free or new/delete)",
    "Option3": "Memory with a fixed, unchangeable size",
    "Option4": "Memory reserved for the operating system",
    "Answer": "Memory allocated during program runtime, allowing programs to request memory as needed and release it when no longer required (e.g., using malloc/free or new/delete)"
  },
  {
    "question_no.": 70,
    "Question": "What is 'garbage collection'?",
    "Option1": "A process for optimizing hard drive space",
    "Option2": "An automatic memory management process in some programming languages that reclaims memory that is no longer being used by the program, preventing memory leaks",
    "Option3": "A manual memory deallocation technique",
    "Option4": "A method for compressing files",
    "Answer": "An automatic memory management process in some programming languages that reclaims memory that is no longer being used by the program, preventing memory leaks"
  },
  {
    "question_no.": 71,
    "Question": "What is 'software development life cycle (SDLC)'?",
    "Option1": "A single phase of software development",
    "Option2": "A structured process that outlines the stages involved in developing software, from planning to deployment and maintenance (e.g., Waterfall, Agile)",
    "Option3": "A method for debugging code only",
    "Option4": "A tool for writing code",
    "Answer": "A structured process that outlines the stages involved in developing software, from planning to deployment and maintenance (e.g., Waterfall, Agile)"
  },
  {
    "question_no.": 72,
    "Question": "What is 'Agile methodology'?",
    "Option1": "A linear, sequential development approach",
    "Option2": "An iterative and incremental approach to software development that emphasizes flexibility, collaboration, customer feedback, and rapid delivery of working software in short cycles (sprints)",
    "Option3": "A methodology for hardware design",
    "Option4": "A method that avoids testing",
    "Answer": "An iterative and incremental approach to software development that emphasizes flexibility, collaboration, customer feedback, and rapid delivery of working software in short cycles (sprints)"
  },
  {
    "question_no.": 73,
    "Question": "What is 'Waterfall model' in SDLC?",
    "Option1": "An iterative and flexible approach",
    "Option2": "A linear-sequential design process where each phase must be completed before the next phase can begin, flowing downwards like a waterfall",
    "Option3": "A model that encourages frequent changes",
    "Option4": "A model focused on rapid prototyping",
    "Answer": "A linear-sequential design process where each phase must be completed before the next phase can begin, flowing downwards like a waterfall"
  },
  {
    "question_no.": 74,
    "Question": "What is 'testing' in software development?",
    "Option1": "The final stage where the software is released",
    "Option2": "The process of evaluating a software system or component to detect whether it satisfies specified requirements, identify defects, and ensure quality",
    "Option3": "The process of writing documentation",
    "Option4": "The process of optimizing code for speed",
    "Answer": "The process of evaluating a software system or component to detect whether it satisfies specified requirements, identify defects, and ensure quality"
  },
  {
    "question_no.": 75,
    "Question": "What is 'unit testing'?",
    "Option1": "Testing the entire software system",
    "Option2": "Testing individual components or modules of a software application in isolation to ensure they function correctly and meet their specifications",
    "Option3": "Testing the user interface",
    "Option4": "Testing integration between different systems",
    "Answer": "Testing individual components or modules of a software application in isolation to ensure they function correctly and meet their specifications"
  },
  {
    "question_no.": 76,
    "Question": "What is 'integration testing'?",
    "Option1": "Testing individual modules only",
    "Option2": "Testing the interfaces between components or modules to ensure that they interact correctly and that data flows properly between them",
    "Option3": "Testing the software after it's deployed",
    "Option4": "Testing performance under load",
    "Answer": "Testing the interfaces between components or modules to ensure that they interact correctly and that data flows properly between them"
  },
  {
    "question_no.": 77,
    "Question": "What is 'system testing'?",
    "Option1": "Testing only the user interface",
    "Option2": "Testing the complete and integrated software system to evaluate its compliance with specified requirements, often including functional and non-functional tests",
    "Option3": "Testing the database connections only",
    "Option4": "Testing individual code segments",
    "Answer": "Testing the complete and integrated software system to evaluate its compliance with specified requirements, often including functional and non-functional tests"
  },
  {
    "question_no.": 78,
    "Question": "What is 'acceptance testing'?",
    "Option1": "Testing by developers internally",
    "Option2": "Formal testing conducted to determine if a system satisfies its acceptance criteria and to enable the customer to determine whether to accept or reject the system",
    "Option3": "Testing for performance bottlenecks",
    "Option4": "Testing for security vulnerabilities",
    "Answer": "Formal testing conducted to determine if a system satisfies its acceptance criteria and to enable the customer to determine whether to accept or reject the system"
  },
  {
    "question_no.": 79,
    "Question": "What is 'black-box testing'?",
    "Option1": "Testing with knowledge of internal code structure",
    "Option2": "A testing method where the internal structure, design, and implementation of the item being tested are not known to the tester, focusing solely on inputs and outputs",
    "Option3": "Testing only the performance of the system",
    "Option4": "Testing using automated tools exclusively",
    "Answer": "A testing method where the internal structure, design, and implementation of the item being tested are not known to the tester, focusing solely on inputs and outputs"
  },
  {
    "question_no.": 80,
    "Question": "What is 'white-box testing'?",
    "Option1": "Testing without knowing the internal code",
    "Option2": "A testing method where the internal structure, design, and implementation (i.e., the code) of the item being tested are known to the tester, allowing for thorough examination of logical paths",
    "Option3": "Testing only the external appearance of the software",
    "Option4": "Testing exclusively for user experience",
    "Answer": "A testing method where the internal structure, design, and implementation (i.e., the code) of the item being tested are known to the tester, allowing for thorough examination of logical paths"
  },
  {
    "question_no.": 81,
    "Question": "What is 'syntax highlighting' in an IDE?",
    "Option1": "Highlighting syntax errors only",
    "Option2": "A feature in text editors and IDEs that displays text, especially source code, in different colors and fonts according to the category of terms, improving readability",
    "Option3": "A tool for optimizing code",
    "Option4": "A feature for compiling code faster",
    "Answer": "A feature in text editors and IDEs that displays text, especially source code, in different colors and fonts according to the category of terms, improving readability"
  },
  {
    "question_no.": 82,
    "Question": "What is 'autocompletion' (or Intellisense)?",
    "Option1": "Automatically fixing syntax errors",
    "Option2": "A feature in IDEs and text editors that predicts the rest of a word or phrase that a user is typing, offering suggestions to speed up coding and reduce errors",
    "Option3": "Automatically generating entire programs",
    "Option4": "Automatically compiling code after every change",
    "Answer": "A feature in IDEs and text editors that predicts the rest of a word or phrase that a user is typing, offering suggestions to speed up coding and reduce errors"
  },
  {
    "question_no.": 83,
    "Question": "What is a 'breakpoint' in debugging?",
    "Option1": "A point where the program encounters an error",
    "Option2": "An intentional stopping or pausing place in a program, set by a programmer during debugging, to examine the state of the program at that point",
    "Option3": "A point where the program restarts",
    "Option4": "A point where the program finishes execution",
    "Answer": "An intentional stopping or pausing place in a program, set by a programmer during debugging, to examine the state of the program at that point"
  },
  {
    "question_no.": 84,
    "Question": "What is 'stepping' (step-over, step-into, step-out) in debugging?",
    "Option1": "Running the program at full speed",
    "Option2": "Debugging commands that allow a programmer to execute code line by line (step-over), enter into a function (step-into), or exit a function (step-out) to observe program flow",
    "Option3": "Skipping parts of the code during execution",
    "Option4": "Measuring the performance of code sections",
    "Answer": "Debugging commands that allow a programmer to execute code line by line (step-over), enter into a function (step-into), or exit a function (step-out) to observe program flow"
  },
  {
    "question_no.": 85,
    "Question": "What is 'integrated development environment (IDE)'?",
    "Option1": "A simple text editor for code",
    "Option2": "A software application that provides comprehensive facilities to computer programmers for software development, typically consisting of a source code editor, build automation tools, and a debugger",
    "Option3": "A tool for creating user documentation",
    "Option4": "A program for managing databases",
    "Answer": "A software application that provides comprehensive facilities to computer programmers for software development, typically consisting of a source code editor, build automation tools, and a debugger"
  },
  {
    "question_no.": 86,
    "Question": "What is 'low-level programming language'?",
    "Option1": "A language that is easy for humans to understand",
    "Option2": "A programming language that provides little or no abstraction from a computer's instruction set architecture, representing instructions in a form close to machine code (e.g., Assembly Language)",
    "Option3": "A language used for web development",
    "Option4": "A language with automatic memory management",
    "Answer": "A programming language that provides little or no abstraction from a computer's instruction set architecture, representing instructions in a form close to machine code (e.g., Assembly Language)"
  },
  {
    "question_no.": 87,
    "Question": "What is 'high-level programming language'?",
    "Option1": "A language that is difficult for humans to understand",
    "Option2": "A programming language with strong abstraction from the details of the computer, focusing on human readability and productivity (e.g., Python, Java, C++)",
    "Option3": "A language used only for embedded systems",
    "Option4": "A language that requires direct hardware access",
    "Answer": "A programming language with strong abstraction from the details of the computer, focusing on human readability and productivity (e.g., Python, Java, C++)"
  },
  {
    "question_no.": 88,
    "Question": "What is 'platform independence'?",
    "Option1": "Software that runs on a single operating system only",
    "Option2": "The ability of software to run on different operating systems and hardware architectures without modification, often achieved through virtual machines (like Java's JVM) or interpreted languages",
    "Option3": "Software that requires specific hardware",
    "Option4": "Software that doesn't need an operating system",
    "Answer": "The ability of software to run on different operating systems and hardware architectures without modification, often achieved through virtual machines (like Java's JVM) or interpreted languages"
  },
  {
    "question_no.": 89,
    "Question": "What is a 'virtual machine' (in programming context)?",
    "Option1": "A physical computer hardware device",
    "Option2": "An emulation of a computer system, providing a runtime environment where programs can execute independently of the underlying hardware or operating system (e.g., Java Virtual Machine - JVM)",
    "Option3": "A type of network switch",
    "Option4": "A software for designing circuits",
    "Answer": "An emulation of a computer system, providing a runtime environment where programs can execute independently of the underlying hardware or operating system (e.g., Java Virtual Machine - JVM)"
  },
  {
    "question_no.": 90,
    "Question": "What is 'bytecode'?",
    "Option1": "Machine code directly executable by CPU",
    "Option2": "An intermediate code format that is typically platform-independent and optimized for interpretation by a virtual machine (e.g., Java bytecode, Python bytecode)",
    "Option3": "Source code written in a high-level language",
    "Option4": "Binary code for specific hardware",
    "Answer": "An intermediate code format that is typically platform-independent and optimized for interpretation by a virtual machine (e.g., Java bytecode, Python bytecode)"
  },
  {
    "question_no.": 91,
    "Question": "What is 'Just-In-Time (JIT) compilation'?",
    "Option1": "Compiling entire program before execution",
    "Option2": "A technique used by virtual machines (like JVM) where bytecode is compiled into native machine code at runtime, just before execution, combining advantages of both interpretation and compilation",
    "Option3": "Only used for debugging purposes",
    "Option4": "A method for interpreting code only",
    "Answer": "A technique used by virtual machines (like JVM) where bytecode is compiled into native machine code at runtime, just before execution, combining advantages of both interpretation and compilation"
  },
  {
    "question_no.": 92,
    "Question": "What is 'declarative programming'?",
    "Option1": "Focuses on 'how' to solve a problem",
    "Option2": "A programming paradigm that focuses on 'what' the program should accomplish, without explicitly stating 'how' to achieve it (e.g., SQL, HTML, functional programming languages)",
    "Option3": "Relies heavily on loops and conditional statements",
    "Option4": "Uses direct memory manipulation",
    "Answer": "A programming paradigm that focuses on 'what' the program should accomplish, without explicitly stating 'how' to achieve it (e.g., SQL, HTML, functional programming languages)"
  },
  {
    "question_no.": 93,
    "Question": "What is 'imperative programming'?",
    "Option1": "Focuses on 'what' to accomplish",
    "Option2": "A programming paradigm that focuses on 'how' to solve a problem by explicitly defining a sequence of instructions (statements) that change the program's state (e.g., C, Java, Python)",
    "Option3": "Uses only functions with no side effects",
    "Option4": "Primarily used for database queries",
    "Answer": "A programming paradigm that focuses on 'how' to solve a problem by explicitly defining a sequence of instructions (statements) that change the program's state (e.g., C, Java, Python)"
  },
  {
    "question_no.": 94,
    "Question": "What is 'functional programming'?",
    "Option1": "A paradigm based on objects and classes",
    "Option2": "A programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data, emphasizing pure functions and immutability",
    "Option3": "A paradigm that focuses on sequential instructions",
    "Option4": "A method for designing user interfaces",
    "Answer": "A programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data, emphasizing pure functions and immutability"
  },
  {
    "question_no.": 95,
    "Question": "What is a 'pure function' in functional programming?",
    "Option1": "A function that has side effects",
    "Option2": "A function that, given the same inputs, will always return the same output, and has no side effects (does not modify external state or cause observable interactions)",
    "Option3": "A function that only performs I/O operations",
    "Option4": "A function that modifies global variables",
    "Answer": "A function that, given the same inputs, will always return the same output, and has no side effects (does not modify external state or cause observable interactions)"
  },
  {
    "question_no.": 96,
    "Question": "What is 'immutable data'?",
    "Option1": "Data that can be changed after creation",
    "Option2": "Data that cannot be modified after it is created, promoting predictability and simplifying concurrency in programs",
    "Option3": "Data stored in temporary memory",
    "Option4": "Data that is always numerical",
    "Answer": "Data that cannot be modified after it is created, promoting predictability and simplifying concurrency in programs"
  },
  {
    "question_no.": 97,
    "Question": "What is 'concurrency' in programming?",
    "Option1": "Executing tasks one after another sequentially",
    "Option2": "The ability of different parts of a program or multiple programs to be executed at the same time or appear to be executed simultaneously, often for better performance or responsiveness",
    "Option3": "A method for optimizing memory usage",
    "Option4": "A type of error in loops",
    "Answer": "The ability of different parts of a program or multiple programs to be executed at the same time or appear to be executed simultaneously, often for better performance or responsiveness"
  },
  {
    "question_no.": 98,
    "Question": "What is 'parallelism' in programming?",
    "Option1": "Executing tasks sequentially on one core",
    "Option2": "A state where multiple tasks or sub-tasks are genuinely executed simultaneously at the exact same instant, typically on multiple processor cores or machines, for faster computation",
    "Option3": "A method for single-threaded execution",
    "Option4": "A technique for slowing down program execution",
    "Answer": "A state where multiple tasks or sub-tasks are genuinely executed simultaneously at the exact same instant, typically on multiple processor cores or machines, for faster computation"
  },
  {
    "question_no.": 99,
    "Question": "What is a 'thread' in programming?",
    "Option1": "A separate program running independently",
    "Option2": "A lightweight unit of execution within a process that can run concurrently with other threads of the same process, sharing the process's memory space",
    "Option3": "A type of error in functions",
    "Option4": "A variable that stores character data",
    "Answer": "A lightweight unit of execution within a process that can run concurrently with other threads of the same process, sharing the process's memory space"
  },
  {
    "question_no.": 100,
    "Question": "What is a 'process' in programming?",
    "Option1": "A lightweight unit of execution within a program",
    "Option2": "An independent execution environment that includes its own memory space, resources, and one or more threads, managed by the operating system",
    "Option3": "A variable that stores numerical data",
    "Option4": "A function that performs a single task",
    "Answer": "An independent execution environment that includes its own memory space, resources, and one or more threads, managed by the operating system"
  },
  {
    "question_no.": 101,
    "Question": "What is 'synchronization' (in concurrency)?",
    "Option1": "Allowing all threads to access shared resources simultaneously",
    "Option2": "The coordination of the execution of multiple processes or threads to ensure proper ordering of operations and consistent access to shared resources, preventing race conditions",
    "Option3": "Making programs run slower intentionally",
    "Option4": "A method for debugging errors only",
    "Answer": "The coordination of the execution of multiple processes or threads to ensure proper ordering of operations and consistent access to shared resources, preventing race conditions"
  },
  {
    "question_no.": 102,
    "Question": "What is a 'race condition'?",
    "Option1": "A competition to see which program finishes first",
    "Option2": "A situation where the outcome of multiple threads accessing shared resources depends on the relative order of their execution, leading to unpredictable or incorrect results",
    "Option3": "A type of sorting algorithm",
    "Option4": "An error that prevents compilation",
    "Answer": "A situation where the outcome of multiple threads accessing shared resources depends on the relative order of their execution, leading to unpredictable or incorrect results"
  },
  {
    "question_no.": 103,
    "Question": "What is 'mutex' (mutual exclusion) in concurrency?",
    "Option1": "A tool for allowing unlimited access to shared resources",
    "Option2": "A synchronization primitive that provides mutual exclusion, ensuring that only one thread can access a shared resource or critical section at any given time",
    "Option3": "A method for creating new threads",
    "Option4": "A way to distribute tasks across multiple CPUs",
    "Answer": "A synchronization primitive that provides mutual exclusion, ensuring that only one thread can access a shared resource or critical section at any given time"
  },
  {
    "question_no.": 104,
    "Question": "What is a 'semaphore' in concurrency?",
    "Option1": "A variable for counting non-shared resources",
    "Option2": "A synchronization primitive that controls access to a common resource by multiple processes or threads, typically using a counter to manage available units of a resource",
    "Option3": "A tool for inter-process communication only",
    "Option4": "A method for error handling",
    "Answer": "A synchronization primitive that controls access to a common resource by multiple processes or threads, typically using a counter to manage available units of a resource"
  },
  {
    "question_no.": 105,
    "Question": "What is a 'deadlock' in concurrency?",
    "Option1": "A program finishing quickly",
    "Option2": "A situation where two or more competing actions are each waiting for the other to finish, and thus neither ever finishes, leading to a standstill",
    "Option3": "Efficient resource allocation",
    "Option4": "A condition that improves program performance",
    "Answer": "A situation where two or more competing actions are each waiting for the other to finish, and thus neither ever finishes, leading to a standstill"
  },
  {
    "question_no.": 106,
    "Question": "What is a 'framework' in web development?",
    "Option1": "A single JavaScript library",
    "Option2": "A pre-built, reusable structure or skeleton that provides common functionalities and architectural patterns for building web applications (e.g., React, Angular, Django, Flask)",
    "Option3": "A tool for image editing",
    "Option4": "A database system",
    "Answer": "A pre-built, reusable structure or skeleton that provides common functionalities and architectural patterns for building web applications (e.g., React, Angular, Django, Flask)"
  },
  {
    "question_no.": 107,
    "Question": "What is 'front-end development'?",
    "Option1": "Working on server-side logic and databases",
    "Option2": "Developing the user-facing part of a website or application, including user interfaces, interactive elements, and overall visual design, using languages like HTML, CSS, and JavaScript",
    "Option3": "Managing network infrastructure",
    "Option4": "Writing operating system kernels",
    "Answer": "Developing the user-facing part of a website or application, including user interfaces, interactive elements, and overall visual design, using languages like HTML, CSS, and JavaScript"
  },
  {
    "question_no.": 108,
    "Question": "What is 'back-end development'?",
    "Option1": "Developing the user interface of an application",
    "Option2": "Developing the server-side logic, databases, APIs, and overall infrastructure that powers the front-end of a website or application, invisible to the user",
    "Option3": "Designing graphical elements only",
    "Option4": "Writing documentation for users",
    "Answer": "Developing the server-side logic, databases, APIs, and overall infrastructure that powers the front-end of a website or application, invisible to the user"
  },
  {
    "question_no.": 109,
    "Question": "What is 'full-stack development'?",
    "Option1": "Specializing in only one area of development",
    "Option2": "Developing both the front-end (user interface, client-side logic) and back-end (server-side logic, databases, APIs) of an application",
    "Option3": "Focusing only on mobile application development",
    "Option4": "Only working on system administration tasks",
    "Answer": "Developing both the front-end (user interface, client-side logic) and back-end (server-side logic, databases, APIs) of an application"
  },
  {
    "question_no.": 110,
    "Question": "What is 'HTML' (HyperText Markup Language)?",
    "Option1": "A programming language for game development",
    "Option2": "The standard markup language for creating web pages and web applications, defining the structure and content of web documents",
    "Option3": "A styling language for web pages",
    "Option4": "A scripting language for interactive web pages",
    "Answer": "The standard markup language for creating web pages and web applications, defining the structure and content of web documents"
  },
  {
    "question_no.": 111,
    "Question": "What is 'CSS' (Cascading Style Sheets)?",
    "Option1": "A language for structuring web content",
    "Option2": "A stylesheet language used for describing the presentation of a document written in HTML or XML, including colors, layout, and fonts",
    "Option3": "A programming language for server-side logic",
    "Option4": "A database query language",
    "Answer": "A stylesheet language used for describing the presentation of a document written in HTML or XML, including colors, layout, and fonts"
  },
  {
    "question_no.": 112,
    "Question": "What is 'JavaScript'?",
    "Option1": "A styling language for web pages",
    "Option2": "A high-level, interpreted programming language primarily used to make web pages interactive and dynamic, runnable on both client-side and server-side (Node.js)",
    "Option3": "A markup language for web content",
    "Option4": "A database management system",
    "Answer": "A high-level, interpreted programming language primarily used to make web pages interactive and dynamic, runnable on both client-side and server-side (Node.js)"
  },
  {
    "question_no.": 113,
    "Question": "What is 'SQL' (Structured Query Language)?",
    "Option1": "A general-purpose programming language",
    "Option2": "A domain-specific language used for managing and querying data in relational database management systems (RDBMS)",
    "Option3": "A markup language for web pages",
    "Option4": "A language for front-end web development",
    "Answer": "A domain-specific language used for managing and querying data in relational database management systems (RDBMS)"
  },
  {
    "question_no.": 114,
    "Question": "What is a 'database'?",
    "Option1": "A single spreadsheet file",
    "Option2": "An organized collection of structured information, or data, typically stored electronically in a computer system, accessible and manageable for various purposes",
    "Option3": "A type of programming language",
    "Option4": "A hardware component for processing",
    "Answer": "An organized collection of structured information, or data, typically stored electronically in a computer system, accessible and manageable for various purposes"
  },
  {
    "question_no.": 115,
    "Question": "What is 'relational database'?",
    "Option1": "A database without structured data",
    "Option2": "A database that organizes data into one or more tables (or relations) of rows and columns, where each row represents a record and each column represents an attribute, with relationships defined between tables",
    "Option3": "A database that stores unstructured text",
    "Option4": "A database for real-time streaming data",
    "Answer": "A database that organizes data into one or more tables (or relations) of rows and columns, where each row represents a record and each column represents an attribute, with relationships defined between tables"
  },
  {
    "question_no.": 116,
    "Question": "What is 'NoSQL database'?",
    "Option1": "A database that strictly uses SQL",
    "Option2": "A non-relational database that provides a mechanism for storage and retrieval of data that is modeled in means other than the tabular relations used in relational databases (e.g., document, key-value, graph)",
    "Option3": "A database that only stores numbers",
    "Option4": "A database without any form of structure",
    "Answer": "A non-relational database that provides a mechanism for storage and retrieval of data that is modeled in means other than the tabular relations used in relational databases (e.g., document, key-value, graph)"
  },
  {
    "question_no.": 117,
    "Question": "What is a 'primary key' in a relational database?",
    "Option1": "A field that can contain duplicate values",
    "Option2": "A column or a set of columns in a table that uniquely identifies each row (record) in that table, ensuring data integrity and uniqueness",
    "Option3": "A field used for sorting data only",
    "Option4": "A field that links to another table",
    "Answer": "A column or a set of columns in a table that uniquely identifies each row (record) in that table, ensuring data integrity and uniqueness"
  },
  {
    "question_no.": 118,
    "Question": "What is a 'foreign key' in a relational database?",
    "Option1": "A field that uniquely identifies rows in its own table",
    "Option2": "A column or a set of columns in one table that refers to the primary key in another table, establishing a link or relationship between the two tables",
    "Option3": "A field that stores encrypted data",
    "Option4": "A field used for primary sorting",
    "Answer": "A column or a set of columns in one table that refers to the primary key in another table, establishing a link or relationship between the two tables"
  },
  {
    "question_no.": 119,
    "Question": "What is 'SQL injection'?",
    "Option1": "A valid SQL query execution",
    "Option2": "A common web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database, often to bypass authentication or extract data",
    "Option3": "A method for optimizing SQL queries",
    "Option4": "A technique for creating new database tables",
    "Answer": "A common web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database, often to bypass authentication or extract data"
  },
  {
    "question_no.": 120,
    "Question": "What is 'object-relational mapping (ORM)'?",
    "Option1": "Directly writing SQL queries for every database interaction",
    "Option2": "A technique that allows developers to interact with a relational database using an object-oriented paradigm, mapping database tables to classes and rows to objects, abstracting SQL queries",
    "Option3": "A method for designing database schemas",
    "Option4": "A tool for analyzing database performance",
    "Answer": "A technique that allows developers to interact with a relational database using an object-oriented paradigm, mapping database tables to classes and rows to objects, abstracting SQL queries"
  },
  {
    "question_no.": 121,
    "Question": "What is 'JSON' (JavaScript Object Notation)?",
    "Option1": "A programming language",
    "Option2": "A lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate, commonly used for transmitting data between a server and web application",
    "Option3": "A database system",
    "Option4": "A styling language for web pages",
    "Answer": "A lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate, commonly used for transmitting data between a server and web application"
  },
  {
    "question_no.": 122,
    "Question": "What is 'XML' (Extensible Markup Language)?",
    "Option1": "A programming language for algorithms",
    "Option2": "A markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable, often used for data storage and exchange",
    "Option3": "A database query language",
    "Option4": "A networking protocol",
    "Answer": "A markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable, often used for data storage and exchange"
  },
  {
    "question_no.": 123,
    "Question": "What is 'RESTful API'?",
    "Option1": "An API that only handles image data",
    "Option2": "An architectural style for an API that uses HTTP requests to access and use data, resembling the way web browsers work (e.g., GET, POST, PUT, DELETE methods)",
    "Option3": "An API that requires specific operating systems",
    "Option4": "An API for hardware interaction only",
    "Answer": "An architectural style for an API that uses HTTP requests to access and use data, resembling the way web browsers work (e.g., GET, POST, PUT, DELETE methods)"
  },
  {
    "question_no.": 124,
    "Question": "What is 'versioning' in API design?",
    "Option1": "Changing the API completely with every update",
    "Option2": "A strategy for managing changes to an API over time, allowing developers to introduce new features or make breaking changes while maintaining compatibility for existing consumers (e.g., /v1, /v2)",
    "Option3": "Only allowing one version of an API to exist",
    "Option4": "A method for encrypting API data",
    "Answer": "A strategy for managing changes to an API over time, allowing developers to introduce new features or make breaking changes while maintaining compatibility for existing consumers (e.g., /v1, /v2)"
  },
  {
    "question_no.": 125,
    "Question": "What is 'caching' in programming/web development?",
    "Option1": "Deleting temporary data regularly",
    "Option2": "Storing copies of frequently accessed data or computational results in a temporary storage area (cache) so that future requests for that data can be served faster",
    "Option3": "Encrypting all data transfers",
    "Option4": "Storing data only in a permanent database",
    "Answer": "Storing copies of frequently accessed data or computational results in a temporary storage area (cache) so that future requests for that data can be served faster"
  },
  {
    "question_no.": 126,
    "Question": "What is 'load balancing' in web applications?",
    "Option1": "Sending all traffic to a single server",
    "Option2": "Distributing network traffic across multiple servers in a server farm, ensuring no single server is overwhelmed, improving responsiveness and availability",
    "Option3": "Prioritizing certain types of network requests",
    "Option4": "Managing database connections only",
    "Answer": "Distributing network traffic across multiple servers in a server farm, ensuring no single server is overwhelmed, improving responsiveness and availability"
  },
  {
    "question_no.": 127,
    "Question": "What is 'scalability' in software design?",
    "Option1": "The ability of a system to decrease in performance under increased load",
    "Option2": "The ability of a system to handle a growing amount of work or its potential to be enlarged to accommodate that growth, typically by adding resources (e.g., more servers, CPU, memory)",
    "Option3": "The ability of a system to maintain a fixed size",
    "Option4": "The ability of a system to only run on specific hardware",
    "Answer": "The ability of a system to handle a growing amount of work or its potential to be enlarged to accommodate that growth, typically by adding resources (e.g., more servers, CPU, memory)"
  },
  {
    "question_no.": 128,
    "Question": "What is 'modularity' in programming?",
    "Option1": "Writing all code in a single, large file",
    "Option2": "The degree to which a system's components can be separated and recombined, allowing for independent development, testing, and maintenance of discrete modules",
    "Option3": "Making code highly dependent on other parts",
    "Option4": "Removing comments from code",
    "Answer": "The degree to which a system's components can be separated and recombined, allowing for independent development, testing, and maintenance of discrete modules"
  },
  {
    "question_no.": 129,
    "Question": "What is 'code reusability'?",
    "Option1": "Writing unique code for every feature",
    "Option2": "The practice of using existing code or software components for new applications or features, rather than writing new code from scratch, saving time and effort",
    "Option3": "Duplicating code multiple times within the same program",
    "Option4": "Deleting old code versions",
    "Answer": "The practice of using existing code or software components for new applications or features, rather than writing new code from scratch, saving time and effort"
  },
  {
    "question_no.": 130,
    "Question": "What is 'documentation' in programming?",
    "Option1": "Only comments within the code",
    "Option2": "Written text or illustrations that accompany computer software, explaining how it works or how to use it, for developers (technical documentation) and users (user manuals)",
    "Option3": "The process of compiling code",
    "Option4": "The source code itself",
    "Answer": "Written text or illustrations that accompany computer software, explaining how it works or how to use it, for developers (technical documentation) and users (user manuals)"
  },
  {
    "question_no.": 131,
    "Question": "What is 'clean code'?",
    "Option1": "Code that has no comments",
    "Option2": "Code that is easy to read, understand, modify, and maintain, characterized by clarity, simplicity, conciseness, and good organization",
    "Option3": "Code that is highly complex and obscure",
    "Option4": "Code that runs faster than other code",
    "Answer": "Code that is easy to read, understand, modify, and maintain, characterized by clarity, simplicity, conciseness, and good organization"
  },
  {
    "question_no.": 132,
    "Question": "What is 'refactoring'?",
    "Option1": "Adding new features to existing code",
    "Option2": "The process of restructuring existing computer code, altering its internal structure without changing its external behavior, in order to improve its readability, maintainability, or reduce complexity",
    "Option3": "Translating code to a different language",
    "Option4": "Deleting unused code segments",
    "Answer": "The process of restructuring existing computer code, altering its internal structure without changing its external behavior, in order to improve its readability, maintainability, or reduce complexity"
  },
  {
    "question_no.": 133,
    "Question": "What is 'code review'?",
    "Option1": "Automated testing of code",
    "Option2": "A systematic examination (or peer review) of computer source code by someone other than the author to find mistakes, improve overall software quality, and ensure adherence to coding standards",
    "Option3": "The final stage of software deployment",
    "Option4": "A process of writing documentation",
    "Answer": "A systematic examination (or peer review) of computer source code by someone other than the author to find mistakes, improve overall software quality, and ensure adherence to coding standards"
  },
  {
    "question_no.": 134,
    "Question": "What is 'pair programming'?",
    "Option1": "Two programmers working on separate tasks",
    "Option2": "An agile software development technique in which two programmers work together at one workstation, with one (the driver) writing code and the other (the observer/navigator) reviewing it and planning",
    "Option3": "Two programmers competing to write code faster",
    "Option4": "One programmer writing code and the other writing documentation",
    "Answer": "An agile software development technique in which two programmers work together at one workstation, with one (the driver) writing code and the other (the observer/navigator) reviewing it and planning"
  },
  {
    "question_no.": 135,
    "Question": "What is 'test-driven development (TDD)'?",
    "Option1": "Writing code first, then tests later",
    "Option2": "A software development process where tests are written before the code itself, then the code is written just enough to pass the tests, and finally refactored",
    "Option3": "A process without any testing",
    "Option4": "A method for designing user interfaces",
    "Answer": "A software development process where tests are written before the code itself, then the code is written just enough to pass the tests, and finally refactored"
  },
  {
    "question_no.": 136,
    "Question": "What is 'continuous integration (CI)'?",
    "Option1": "Integrating code changes only at the end of a project",
    "Option2": "A development practice where developers frequently merge their code changes into a central repository, after which automated builds and tests are run to detect integration errors early",
    "Option3": "A process that only involves manual testing",
    "Option4": "A method for code encryption",
    "Answer": "A development practice where developers frequently merge their code changes into a central repository, after which automated builds and tests are run to detect integration errors early"
  },
  {
    "question_no.": 137,
    "Question": "What is 'continuous delivery (CD)'?",
    "Option1": "Manually deploying software to production",
    "Option2": "An extension of CI where code changes are automatically built, tested, and prepared for a release to production, allowing for rapid and reliable deployments at any time",
    "Option3": "Delivering software only once a year",
    "Option4": "Delivering software without any testing",
    "Answer": "An extension of CI where code changes are automatically built, tested, and prepared for a release to production, allowing for rapid and reliable deployments at any time"
  },
  {
    "question_no.": 138,
    "Question": "What is 'DevOps'?",
    "Option1": "A strict separation between development and operations teams",
    "Option2": "A set of practices that combines software development (Dev) and IT operations (Ops) to shorten the systems development life cycle and provide continuous delivery with high software quality",
    "Option3": "A methodology for hardware development only",
    "Option4": "A specific programming language",
    "Answer": "A set of practices that combines software development (Dev) and IT operations (Ops) to shorten the systems development life cycle and provide continuous delivery with high software quality"
  },
  {
    "question_no.": 139,
    "Question": "What is 'containerization'?",
    "Option1": "Running applications directly on the host OS",
    "Option2": "Packaging software code along with all its dependencies (libraries, frameworks, configurations) into a single, isolated, portable unit called a container, ensuring consistent execution across environments (e.g., Docker)",
    "Option3": "A method for compressing files",
    "Option4": "A type of database management",
    "Answer": "Packaging software code along with all its dependencies (libraries, frameworks, configurations) into a single, isolated, portable unit called a container, ensuring consistent execution across environments (e.g., Docker)"
  },
  {
    "question_no.": 140,
    "Question": "What is 'Docker'?",
    "Option1": "A virtual machine software",
    "Option2": "A platform that uses OS-level virtualization to deliver software in packages called containers, providing lightweight and portable environments for applications",
    "Option3": "A cloud computing service",
    "Option4": "A type of programming language",
    "Answer": "A platform that uses OS-level virtualization to deliver software in packages called containers, providing lightweight and portable environments for applications"
  },
  {
    "question_no.": 141,
    "Question": "What is 'Kubernetes'?",
    "Option1": "A tool for individual container creation",
    "Option2": "An open-source container orchestration system for automating deployment, scaling, and management of containerized applications, often used with Docker containers",
    "Option3": "A programming language for machine learning",
    "Option4": "A database system for large data sets",
    "Answer": "An open-source container orchestration system for automating deployment, scaling, and management of containerized applications, often used with Docker containers"
  },
  {
    "question_no.": 142,
    "Question": "What is 'cloud computing'?",
    "Option1": "Storing data only on local hard drives",
    "Option2": "The delivery of on-demand computing services—from applications to storage and processing power—typically over the internet with pay-as-you-go pricing, rather than owning and maintaining physical computing infrastructure",
    "Option3": "A method for offline data processing",
    "Option4": "A type of networking hardware",
    "Answer": "The delivery of on-demand computing services—from applications to storage and processing power—typically over the internet with pay-as-you-go pricing, rather than owning and maintaining physical computing infrastructure"
  },
  {
    "question_no.": 143,
    "Question": "What is 'SaaS' (Software as a Service)?",
    "Option1": "Providing raw computing infrastructure",
    "Option2": "A cloud computing model where software applications are hosted by a third-party provider and made available to customers over the internet on a subscription basis (e.g., Gmail, Salesforce)",
    "Option3": "Providing a platform for application development",
    "Option4": "Managing physical servers for clients",
    "Answer": "A cloud computing model where software applications are hosted by a third-party provider and made available to customers over the internet on a subscription basis (e.g., Gmail, Salesforce)"
  },
  {
    "question_no.": 144,
    "Question": "What is 'PaaS' (Platform as a Service)?",
    "Option1": "Providing fully managed applications to end-users",
    "Option2": "A cloud computing model that provides a platform allowing customers to develop, run, and manage applications without the complexity of building and maintaining the infrastructure (e.g., Heroku, Google App Engine)",
    "Option3": "Providing virtualized hardware resources only",
    "Option4": "Managing network connections for users",
    "Answer": "A cloud computing model that provides a platform allowing customers to develop, run, and manage applications without the complexity of building and maintaining the infrastructure (e.g., Heroku, Google App Engine)"
  },
  {
    "question_no.": 145,
    "Question": "What is 'IaaS' (Infrastructure as a Service)?",
    "Option1": "Providing ready-to-use software applications",
    "Option2": "A cloud computing model that provides virtualized computing resources over the internet, including virtual machines, storage, networks, and operating systems (e.g., AWS EC2, Azure VMs)",
    "Option3": "Providing a platform for developing applications",
    "Option4": "Managing physical data centers for clients",
    "Answer": "A cloud computing model that provides virtualized computing resources over the internet, including virtual machines, storage, networks, and operating systems (e.g., AWS EC2, Azure VMs)"
  },
  {
    "question_no.": 146,
    "Question": "What is 'version control system (VCS)'?",
    "Option1": "A system for managing network traffic",
    "Option2": "A system that manages changes to a document, program, large website, or other collection of information, enabling tracking and reverting to previous versions",
    "Option3": "A system for tracking user activity",
    "Option4": "A system for compressing large files",
    "Answer": "A system that manages changes to a document, program, large website, or other collection of information, enabling tracking and reverting to previous versions"
  },
  {
    "question_no.": 147,
    "Question": "What is 'distributed VCS' (DVCS)?",
    "Option1": "A centralized server is required for all operations",
    "Option2": "A version control system where each developer's working copy of the code is also a full-fledged repository, allowing them to work offline and merge changes locally (e.g., Git)",
    "Option3": "Only one developer can work on the code at a time",
    "Option4": "Changes are not tracked locally",
    "Answer": "A version control system where each developer's working copy of the code is also a full-fledged repository, allowing them to work offline and merge changes locally (e.g., Git)"
  },
  {
    "question_no.": 148,
    "Question": "What is 'centralized VCS' (CVCS)?",
    "Option1": "Each developer has a full repository",
    "Option2": "A version control system that relies on a single central server to store all the versioned files, and clients check out files from that central place (e.g., SVN, CVS)",
    "Option3": "Allows offline work without issues",
    "Option4": "Changes are not tracked by a central authority",
    "Answer": "A version control system that relies on a single central server to store all the versioned files, and clients check out files from that central place (e.g., SVN, CVS)"
  },
  {
    "question_no.": 149,
    "Question": "What is 'software testing automation'?",
    "Option1": "Manually executing test cases",
    "Option2": "Using specialized software tools to control the execution of tests and compare actual outcomes with predicted outcomes, automating the testing process to improve efficiency and coverage",
    "Option3": "Writing test cases on paper",
    "Option4": "Ignoring testing entirely for speed",
    "Answer": "Using specialized software tools to control the execution of tests and compare actual outcomes with predicted outcomes, automating the testing process to improve efficiency and coverage"
  },
  {
    "question_no.": 150,
    "Question": "What is 'code coverage'?",
    "Option1": "The number of lines of code written",
    "Option2": "A measure used to describe the degree to which the source code of a program is executed when a particular test suite runs, indicating how much of the code has been tested",
    "Option3": "The amount of comments in the code",
    "Option4": "The number of bugs found in the code",
    "Answer": "A measure used to describe the degree to which the source code of a program is executed when a particular test suite runs, indicating how much of the code has been tested"
  },
  {
    "question_no.": 151,
    "Question": "What is 'refactoring debt' (or technical debt related to refactoring)?",
    "Option1": "The cost of adding new features",
    "Option2": "The cumulative cost of choosing an easier solution now instead of using a better approach that would take longer, leading to a codebase that is harder to maintain and extend in the future",
    "Option3": "The time spent debugging a program",
    "Option4": "The amount of money spent on software licenses",
    "Answer": "The cumulative cost of choosing an easier solution now instead of using a better approach that would take longer, leading to a codebase that is harder to maintain and extend in the future"
  },
  {
    "question_no.": 152,
    "Question": "What is 'runtime environment'?",
    "Option1": "The operating system kernel",
    "Option2": "The set of software and hardware resources that a program needs to execute, including libraries, interpreters, and hardware access mechanisms",
    "Option3": "The integrated development environment (IDE)",
    "Option4": "The compiler for a specific language",
    "Answer": "The set of software and hardware resources that a program needs to execute, including libraries, interpreters, and hardware access mechanisms"
  },
  {
    "question_no.": 153,
    "Question": "What is 'API endpoint'?",
    "Option1": "The beginning of an API call",
    "Option2": "A specific URL where an API can be accessed to retrieve or send data, representing a resource or a collection of resources",
    "Option3": "A type of database connection",
    "Option4": "A security measure for APIs",
    "Answer": "A specific URL where an API can be accessed to retrieve or send data, representing a resource or a collection of resources"
  },
  {
    "question_no.": 154,
    "Question": "What is 'client-server architecture'?",
    "Option1": "A system where all processing happens on a single machine",
    "Option2": "A distributed application architecture that partitions tasks or workloads between the providers of a resource or service (servers) and service requesters (clients)",
    "Option3": "An architecture where there are no distinct roles for machines",
    "Option4": "An architecture only used for embedded systems",
    "Answer": "A distributed application architecture that partitions tasks or workloads between the providers of a resource or service (servers) and service requesters (clients)"
  },
  {
    "question_no.": 155,
    "Question": "What is 'peer-to-peer (P2P) architecture'?",
    "Option1": "A centralized server handles all communication",
    "Option2": "A distributed application architecture where participants are equally privileged, equally capable participants (peers) in a distributed network, without centralized control",
    "Option3": "An architecture primarily used for large enterprise systems",
    "Option4": "An architecture where clients only request services",
    "Answer": "A distributed application architecture where participants are equally privileged, equally capable participants (peers) in a distributed network, without centralized control"
  },
  {
    "question_no.": 156,
    "Question": "What is 'loosely coupled' system design?",
    "Option1": "Components are highly dependent on each other",
    "Option2": "A design approach where components or modules have little or no knowledge of the internal workings of other components, interacting primarily through well-defined interfaces, making them easier to change and reuse",
    "Option3": "Changes in one component highly affect others",
    "Option4": "A design that is difficult to maintain",
    "Answer": "A design approach where components or modules have little or no knowledge of the internal workings of other components, interacting primarily through well-defined interfaces, making them easier to change and reuse"
  },
  {
    "question_no.": 157,
    "Question": "What is 'tightly coupled' system design?",
    "Option1": "Components interact through clear interfaces",
    "Option2": "A design approach where components or modules are highly dependent on each other, often having direct knowledge of each other's internal structure, making changes difficult and leading to complex dependencies",
    "Option3": "Components are easy to replace or reuse",
    "Option4": "A design that promotes modularity",
    "Answer": "A design approach where components or modules are highly dependent on each other, often having direct knowledge of each other's internal structure, making changes difficult and leading to complex dependencies"
  },
  {
    "question_no.": 158,
    "Question": "What is 'MVC' (Model-View-Controller) design pattern?",
    "Option1": "A pattern for database management",
    "Option2": "An architectural pattern that separates an application into three main logical components: Model (data logic), View (user interface), and Controller (input handling), promoting separation of concerns",
    "Option3": "A pattern for concurrent programming",
    "Option4": "A pattern for low-level hardware control",
    "Answer": "An architectural pattern that separates an application into three main logical components: Model (data logic), View (user interface), and Controller (input handling), promoting separation of concerns"
  },
  {
    "question_no.": 159,
    "Question": "What is 'event-driven programming'?",
    "Option1": "Programs execute in a strictly linear fashion",
    "Option2": "A programming paradigm in which the flow of the program is determined by events (e.g., user clicks, sensor outputs, messages from other programs), and functions are executed in response to these events",
    "Option3": "A paradigm that focuses on mathematical calculations",
    "Option4": "A method for direct hardware access",
    "Answer": "A programming paradigm in which the flow of the program is determined by events (e.g., user clicks, sensor outputs, messages from other programs), and functions are executed in response to these events"
  },
  {
    "question_no.": 160,
    "Question": "What is 'event listener' (or event handler)?",
    "Option1": "A component that generates events",
    "Option2": "A function or a piece of code that 'listens' for a specific event to occur (e.g., a button click) and then executes a predefined action in response to that event",
    "Option3": "A component that prevents events from happening",
    "Option4": "A variable that stores event data",
    "Answer": "A function or a piece of code that 'listens' for a specific event to occur (e.g., a button click) and then executes a predefined action in response to that event"
  },
  {
    "question_no.": 161,
    "Question": "What is 'recursion base case'?",
    "Option1": "The recursive step of a function",
    "Option2": "The condition within a recursive function that stops the recursion from continuing infinitely, providing a direct solution for the simplest instance of the problem",
    "Option3": "An error in recursive functions",
    "Option4": "A condition that causes a stack overflow",
    "Answer": "The condition within a recursive function that stops the recursion from continuing infinitely, providing a direct solution for the simplest instance of the problem"
  },
  {
    "question_no.": 162,
    "Question": "What is 'stack overflow' (in recursion)?",
    "Option1": "When a recursive function successfully completes",
    "Option2": "An error that occurs when a recursive function calls itself too many times without reaching a base case, leading to the call stack running out of memory",
    "Option3": "An error in memory allocation for arrays",
    "Option4": "A problem with network communication",
    "Answer": "An error that occurs when a recursive function calls itself too many times without reaching a base case, leading to the call stack running out of memory"
  },
  {
    "question_no.": 163,
    "Question": "What is 'dynamic typing'?",
    "Option1": "Data types are checked at compile time",
    "Option2": "A characteristic of some programming languages where variable types are determined at runtime rather than compile time, allowing a variable to hold values of different types over its lifetime",
    "Option3": "Strict type checking enforced by the compiler",
    "Option4": "A method for preventing type errors",
    "Answer": "A characteristic of some programming languages where variable types are determined at runtime rather than compile time, allowing a variable to hold values of different types over its lifetime"
  },
  {
    "question_no.": 164,
    "Question": "What is 'static typing'?",
    "Option1": "Variable types are determined at runtime",
    "Option2": "A characteristic of some programming languages where variable types are explicitly declared or inferred at compile time, and type checking is performed before program execution, generally leading to fewer runtime type errors",
    "Option3": "Types can change during program execution",
    "Option4": "No type checking is performed",
    "Answer": "A characteristic of some programming languages where variable types are explicitly declared or inferred at compile time, and type checking is performed before program execution, generally leading to fewer runtime type errors"
  },
  {
    "question_no.": 165,
    "Question": "What is 'type casting'?",
    "Option1": "Automatically converting data types",
    "Option2": "Explicitly converting a value from one data type to another (e.g., converting an integer to a float)",
    "Option3": "Defining a new data type",
    "Option4": "Detecting type errors automatically",
    "Answer": "Explicitly converting a value from one data type to another (e.g., converting an integer to a float)"
  },
  {
    "question_no.": 166,
    "Question": "What is 'type coercion'?",
    "Option1": "Explicitly converting data types",
    "Option2": "The automatic or implicit conversion of values from one data type to another by the programming language or runtime environment (e.g., JavaScript converting '5' + 2 to '52')",
    "Option3": "Defining strict type rules",
    "Option4": "Preventing any type conversion",
    "Answer": "The automatic or implicit conversion of values from one data type to another by the programming language or runtime environment (e.g., JavaScript converting '5' + 2 to '52')"
  },
  {
    "question_no.": 167,
    "Question": "What is 'DRY principle' (Don't Repeat Yourself)?",
    "Option1": "Encouraging code duplication",
    "Option2": "A software development principle aimed at reducing repetition of software patterns, replacing duplicated code with abstractions or data normalization to avoid potential inconsistencies and improve maintainability",
    "Option3": "Focusing on writing long and complex code",
    "Option4": "A principle for fast debugging",
    "Answer": "A software development principle aimed at reducing repetition of software patterns, replacing duplicated code with abstractions or data normalization to avoid potential inconsistencies and improve maintainability"
  },
  {
    "question_no.": 168,
    "Question": "What is 'KISS principle' (Keep It Simple, Stupid)?",
    "Option1": "Designing complex and intricate solutions",
    "Option2": "A design principle that states most systems work best if they are kept simple rather than made complicated, advocating for simplicity in design and avoiding unnecessary complexity",
    "Option3": "A principle for maximizing code lines",
    "Option4": "A principle for extensive documentation",
    "Answer": "A design principle that states most systems work best if they are kept simple rather than made complicated, advocating for simplicity in design and avoiding unnecessary complexity"
  },
  {
    "question_no.": 169,
    "Question": "What is 'YAGNI principle' (You Aren't Gonna Need It)?",
    "Option1": "Adding features that might be useful in the future",
    "Option2": "An agile principle that states one should not add functionality until it's actually needed, avoiding speculative future development to reduce complexity and wasted effort",
    "Option3": "Focusing on long-term planning without immediate need",
    "Option4": "A principle for over-engineering solutions",
    "Answer": "An agile principle that states one should not add functionality until it's actually needed, avoiding speculative future development to reduce complexity and wasted effort"
  },
  {
    "question_no.": 170,
    "Question": "What is 'dependency injection'?",
    "Option1": "Hardcoding dependencies within a class",
    "Option2": "A design pattern where a class receives its dependencies from an external source rather than creating them itself, promoting loose coupling and testability",
    "Option3": "A method for breaking circular dependencies",
    "Option4": "A technique for encrypting data dependencies",
    "Answer": "A design pattern where a class receives its dependencies from an external source rather than creating them itself, promoting loose coupling and testability"
  },
  {
    "question_no.": 171,
    "Question": "What is 'inversion of control (IoC)'?",
    "Option1": "The main program flow controls all operations",
    "Option2": "A design principle where the control of object creation, lifecycle, and dependencies is transferred from the application code to a framework or container, making the application more flexible and modular",
    "Option3": "A principle for tight coupling",
    "Option4": "A method for direct hardware control",
    "Answer": "A design principle where the control of object creation, lifecycle, and dependencies is transferred from the application code to a framework or container, making the application more flexible and modular"
  },
  {
    "question_no.": 172,
    "Question": "What is 'SOLID principles'?",
    "Option1": "A set of principles for hardware design",
    "Option2": "A set of five design principles in object-oriented programming intended to make software designs more understandable, flexible, and maintainable (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)",
    "Option3": "Principles for database normalization",
    "Option4": "Principles for network security",
    "Answer": "A set of five design principles in object-oriented programming intended to make software designs more understandable, flexible, and maintainable (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)"
  },
  {
    "question_no.": 173,
    "Question": "What is the 'Single Responsibility Principle (SRP)'?",
    "Option1": "A class should have multiple responsibilities",
    "Option2": "A class should have only one reason to change, meaning it should have only one responsibility or one specific job to do",
    "Option3": "A class should depend on other classes",
    "Option4": "A class should be open for modification",
    "Answer": "A class should have only one reason to change, meaning it should have only one responsibility or one specific job to do"
  },
  {
    "question_no.": 174,
    "Question": "What is the 'Open/Closed Principle (OCP)'?",
    "Option1": "Software entities should be closed for extension but open for modification",
    "Option2": "Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification, meaning you can add new functionality without changing existing, working code",
    "Option3": "Classes should not be inheritable",
    "Option4": "Interfaces should be complex and detailed",
    "Answer": "Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification, meaning you can add new functionality without changing existing, working code"
  },
  {
    "question_no.": 175,
    "Question": "What is the 'Liskov Substitution Principle (LSP)'?",
    "Option1": "Subtypes should not be substitutable for their base types",
    "Option2": "Objects of a superclass should be replaceable with objects of its subclasses without affecting the correctness of the program, ensuring proper inheritance hierarchies",
    "Option3": "Classes should be tightly coupled",
    "Option4": "Functions should have many side effects",
    "Answer": "Objects of a superclass should be replaceable with objects of its subclasses without affecting the correctness of the program, ensuring proper inheritance hierarchies"
  },
  {
    "question_no.": 176,
    "Question": "What is the 'Interface Segregation Principle (ISP)'?",
    "Option1": "Clients should be forced to implement interfaces they don't use",
    "Option2": "Clients should not be forced to depend on interfaces they do not use; rather than one large interface, many smaller, specific interfaces are preferred",
    "Option3": "Interfaces should have maximum number of methods",
    "Option4": "Classes should implement all available interfaces",
    "Answer": "Clients should not be forced to depend on interfaces they do not use; rather than one large interface, many smaller, specific interfaces are preferred"
  },
  {
    "question_no.": 177,
    "Question": "What is the 'Dependency Inversion Principle (DIP)'?",
    "Option1": "High-level modules should depend on low-level modules directly",
    "Option2": "High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.",
    "Option3": "Dependencies should always be hardcoded",
    "Option4": "Classes should be responsible for creating their own dependencies",
    "Answer": "High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions."
  },
  {
    "question_no.": 178,
    "Question": "What is 'unit testing framework'?",
    "Option1": "A tool for creating user interfaces",
    "Option2": "A software framework that provides a common structure and tools for writing and running unit tests to ensure the correct functionality of individual code units (e.g., JUnit, NUnit, Pytest)",
    "Option3": "A framework for web application development",
    "Option4": "A framework for database interaction",
    "Answer": "A software framework that provides a common structure and tools for writing and running unit tests to ensure the correct functionality of individual code units (e.g., JUnit, NUnit, Pytest)"
  },
  {
    "question_no.": 179,
    "Question": "What is 'mocking' in testing?",
    "Option1": "Testing with real, external dependencies",
    "Option2": "Creating simulated objects that mimic the behavior of real objects in a controlled way, used during testing to isolate the code being tested from its dependencies",
    "Option3": "Writing tests after the code is complete",
    "Option4": "Testing only the user interface components",
    "Answer": "Creating simulated objects that mimic the behavior of real objects in a controlled way, used during testing to isolate the code being tested from its dependencies"
  },
  {
    "question_no.": 180,
    "Question": "What is 'test suite'?",
    "Option1": "A single test case",
    "Option2": "A collection of test cases that are executed together to determine if a software program or a component is working as expected",
    "Option3": "A report of test results",
    "Option4": "A tool for code refactoring",
    "Answer": "A collection of test cases that are executed together to determine if a software program or a component is working as expected"
  },
  {
    "question_no.": 181,
    "Question": "What is 'assertion' in testing?",
    "Option1": "A comment in the test code",
    "Option2": "A statement in a test case that checks if a condition is true, and if it's false, the test fails, indicating a bug in the code under test",
    "Option3": "A type of loop in test code",
    "Option4": "A variable declaration in a test",
    "Answer": "A statement in a test case that checks if a condition is true, and if it's false, the test fails, indicating a bug in the code under test"
  },
  {
    "question_no.": 182,
    "Question": "What is 'test fixture'?",
    "Option1": "The actual test logic",
    "Option2": "The setup or preconditions required for a test to run, providing a known and consistent environment for test execution, and often followed by a teardown phase",
    "Option3": "A tool for generating test reports",
    "Option4": "The result of a test run",
    "Answer": "The setup or preconditions required for a test to run, providing a known and consistent environment for test execution, and often followed by a teardown phase"
  },
  {
    "question_no.": 183,
    "Question": "What is 'integration development environment (IDE) plugin'?",
    "Option1": "A standalone software application",
    "Option2": "An add-on software component that extends the functionality of an IDE, providing new features or integrations with other tools (e.g., version control integration, code analysis tools)",
    "Option3": "A hardware component for an IDE",
    "Option4": "A type of programming language",
    "Answer": "An add-on software component that extends the functionality of an IDE, providing new features or integrations with other tools (e.g., version control integration, code analysis tools)"
  },
  {
    "question_no.": 184,
    "Question": "What is 'refactoring tools'?",
    "Option1": "Tools for adding new code to programs",
    "Option2": "Automated tools within IDEs that assist programmers in restructuring existing code without changing its external behavior, making refactoring easier and less error-prone",
    "Option3": "Tools for debugging runtime errors",
    "Option4": "Tools for generating user documentation",
    "Answer": "Automated tools within IDEs that assist programmers in restructuring existing code without changing its external behavior, making refactoring easier and less error-prone"
  },
  {
    "question_no.": 185,
    "Question": "What is 'cross-platform development'?",
    "Option1": "Developing software for a single operating system",
    "Option2": "Developing software applications that can run on multiple operating systems or platforms (e.g., Windows, macOS, Linux, iOS, Android) from a single codebase or with minimal modifications",
    "Option3": "Developing hardware components for different platforms",
    "Option4": "Developing software that only runs offline",
    "Answer": "Developing software applications that can run on multiple operating systems or platforms (e.g., Windows, macOS, Linux, iOS, Android) from a single codebase or with minimal modifications"
  },
  {
    "question_no.": 186,
    "Question": "What is 'software architecture'?",
    "Option1": "The specific programming language used for a project",
    "Option2": "The fundamental structures of a software system, the creation of such structures, and the disciplines for creating and managing these structures, defining how the system's components interact",
    "Option3": "The process of writing individual lines of code",
    "Option4": "The visual design of a user interface",
    "Answer": "The fundamental structures of a software system, the creation of such structures, and the disciplines for creating and managing these structures, defining how the system's components interact"
  },
  {
    "question_no.": 187,
    "Question": "What is 'microservices architecture'?",
    "Option1": "A monolithic application design",
    "Option2": "An architectural style where a single application is composed of a collection of small, independent services, each running in its own process and communicating with lightweight mechanisms, making them independently deployable",
    "Option3": "An architecture where all components are tightly coupled",
    "Option4": "An architecture suitable only for small, simple applications",
    "Answer": "An architectural style where a single application is composed of a collection of small, independent services, each running in its own process and communicating with lightweight mechanisms, making them independently deployable"
  },
  {
    "question_no.": 188,
    "Question": "What is 'monolithic architecture'?",
    "Option1": "An architecture where services are independent and loosely coupled",
    "Option2": "A traditional architectural style where the entire application is built as a single, indivisible unit, with all components tightly coupled and running within the same process",
    "Option3": "An architecture designed for distributed systems",
    "Option4": "An architecture that promotes rapid, independent deployment of components",
    "Answer": "A traditional architectural style where the entire application is built as a single, indivisible unit, with all components tightly coupled and running within the same process"
  },
  {
    "question_no.": 189,
    "Question": "What is 'loosely typed language'?",
    "Option1": "A language where types are explicitly declared",
    "Option2": "A language where variables are not bound to specific data types and can hold values of different types during execution (often refers to dynamically typed languages like JavaScript, Python)",
    "Option3": "A language with strict compile-time type checking",
    "Option4": "A language that requires explicit type conversions always",
    "Answer": "A language where variables are not bound to specific data types and can hold values of different types during execution (often refers to dynamically typed languages like JavaScript, Python)"
  },
  {
    "question_no.": 190,
    "Question": "What is 'strongly typed language'?",
    "Option1": "A language that allows implicit type conversions frequently",
    "Option2": "A language that enforces strict type checking, often at compile time, and does not allow operations between incompatible types without explicit casting, leading to fewer runtime type errors (e.g., Java, C#)",
    "Option3": "A language where type errors are ignored",
    "Option4": "A language that has no concept of data types",
    "Answer": "A language that enforces strict type checking, often at compile time, and does not allow operations between incompatible types without explicit casting, leading to fewer runtime type errors (e.g., Java, C#)"
  },
  {
    "question_no.": 191,
    "Question": "What is 'package manager'?",
    "Option1": "A tool for creating new programming languages",
    "Option2": "A collection of software tools that automate the process of installing, upgrading, configuring, and removing computer programs for a computer's operating system, typically with a shared repository",
    "Option3": "A tool for compiling code into executables",
    "Option4": "A tool for designing user interfaces",
    "Answer": "A collection of software tools that automate the process of installing, upgrading, configuring, and removing computer programs for a computer's operating system, typically with a shared repository"
  },
  {
    "question_no.": 192,
    "Question": "What is 'dependency hell'?",
    "Option1": "A state where all dependencies are perfectly managed",
    "Option2": "A colloquial term for the difficulties that arise when managing dependencies for software packages, particularly when different packages require conflicting versions of the same dependency",
    "Option3": "A term for fast software deployment",
    "Option4": "A situation where no external libraries are used",
    "Answer": "A colloquial term for the difficulties that arise when managing dependencies for software packages, particularly when different packages require conflicting versions of the same dependency"
  },
  {
    "question_no.": 193,
    "Question": "What is 'boilerplate code'?",
    "Option1": "Highly optimized and unique code",
    "Option2": "Sections of code that are repeated in multiple places with little or no modification, adding verbosity without much functional benefit, often found in setup or standard patterns",
    "Option3": "Code that is rarely used",
    "Option4": "Code that is automatically generated by the compiler",
    "Answer": "Sections of code that are repeated in multiple places with little or no modification, adding verbosity without much functional benefit, often found in setup or standard patterns"
  },
  {
    "question_no.": 194,
    "Question": "What is 'convention over configuration'?",
    "Option1": "Requiring extensive configuration for every aspect",
    "Option2": "A software design paradigm that seeks to decrease the number of decisions developers need to make, by providing sensible defaults and conventions, reducing complexity (e.g., in frameworks like Ruby on Rails)",
    "Option3": "Ignoring best practices and conventions",
    "Option4": "Prioritizing customization over ease of use",
    "Answer": "A software design paradigm that seeks to decrease the number of decisions developers need to make, by providing sensible defaults and conventions, reducing complexity (e.g., in frameworks like Ruby on Rails)"
  },
  {
    "question_no.": 195,
    "Question": "What is 'object pooling'?",
    "Option1": "Creating new objects whenever needed",
    "Option2": "A design pattern that creates a set of initialized objects that are kept ready to use rather than creating and destroying them on demand, improving performance for frequently instantiated objects",
    "Option3": "Storing objects permanently in a database",
    "Option4": "A method for encrypting objects",
    "Answer": "A design pattern that creates a set of initialized objects that are kept ready to use rather than creating and destroying them on demand, improving performance for frequently instantiated objects"
  },
  {
    "question_no.": 196,
    "Question": "What is 'design patterns'?",
    "Option1": "Specific coding languages",
    "Option2": "General, reusable solutions to common problems that occur during software design, providing a template for how to solve a problem that can be used in many different situations",
    "Option3": "Random sets of code",
    "Option4": "A tool for debugging only",
    "Answer": "General, reusable solutions to common problems that occur during software design, providing a template for how to solve a problem that can be used in many different situations"
  },
  {
    "question_no.": 197,
    "Question": "What is the 'Singleton pattern'?",
    "Option1": "Allows multiple instances of a class",
    "Option2": "A design pattern that restricts the instantiation of a class to a single object, ensuring that there is only one instance of that class throughout the application, and providing a global point of access to it",
    "Option3": "A pattern for creating independent objects",
    "Option4": "A pattern for highly distributed systems",
    "Answer": "A design pattern that restricts the instantiation of a class to a single object, ensuring that there is only one instance of that class throughout the application, and providing a global point of access to it"
  },
  {
    "question_no.": 198,
    "Question": "What is the 'Factory Method pattern'?",
    "Option1": "A pattern for creating objects directly using 'new'",
    "Option2": "A creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created, decoupling object creation from the client code",
    "Option3": "A pattern for handling errors",
    "Option4": "A pattern for defining class relationships",
    "Answer": "A creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created, decoupling object creation from the client code"
  },
  {
    "question_no.": 199,
    "Question": "What is the 'Observer pattern'?",
    "Option1": "A pattern where components are tightly coupled",
    "Option2": "A behavioral design pattern where an object (the subject) maintains a list of its dependents (observers) and notifies them automatically of any state changes, usually by calling one of their methods, promoting loose coupling",
    "Option3": "A pattern for sequential execution of tasks",
    "Option4": "A pattern for direct database access",
    "Answer": "A behavioral design pattern where an object (the subject) maintains a list of its dependents (observers) and notifies them automatically of any state changes, usually by calling one of their methods, promoting loose coupling"
  },
  {
    "question_no.": 200,
    "Question": "What is 'Big O notation'?",
    "Option1": "A way to measure program execution time exactly",
    "Option2": "A mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity, commonly used in computer science to classify algorithms by their performance characteristics (time and space complexity) as input size grows",
    "Option3": "A notation for describing program syntax",
    "Option4": "A notation for defining data types",
    "Answer": "A mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity, commonly used in computer science to classify algorithms by their performance characteristics (time and space complexity) as input size grows"
  },
  {
    "question_no.": 201,
    "Question": "What does O(1) complexity mean?",
    "Option1": "Linear time complexity",
    "Option2": "Constant time complexity, meaning the execution time or space requirement remains the same regardless of the input size",
    "Option3": "Logarithmic time complexity",
    "Option4": "Quadratic time complexity",
    "Answer": "Constant time complexity, meaning the execution time or space requirement remains the same regardless of the input size"
  },
  {
    "question_no.": 202,
    "Question": "What does O(n) complexity mean?",
    "Option1": "Constant time complexity",
    "Option2": "Linear time complexity, meaning the execution time or space requirement grows linearly with the input size (n)",
    "Option3": "Quadratic time complexity",
    "Option4": "Logarithmic time complexity",
    "Answer": "Linear time complexity, meaning the execution time or space requirement grows linearly with the input size (n)"
  },
  {
    "question_no.": 203,
    "Question": "What does O(n^2) complexity mean?",
    "Option1": "Linear time complexity",
    "Option2": "Quadratic time complexity, meaning the execution time or space requirement grows proportionally to the square of the input size (n)",
    "Option3": "Logarithmic time complexity",
    "Option4": "Exponential time complexity",
    "Answer": "Quadratic time complexity, meaning the execution time or space requirement grows proportionally to the square of the input size (n)"
  }
]