[
  {
    "question_no.": 1,
    "Question": "What is Java primarily known for?",
    "Option1": "Its ease of use for beginners",
    "Option2": "Platform independence and 'Write Once, Run Anywhere'",
    "Option3": "Being a scripting language for web browsers",
    "Option4": "High-performance graphics rendering",
    "Answer": "Platform independence and 'Write Once, Run Anywhere'"
  },
  {
    "question_no.": 2,
    "Question": "Which company originally developed Java?",
    "Option1": "Microsoft",
    "Option2": "IBM",
    "Option3": "Sun Microsystems",
    "Option4": "Oracle",
    "Answer": "Sun Microsystems"
  },
  {
    "question_no.": 3,
    "Question": "What does JVM stand for?",
    "Option1": "Java Virtual Machine",
    "Option2": "Java Verified Module",
    "Option3": "Java Visual Method",
    "Option4": "Java Virtual Memory",
    "Answer": "Java Virtual Machine"
  },
  {
    "question_no.": 4,
    "Question": "What is the purpose of the JVM?",
    "Option1": "To compile Java source code into bytecode",
    "Option2": "To execute Java bytecode on various platforms",
    "Option3": "To manage Java project dependencies",
    "Option4": "To create graphical user interfaces in Java",
    "Answer": "To execute Java bytecode on various platforms"
  },
  {
    "question_no.": 5,
    "Question": "What is bytecode in Java?",
    "Option1": "Machine code specific to a particular CPU",
    "Option2": "Source code written in assembly language",
    "Option3": "An intermediate, platform-independent code generated by the Java compiler",
    "Option4": "Encrypted Java source code",
    "Answer": "An intermediate, platform-independent code generated by the Java compiler"
  },
  {
    "question_no.": 6,
    "Question": "Which command is used to compile a Java source file?",
    "Option1": "java",
    "Option2": "javac",
    "Option3": "javadoc",
    "Option4": "javarun",
    "Answer": "javac"
  },
  {
    "question_no.": 7,
    "Question": "Which command is used to run a compiled Java class file?",
    "Option1": "javac",
    "Option2": "java",
    "Option3": "javarun",
    "Option4": "jvm",
    "Answer": "java"
  },
  {
    "question_no.": 8,
    "Question": "What is the entry point for every Java application?",
    "Option1": "The `start()` method",
    "Option2": "The `run()` method",
    "Option3": "The `main()` method",
    "Option4": "The `execute()` method",
    "Answer": "The `main()` method"
  },
  {
    "question_no.": 9,
    "Question": "Which keyword is used to declare a class in Java?",
    "Option1": "object",
    "Option2": "class",
    "Option3": "type",
    "Option4": "def",
    "Answer": "class"
  },
  {
    "question_no.": 10,
    "Question": "What is a constructor in Java?",
    "Option1": "A method that destroys an object",
    "Option2": "A special method used to initialize objects",
    "Option3": "A method that returns a value",
    "Option4": "A method that calculates a constructor's value",
    "Answer": "A special method used to initialize objects"
  },
  {
    "question_no.": 11,
    "Question": "Which of the following is NOT a Java access modifier?",
    "Option1": "public",
    "Option2": "private",
    "Option3": "protected",
    "Option4": "global",
    "Answer": "global"
  },
  {
    "question_no.": 12,
    "Question": "What is inheritance in Java?",
    "Option1": "A mechanism for creating new objects from existing ones",
    "Option2": "A mechanism where one class acquires the properties and behaviors of another class",
    "Option3": "A technique for hiding data within a class",
    "Option4": "A way to combine multiple classes into one",
    "Answer": "A mechanism where one class acquires the properties and behaviors of another class"
  },
  {
    "question_no.": 13,
    "Question": "Which keyword is used to implement inheritance in Java?",
    "Option1": "implements",
    "Option2": "extends",
    "Option3": "inherits",
    "Option4": "uses",
    "Answer": "extends"
  },
  {
    "question_no.": 14,
    "Question": "What is polymorphism in Java?",
    "Option1": "The ability of an object to take on many forms",
    "Option2": "The process of hiding the implementation details and showing only functionality",
    "Option3": "The bundling of data and methods that operate on the data within a single unit",
    "Option4": "The ability to run the same code on different platforms",
    "Answer": "The ability of an object to take on many forms"
  },
  {
    "question_no.": 15,
    "Question": "What is encapsulation in Java?",
    "Option1": "The ability of an object to take on many forms",
    "Option2": "The process of hiding the implementation details and showing only functionality",
    "Option3": "The bundling of data and methods that operate on the data within a single unit",
    "Option4": "The ability to run the same code on different platforms",
    "Answer": "The bundling of data and methods that operate on the data within a single unit"
  },
  {
    "question_no.": 16,
    "Question": "What is abstraction in Java?",
    "Option1": "The ability of an object to take on many forms",
    "Option2": "The process of hiding the implementation details and showing only functionality",
    "Option3": "The bundling of data and methods that operate on the data within a single unit",
    "Option4": "The ability to run the same code on different platforms",
    "Answer": "The process of hiding the implementation details and showing only functionality"
  },
  {
    "question_no.": 17,
    "Question": "Which keyword is used to define an interface in Java?",
    "Option1": "class",
    "Option2": "abstract",
    "Option3": "interface",
    "Option4": "implements",
    "Answer": "interface"
  },
  {
    "question_no.": 18,
    "Question": "Can a class implement multiple interfaces in Java?",
    "Option1": "No",
    "Option2": "Yes",
    "Option3": "Only if they have no common methods",
    "Option4": "Only if they are in the same package",
    "Answer": "Yes"
  },
  {
    "question_no.": 19,
    "Question": "Can a class extend multiple classes in Java?",
    "Option1": "No",
    "Option2": "Yes",
    "Option3": "Only if they are abstract",
    "Option4": "Only if they are final",
    "Answer": "No"
  },
  {
    "question_no.": 20,
    "Question": "What is the default value of a boolean variable in Java?",
    "Option1": "true",
    "Option2": "false",
    "Option3": "null",
    "Option4": "0",
    "Answer": "false"
  },
  {
    "question_no.": 21,
    "Question": "What is the default value of an integer variable in Java?",
    "Option1": "0",
    "Option2": "1",
    "Option3": "null",
    "Option4": "undefined",
    "Answer": "0"
  },
  {
    "question_no.": 22,
    "Question": "What is the default value of an object reference in Java?",
    "Option1": "0",
    "Option2": "null",
    "Option3": "undefined",
    "Option4": "empty string",
    "Answer": "null"
  },
  {
    "question_no.": 23,
    "Question": "Which data type is used to store a single character in Java?",
    "Option1": "String",
    "Option2": "char",
    "Option3": "byte",
    "Option4": "int",
    "Answer": "char"
  },
  {
    "question_no.": 24,
    "Question": "Which data type is used to store whole numbers in Java?",
    "Option1": "float",
    "Option2": "double",
    "Option3": "int",
    "Option4": "boolean",
    "Answer": "int"
  },
  {
    "question_no.": 25,
    "Question": "Which data type is used to store floating-point numbers with single precision in Java?",
    "Option1": "double",
    "Option2": "long",
    "Option3": "float",
    "Option4": "int",
    "Answer": "float"
  },
  {
    "question_no.": 26,
    "Question": "Which data type is used to store floating-point numbers with double precision in Java?",
    "Option1": "float",
    "Option2": "long",
    "Option3": "double",
    "Option4": "short",
    "Answer": "double"
  },
  {
    "question_no.": 27,
    "Question": "What is the purpose of the `static` keyword in Java?",
    "Option1": "To create an instance of a class",
    "Option2": "To indicate that a member belongs to the class itself, rather than to any specific object",
    "Option3": "To prevent a method from being overridden",
    "Option4": "To make a variable constant",
    "Answer": "To indicate that a member belongs to the class itself, rather than to any specific object"
  },
  {
    "question_no.": 28,
    "Question": "What is the purpose of the `final` keyword in Java?",
    "Option1": "To make a variable mutable",
    "Option2": "To prevent a class from being inherited, a method from being overridden, or a variable from being reassigned",
    "Option3": "To indicate the end of a program",
    "Option4": "To define a static method",
    "Answer": "To prevent a class from being inherited, a method from being overridden, or a variable from being reassigned"
  },
  {
    "question_no.": 29,
    "Question": "What is method overloading in Java?",
    "Option1": "Defining multiple methods with the same name but different return types",
    "Option2": "Defining multiple methods with the same name and same parameters in a subclass",
    "Option3": "Defining multiple methods with the same name but different parameters (number or type)",
    "Option4": "Calling a method from another method",
    "Answer": "Defining multiple methods with the same name but different parameters (number or type)"
  },
  {
    "question_no.": 30,
    "Question": "What is method overriding in Java?",
    "Option1": "Defining multiple methods with the same name but different parameters",
    "Option2": "Defining a method in a subclass that has the same name, parameters, and return type as a method in its superclass",
    "Option3": "Calling a method from a static context",
    "Option4": "Making a method private",
    "Answer": "Defining a method in a subclass that has the same name, parameters, and return type as a method in its superclass"
  },
  {
    "question_no.": 31,
    "Question": "Which keyword is used to call the constructor of the superclass in Java?",
    "Option1": "this",
    "Option2": "super",
    "Option3": "parent",
    "Option4": "base",
    "Answer": "super"
  },
  {
    "question_no.": 32,
    "Question": "Which keyword is used to refer to the current object in Java?",
    "Option1": "super",
    "Option2": "self",
    "Option3": "this",
    "Option4": "current",
    "Answer": "this"
  },
  {
    "question_no.": 33,
    "Question": "What is an abstract class in Java?",
    "Option1": "A class that cannot have any methods",
    "Option2": "A class that can only be inherited",
    "Option3": "A class that cannot be instantiated and may contain abstract methods",
    "Option4": "A class that only contains static methods",
    "Answer": "A class that cannot be instantiated and may contain abstract methods"
  },
  {
    "question_no.": 34,
    "Question": "Can an abstract class have a constructor?",
    "Option1": "No",
    "Option2": "Yes, but it cannot be directly invoked",
    "Option3": "Yes, and it must be public",
    "Option4": "Only if it has no abstract methods",
    "Answer": "Yes, but it cannot be directly invoked"
  },
  {
    "question_no.": 35,
    "Question": "What is an interface in Java?",
    "Option1": "A class that defines abstract methods and constants, providing a contract for classes to implement",
    "Option2": "A concrete class that cannot be instantiated",
    "Option3": "A class that only contains static variables",
    "Option4": "A mechanism for multiple inheritance",
    "Answer": "A class that defines abstract methods and constants, providing a contract for classes to implement"
  },
  {
    "question_no.": 36,
    "Question": "Can an interface have concrete methods before Java 8?",
    "Option1": "Yes",
    "Option2": "No",
    "Option3": "Only if they are private",
    "Option4": "Only if they are static",
    "Answer": "No"
  },
  {
    "question_no.": 37,
    "Question": "How are concrete methods allowed in interfaces in Java 8 and later?",
    "Option1": "Using the `final` keyword",
    "Option2": "Using the `default` or `static` keywords",
    "Option3": "By making the interface abstract",
    "Option4": "They are still not allowed",
    "Answer": "Using the `default` or `static` keywords"
  },
  {
    "question_no.": 38,
    "Question": "What is an exception in Java?",
    "Option1": "A syntax error in the code",
    "Option2": "An event that disrupts the normal flow of a program's instructions",
    "Option3": "A type of variable",
    "Option4": "A design pattern",
    "Answer": "An event that disrupts the normal flow of a program's instructions"
  },
  {
    "question_no.": 39,
    "Question": "Which block is used to handle exceptions in Java?",
    "Option1": "try-catch",
    "Option2": "if-else",
    "Option3": "for-loop",
    "Option4": "switch-case",
    "Answer": "try-catch"
  },
  {
    "question_no.": 40,
    "Question": "Which keyword is used to explicitly throw an exception in Java?",
    "Option1": "catch",
    "Option2": "throws",
    "Option3": "throw",
    "Option4": "handle",
    "Answer": "throw"
  },
  {
    "question_no.": 41,
    "Question": "Which keyword is used to declare that a method might throw an exception?",
    "Option1": "throw",
    "Option2": "try",
    "Option3": "throws",
    "Option4": "catch",
    "Answer": "throws"
  },
  {
    "question_no.": 42,
    "Question": "What is the purpose of the `finally` block in Java exception handling?",
    "Option1": "It always executes, whether an exception occurred or not",
    "Option2": "It only executes if an exception occurs",
    "Option3": "It only executes if no exception occurs",
    "Option4": "It is used to define a new exception",
    "Answer": "It always executes, whether an exception occurred or not"
  },
  {
    "question_no.": 43,
    "Question": "What is a checked exception in Java?",
    "Option1": "An exception that must be handled by the programmer at compile time",
    "Option2": "An exception that occurs only at runtime",
    "Option3": "An exception that is ignored by the compiler",
    "Option4": "An exception that indicates a serious system error",
    "Answer": "An exception that must be handled by the programmer at compile time"
  },
  {
    "question_no.": 44,
    "Question": "What is an unchecked exception (runtime exception) in Java?",
    "Option1": "An exception that must be handled by the programmer at compile time",
    "Option2": "An exception that occurs at runtime and typically indicates a programming error",
    "Option3": "An exception that is ignored by the compiler",
    "Option4": "An exception that indicates a serious system error",
    "Answer": "An exception that occurs at runtime and typically indicates a programming error"
  },
  {
    "question_no.": 45,
    "Question": "Which of these is a checked exception?",
    "Option1": "NullPointerException",
    "Option2": "ArrayIndexOutOfBoundsException",
    "Option3": "IOException",
    "Option4": "ArithmeticException",
    "Answer": "IOException"
  },
  {
    "question_no.": 46,
    "Question": "Which of these is an unchecked exception?",
    "Option1": "SQLException",
    "Option2": "FileNotFoundException",
    "Option3": "ClassNotFoundException",
    "Option4": "NullPointerException",
    "Answer": "NullPointerException"
  },
  {
    "question_no.": 47,
    "Question": "What is a package in Java?",
    "Option1": "A collection of classes that are compiled together",
    "Option2": "A way to organize related classes and interfaces into a single unit",
    "Option3": "A type of variable",
    "Option4": "A method to compress Java files",
    "Answer": "A way to organize related classes and interfaces into a single unit"
  },
  {
    "question_no.": 48,
    "Question": "Which keyword is used to import a package in Java?",
    "Option1": "include",
    "Option2": "import",
    "Option3": "use",
    "Option4": "package",
    "Answer": "import"
  },
  {
    "question_no.": 49,
    "Question": "What is the purpose of the `System.out.println()` method?",
    "Option1": "To read input from the console",
    "Option2": "To print output to the console",
    "Option3": "To create a new system object",
    "Option4": "To clear the console",
    "Answer": "To print output to the console"
  },
  {
    "question_no.": 50,
    "Question": "Which operator is used for concatenation of strings in Java?",
    "Option1": "-",
    "Option2": "*",
    "Option3": "+",
    "Option4": "/",
    "Answer": "+"
  },
  {
    "question_no.": 51,
    "Question": "What is the result of `10 / 3` in integer division in Java?",
    "Option1": "3.33",
    "Option2": "3",
    "Option3": "4",
    "Option4": "0",
    "Answer": "3"
  },
  {
    "question_no.": 52,
    "Question": "What is the result of `10 % 3` in Java?",
    "Option1": "3",
    "Option2": "1",
    "Option3": "0",
    "Option4": "3.33",
    "Answer": "1"
  },
  {
    "question_no.": 53,
    "Question": "What is the size of `int` data type in Java?",
    "Option1": "2 bytes",
    "Option2": "4 bytes",
    "Option3": "8 bytes",
    "Option4": "1 byte",
    "Answer": "4 bytes"
  },
  {
    "question_no.": 54,
    "Question": "What is the size of `char` data type in Java?",
    "Option1": "1 byte",
    "Option2": "2 bytes",
    "Option3": "4 bytes",
    "Option4": "8 bytes",
    "Answer": "2 bytes"
  },
  {
    "question_no.": 55,
    "Question": "What is the size of `long` data type in Java?",
    "Option1": "4 bytes",
    "Option2": "8 bytes",
    "Option3": "16 bytes",
    "Option4": "2 bytes",
    "Answer": "8 bytes"
  },
  {
    "question_no.": 56,
    "Question": "What is the size of `boolean` data type in Java?",
    "Option1": "1 bit",
    "Option2": "1 byte",
    "Option3": "2 bytes",
    "Option4": "It's platform dependent",
    "Answer": "1 bit"
  },
  {
    "question_no.": 57,
    "Question": "What is an array in Java?",
    "Option1": "A collection of different data types",
    "Option2": "A fixed-size collection of elements of the same data type",
    "Option3": "A dynamic list of objects",
    "Option4": "A sequence of characters",
    "Answer": "A fixed-size collection of elements of the same data type"
  },
  {
    "question_no.": 58,
    "Question": "How do you declare an array of integers named `numbers` with a size of 5?",
    "Option1": "int numbers = new int[5];",
    "Option2": "int[] numbers = new int[5];",
    "Option3": "int numbers[];",
    "Option4": "array numbers[5];",
    "Answer": "int[] numbers = new int[5];"
  },
  {
    "question_no.": 59,
    "Question": "What is the index of the first element in a Java array?",
    "Option1": "1",
    "Option2": "0",
    "Option3": "-1",
    "Option4": "Varies depending on the array size",
    "Answer": "0"
  },
  {
    "question_no.": 60,
    "Question": "How do you get the length of an array named `myArray` in Java?",
    "Option1": "myArray.size()",
    "Option2": "myArray.length",
    "Option3": "myArray.count()",
    "Option4": "length(myArray)",
    "Answer": "myArray.length"
  },
  {
    "question_no.": 61,
    "Question": "What is a `String` in Java?",
    "Option1": "A primitive data type",
    "Option2": "A class that represents a sequence of characters",
    "Option3": "An array of characters",
    "Option4": "A numerical value",
    "Answer": "A class that represents a sequence of characters"
  },
  {
    "question_no.": 62,
    "Question": "Are Strings in Java mutable or immutable?",
    "Option1": "Mutable",
    "Option2": "Immutable",
    "Option3": "Depends on the Java version",
    "Option4": "Mutable by default, but can be made immutable",
    "Answer": "Immutable"
  },
  {
    "question_no.": 63,
    "Question": "What is the purpose of the `StringBuffer` and `StringBuilder` classes?",
    "Option1": "To store numbers efficiently",
    "Option2": "To create immutable strings",
    "Option3": "To create mutable sequences of characters",
    "Option4": "To perform mathematical operations on strings",
    "Answer": "To create mutable sequences of characters"
  },
  {
    "question_no.": 64,
    "Question": "What is the main difference between `StringBuffer` and `StringBuilder`?",
    "Option1": "`StringBuffer` is faster, `StringBuilder` is thread-safe",
    "Option2": "`StringBuilder` is faster, `StringBuffer` is thread-safe",
    "Option3": "They are identical",
    "Option4": "`StringBuffer` is used for numbers, `StringBuilder` for text",
    "Answer": "`StringBuilder` is faster, `StringBuffer` is thread-safe"
  },
  {
    "question_no.": 65,
    "Question": "Which loop is guaranteed to execute at least once?",
    "Option1": "for loop",
    "Option2": "while loop",
    "Option3": "do-while loop",
    "Option4": "for-each loop",
    "Answer": "do-while loop"
  },
  {
    "question_no.": 66,
    "Question": "Which statement is used to exit a loop prematurely?",
    "Option1": "continue",
    "Option2": "return",
    "Option3": "break",
    "Option4": "exit",
    "Answer": "break"
  },
  {
    "question_no.": 67,
    "Question": "Which statement is used to skip the current iteration of a loop and continue with the next?",
    "Option1": "break",
    "Option2": "return",
    "Option3": "continue",
    "Option4": "skip",
    "Answer": "continue"
  },
  {
    "question_no.": 68,
    "Question": "What is the purpose of the `Scanner` class in Java?",
    "Option1": "To read data from a file",
    "Option2": "To write data to a file",
    "Option3": "To parse primitive types and strings from input",
    "Option4": "To create graphical user interfaces",
    "Answer": "To parse primitive types and strings from input"
  },
  {
    "question_no.": 69,
    "Question": "How do you create an object of a class named `MyClass`?",
    "Option1": "MyClass obj;",
    "Option2": "new MyClass();",
    "Option3": "MyClass obj = new MyClass();",
    "Option4": "create MyClass obj;",
    "Answer": "MyClass obj = new MyClass();"
  },
  {
    "question_no.": 70,
    "Question": "What is garbage collection in Java?",
    "Option1": "A manual process of deleting unused objects",
    "Option2": "An automatic process of reclaiming memory occupied by objects that are no longer referenced",
    "Option3": "A tool for optimizing code performance",
    "Option4": "A way to manage exceptions",
    "Answer": "An automatic process of reclaiming memory occupied by objects that are no longer referenced"
  },
  {
    "question_no.": 71,
    "Question": "Can you explicitly force garbage collection in Java?",
    "Option1": "Yes, by calling `System.gc()`",
    "Option2": "No, it's entirely automatic",
    "Option3": "Yes, but it's not guaranteed to run immediately",
    "Option4": "Only in specific JVM implementations",
    "Answer": "Yes, but it's not guaranteed to run immediately"
  },
  {
    "question_no.": 72,
    "Question": "What is the purpose of the `main` method's `String[] args` parameter?",
    "Option1": "To receive user input from the console",
    "Option2": "To receive command-line arguments when the program is executed",
    "Option3": "To store environment variables",
    "Option4": "To pass values between methods",
    "Answer": "To receive command-line arguments when the program is executed"
  },
  {
    "question_no.": 73,
    "Question": "Which of the following is NOT a primitive data type in Java?",
    "Option1": "int",
    "Option2": "boolean",
    "Option3": "String",
    "Option4": "char",
    "Answer": "String"
  },
  {
    "question_no.": 74,
    "Question": "What is the concept of 'pass by value' in Java?",
    "Option1": "When an object is passed, a copy of the object itself is passed.",
    "Option2": "When a primitive is passed, a copy of its value is passed. When an object is passed, a copy of its reference is passed.",
    "Option3": "All arguments are passed by reference.",
    "Option4": "Only primitive types are passed by value.",
    "Answer": "When a primitive is passed, a copy of its value is passed. When an object is passed, a copy of its reference is passed."
  },
  {
    "question_no.": 75,
    "Question": "What is an `ArrayList` in Java?",
    "Option1": "A fixed-size array",
    "Option2": "A dynamic array that can grow and shrink",
    "Option3": "A linked list",
    "Option4": "A set of unique elements",
    "Answer": "A dynamic array that can grow and shrink"
  },
  {
    "question_no.": 76,
    "Question": "Which package contains the `ArrayList` class?",
    "Option1": "java.lang",
    "Option2": "java.io",
    "Option3": "java.util",
    "Option4": "java.net",
    "Answer": "java.util"
  },
  {
    "question_no.": 77,
    "Question": "How do you add an element to an `ArrayList` named `myList`?",
    "Option1": "myList.insert(element);",
    "Option2": "myList.add(element);",
    "Option3": "myList.put(element);",
    "Option4": "myList.append(element);",
    "Answer": "myList.add(element);"
  },
  {
    "question_no.": 78,
    "Question": "How do you remove an element from an `ArrayList` named `myList` at a specific index?",
    "Option1": "myList.delete(index);",
    "Option2": "myList.remove(index);",
    "Option3": "myList.cut(index);",
    "Option4": "myList.erase(index);",
    "Answer": "myList.remove(index);"
  },
  {
    "question_no.": 79,
    "Question": "How do you get an element from an `ArrayList` named `myList` at a specific index?",
    "Option1": "myList.retrieve(index);",
    "Option2": "myList.fetch(index);",
    "Option3": "myList.get(index);",
    "Option4": "myList.elementAt(index);",
    "Answer": "myList.get(index);"
  },
  {
    "question_no.": 80,
    "Question": "What is a `HashMap` in Java?",
    "Option1": "A list of elements",
    "Option2": "A collection of key-value pairs, where keys are unique",
    "Option3": "An ordered collection of elements",
    "Option4": "A fixed-size array",
    "Answer": "A collection of key-value pairs, where keys are unique"
  },
  {
    "question_no.": 81,
    "Question": "Which package contains the `HashMap` class?",
    "Option1": "java.lang",
    "Option2": "java.io",
    "Option3": "java.util",
    "Option4": "java.net",
    "Answer": "java.util"
  },
  {
    "question_no.": 82,
    "Question": "How do you add a key-value pair to a `HashMap` named `myMap`?",
    "Option1": "myMap.insert(key, value);",
    "Option2": "myMap.add(key, value);",
    "Option3": "myMap.put(key, value);",
    "Option4": "myMap.set(key, value);",
    "Answer": "myMap.put(key, value);"
  },
  {
    "question_no.": 83,
    "Question": "How do you retrieve a value from a `HashMap` named `myMap` using a key?",
    "Option1": "myMap.get(key);",
    "Option2": "myMap.getValue(key);",
    "Option3": "myMap.find(key);",
    "Option4": "myMap.retrieve(key);",
    "Answer": "myMap.get(key);"
  },
  {
    "question_no.": 84,
    "Question": "What is a `Set` in Java Collections Framework?",
    "Option1": "An ordered collection that allows duplicate elements",
    "Option2": "A collection that does not allow duplicate elements",
    "Option3": "A collection that stores key-value pairs",
    "Option4": "A fixed-size collection",
    "Answer": "A collection that does not allow duplicate elements"
  },
  {
    "question_no.": 85,
    "Question": "Which interface represents a collection of elements that do not allow duplicates?",
    "Option1": "List",
    "Option2": "Map",
    "Option3": "Set",
    "Option4": "Collection",
    "Answer": "Set"
  },
  {
    "question_no.": 86,
    "Question": "What is a thread in Java?",
    "Option1": "A separate process within an application",
    "Option2": "A lightweight sub-process, the smallest unit of processing",
    "Option3": "A type of data structure",
    "Option4": "A network connection",
    "Answer": "A lightweight sub-process, the smallest unit of processing"
  },
  {
    "question_no.": 87,
    "Question": "How can you create a thread in Java?",
    "Option1": "By extending the `Thread` class or implementing the `Runnable` interface",
    "Option2": "By using the `new Thread()` constructor only",
    "Option3": "By defining a static method",
    "Option4": "Threads cannot be created directly by the programmer",
    "Answer": "By extending the `Thread` class or implementing the `Runnable` interface"
  },
  {
    "question_no.": 88,
    "Question": "Which method is called to start a thread's execution?",
    "Option1": "run()",
    "Option2": "start()",
    "Option3": "execute()",
    "Option4": "init()",
    "Answer": "start()"
  },
  {
    "question_no.": 89,
    "Question": "What is `synchronization` in Java threading?",
    "Option1": "Ensuring that multiple threads run simultaneously",
    "Option2": "A mechanism for controlling access to shared resources by multiple threads",
    "Option3": "A way to stop threads from executing",
    "Option4": "A method for merging threads",
    "Answer": "A mechanism for controlling access to shared resources by multiple threads"
  },
  {
    "question_no.": 90,
    "Question": "What is a `Deadlock` in Java threading?",
    "Option1": "When a thread is waiting indefinitely for a resource held by another waiting thread",
    "Option2": "When a thread finishes its execution",
    "Option3": "When a thread attempts to access a non-existent resource",
    "Option4": "When a thread is too slow",
    "Answer": "When a thread is waiting indefinitely for a resource held by another waiting thread"
  },
  {
    "question_no.": 91,
    "Question": "What is the purpose of the `volatile` keyword in Java?",
    "Option1": "To prevent a variable from being changed",
    "Option2": "To ensure that changes to a variable are always written to and read from main memory, not from CPU cache",
    "Option3": "To make a variable accessible only within a method",
    "Option4": "To define a transient variable",
    "Answer": "To ensure that changes to a variable are always written to and read from main memory, not from CPU cache"
  },
  {
    "question_no.": 92,
    "Question": "What is the `wait()` method used for in Java threading?",
    "Option1": "To pause a thread for a specified amount of time",
    "Option2": "To cause the current thread to wait until another thread invokes the `notify()` or `notifyAll()` method for this object",
    "Option3": "To stop a thread permanently",
    "Option4": "To check if a thread is alive",
    "Answer": "To cause the current thread to wait until another thread invokes the `notify()` or `notifyAll()` method for this object"
  },
  {
    "question_no.": 93,
    "Question": "What is the `notify()` method used for in Java threading?",
    "Option1": "To awaken all threads waiting on this object's monitor",
    "Option2": "To awaken a single thread waiting on this object's monitor",
    "Option3": "To send a message to another thread",
    "Option4": "To notify the operating system that a thread is ready",
    "Answer": "To awaken a single thread waiting on this object's monitor"
  },
  {
    "question_no.": 94,
    "Question": "What is the `notifyAll()` method used for in Java threading?",
    "Option1": "To awaken a single thread waiting on this object's monitor",
    "Option2": "To awaken all threads waiting on this object's monitor",
    "Option3": "To send a message to all threads",
    "Option4": "To stop all threads",
    "Answer": "To awaken all threads waiting on this object's monitor"
  },
  {
    "question_no.": 95,
    "Question": "What is the `sleep()` method used for in Java threading?",
    "Option1": "To pause a thread indefinitely",
    "Option2": "To cause the current thread to pause execution for a specified period of time",
    "Option3": "To put a thread into a permanent waiting state",
    "Option4": "To terminate a thread",
    "Answer": "To cause the current thread to pause execution for a specified period of time"
  },
  {
    "question_no.": 96,
    "Question": "Which class is the superclass of all classes in Java?",
    "Option1": "System",
    "Option2": "Object",
    "Option3": "Class",
    "Option4": "Root",
    "Answer": "Object"
  },
  {
    "question_no.": 97,
    "Question": "What is the purpose of the `equals()` method in Java?",
    "Option1": "To compare the memory addresses of two objects",
    "Option2": "To compare the content or state of two objects",
    "Option3": "To check if two objects are of the same type",
    "Option4": "To convert an object to a string",
    "Answer": "To compare the content or state of two objects"
  },
  {
    "question_no.": 98,
    "Question": "What is the purpose of the `hashCode()` method in Java?",
    "Option1": "To generate a unique ID for each object",
    "Option2": "To provide a hash code for an object, typically used in hash-based collections like `HashMap`",
    "Option3": "To convert an object to a string representation",
    "Option4": "To compare two objects for equality",
    "Answer": "To provide a hash code for an object, typically used in hash-based collections like `HashMap`"
  },
  {
    "question_no.": 99,
    "Question": "What is the purpose of the `toString()` method in Java?",
    "Option1": "To convert a string to an object",
    "Option2": "To return a string representation of the object",
    "Option3": "To compare two strings",
    "Option4": "To check if a string is empty",
    "Answer": "To return a string representation of the object"
  },
  {
    "question_no.": 100,
    "Question": "What is a wrapper class in Java?",
    "Option1": "A class that wraps around another class to add functionality",
    "Option2": "A class that provides a mechanism to convert primitive data types into objects",
    "Option3": "A class that extends the `Object` class",
    "Option4": "A class used for packaging Java applications",
    "Answer": "A class that provides a mechanism to convert primitive data types into objects"
  },
  {
    "question_no.": 101,
    "Question": "Which of the following is the wrapper class for `int`?",
    "Option1": "Integer",
    "Option2": "Int",
    "Option3": "Number",
    "Option4": "Long",
    "Answer": "Integer"
  },
  {
    "question_no.": 102,
    "Question": "Which of the following is the wrapper class for `char`?",
    "Option1": "Character",
    "Option2": "Char",
    "Option3": "String",
    "Option4": "Byte",
    "Answer": "Character"
  },
  {
    "question_no.": 103,
    "Question": "What is autoboxing in Java?",
    "Option1": "The automatic conversion of a wrapper class object to its corresponding primitive type",
    "Option2": "The automatic conversion of a primitive type to its corresponding wrapper class object",
    "Option3": "The process of boxing up primitive types into arrays",
    "Option4": "A mechanism for creating new objects automatically",
    "Answer": "The automatic conversion of a primitive type to its corresponding wrapper class object"
  },
  {
    "question_no.": 104,
    "Question": "What is unboxing in Java?",
    "Option1": "The automatic conversion of a primitive type to its corresponding wrapper class object",
    "Option2": "The automatic conversion of a wrapper class object to its corresponding primitive type",
    "Option3": "The process of unboxing primitive types from arrays",
    "Option4": "A mechanism for destroying objects automatically",
    "Answer": "The automatic conversion of a wrapper class object to its corresponding primitive type"
  },
  {
    "question_no.": 105,
    "Question": "What is the purpose of the `enum` keyword in Java?",
    "Option1": "To define a new data type that can only hold numerical values",
    "Option2": "To define a set of named constants",
    "Option3": "To create an enumeration of all classes in a package",
    "Option4": "To specify the number of elements in an array",
    "Answer": "To define a set of named constants"
  },
  {
    "question_no.": 106,
    "Question": "Can an enum have constructors and methods?",
    "Option1": "No, enums can only define constants",
    "Option2": "Yes, but constructors must be private or package-private",
    "Option3": "Yes, but only static methods",
    "Option4": "Only in Java 8 and later",
    "Answer": "Yes, but constructors must be private or package-private"
  },
  {
    "question_no.": 107,
    "Question": "What is the purpose of the `transient` keyword in Java?",
    "Option1": "To prevent a variable from being serialized",
    "Option2": "To make a variable accessible only within a method",
    "Option3": "To define a temporary variable",
    "Option4": "To indicate that a variable will change frequently",
    "Answer": "To prevent a variable from being serialized"
  },
  {
    "question_no.": 108,
    "Question": "What is the purpose of the `static final` keywords used together?",
    "Option1": "To create a mutable class variable",
    "Option2": "To create a constant class variable (a compile-time constant)",
    "Option3": "To create an instance-specific constant",
    "Option4": "To define a method that can be overridden",
    "Answer": "To create a constant class variable (a compile-time constant)"
  },
  {
    "question_no.": 109,
    "Question": "What is a `jar` file in Java?",
    "Option1": "A text file containing Java source code",
    "Option2": "A compressed archive file that contains Java class files, associated metadata, and resources",
    "Option3": "A log file generated by the JVM",
    "Option4": "A configuration file for Java applications",
    "Answer": "A compressed archive file that contains Java class files, associated metadata, and resources"
  },
  {
    "question_no.": 110,
    "Question": "Which utility is used to create a `jar` file?",
    "Option1": "javac",
    "Option2": "java",
    "Option3": "jar",
    "Option4": "javadoc",
    "Answer": "jar"
  },
  {
    "question_no.": 111,
    "Question": "What is the purpose of the `javadoc` utility?",
    "Option1": "To compile Java code",
    "Option2": "To run Java applications",
    "Option3": "To generate API documentation in HTML format from Java source code comments",
    "Option4": "To debug Java programs",
    "Answer": "To generate API documentation in HTML format from Java source code comments"
  },
  {
    "question_no.": 112,
    "Question": "What is a `try-with-resources` statement in Java?",
    "Option1": "A way to handle exceptions manually",
    "Option2": "A feature that ensures that each resource (e.g., file streams) is closed at the end of the statement, regardless of whether the `try` block completes normally or abruptly",
    "Option3": "A method for allocating memory resources",
    "Option4": "A way to define new resources for a program",
    "Answer": "A feature that ensures that each resource (e.g., file streams) is closed at the end of the statement, regardless of whether the `try` block completes normally or abruptly"
  },
  {
    "question_no.": 113,
    "Question": "What is `Serialization` in Java?",
    "Option1": "The process of converting an object into a sequence of bits for storage or transmission",
    "Option2": "The process of creating a new instance of an object",
    "Option3": "The process of combining multiple objects into one",
    "Option4": "The process of encrypting data",
    "Answer": "The process of converting an object into a sequence of bits for storage or transmission"
  },
  {
    "question_no.": 114,
    "Question": "What is `Deserialization` in Java?",
    "Option1": "The process of converting a sequence of bits into an object",
    "Option2": "The process of destroying an object",
    "Option3": "The process of converting an object into a sequence of bits",
    "Option4": "The process of compressing data",
    "Answer": "The process of converting a sequence of bits into an object"
  },
  {
    "question_no.": 115,
    "Question": "Which interface must a class implement to be serializable?",
    "Option1": "Serializable",
    "Option2": "Externalizable",
    "Option3": "Cloneable",
    "Option4": "Comparable",
    "Answer": "Serializable"
  },
  {
    "question_no.": 116,
    "Question": "What is the purpose of the `transient` keyword during serialization?",
    "Option1": "It ensures that the field is always serialized.",
    "Option2": "It marks a field so that it will not be serialized when an object is written to a persistent storage.",
    "Option3": "It makes the field accessible from other classes.",
    "Option4": "It indicates that the field is constant.",
    "Answer": "It marks a field so that it will not be serialized when an object is written to a persistent storage."
  },
  {
    "question_no.": 117,
    "Question": "What is `JDBC`?",
    "Option1": "Java Development Build Configuration",
    "Option2": "Java Database Connectivity",
    "Option3": "Java Data Binding Class",
    "Option4": "Java Document Control",
    "Answer": "Java Database Connectivity"
  },
  {
    "question_no.": 118,
    "Question": "What is the primary function of JDBC?",
    "Option1": "To create web applications",
    "Option2": "To connect Java applications to databases",
    "Option3": "To manage network protocols",
    "Option4": "To create graphical user interfaces",
    "Answer": "To connect Java applications to databases"
  },
  {
    "question_no.": 119,
    "Question": "Which interface represents a database connection in JDBC?",
    "Option1": "Statement",
    "Option2": "ResultSet",
    "Option3": "Connection",
    "Option4": "Driver",
    "Answer": "Connection"
  },
  {
    "question_no.": 120,
    "Question": "Which interface represents a SQL query statement in JDBC?",
    "Option1": "Connection",
    "Option2": "ResultSet",
    "Option3": "Statement",
    "Option4": "PreparedStatement",
    "Answer": "Statement"
  },
  {
    "question_no.": 121,
    "Question": "Which interface represents a set of results from a database query in JDBC?",
    "Option1": "Statement",
    "Option2": "Connection",
    "Option3": "ResultSet",
    "Option4": "RowSet",
    "Answer": "ResultSet"
  },
  {
    "question_no.": 122,
    "Question": "What is the difference between `Statement` and `PreparedStatement` in JDBC?",
    "Option1": "`Statement` is faster, `PreparedStatement` is slower.",
    "Option2": "`PreparedStatement` is pre-compiled and more efficient for repetitive queries, and prevents SQL injection.",
    "Option3": "There is no significant difference.",
    "Option4": "`Statement` is for DDL, `PreparedStatement` is for DML.",
    "Answer": "`PreparedStatement` is pre-compiled and more efficient for repetitive queries, and prevents SQL injection."
  },
  {
    "question_no.": 123,
    "Question": "What is `Servlet` in Java?",
    "Option1": "A standalone Java application",
    "Option2": "A Java class that extends the capabilities of a server (like a web server)",
    "Option3": "A client-side scripting language",
    "Option4": "A database driver",
    "Answer": "A Java class that extends the capabilities of a server (like a web server)"
  },
  {
    "question_no.": 124,
    "Question": "What is `JSP`?",
    "Option1": "Java Service Page",
    "Option2": "Java Server Pages",
    "Option3": "Java Standard Protocol",
    "Option4": "Java Scripting Program",
    "Answer": "Java Server Pages"
  },
  {
    "question_no.": 125,
    "Question": "What is the main difference between `Servlet` and `JSP`?",
    "Option1": "Servlets are server-side, JSPs are client-side.",
    "Option2": "Servlets are Java code embedded in HTML, JSPs are HTML embedded in Java code.",
    "Option3": "Servlets are Java classes for dynamic web content; JSPs are HTML pages with embedded Java code, which are compiled into Servlets.",
    "Option4": "Servlets are for desktop applications, JSPs are for web applications.",
    "Answer": "Servlets are Java classes for dynamic web content; JSPs are HTML pages with embedded Java code, which are compiled into Servlets."
  },
  {
    "question_no.": 126,
    "Question": "What is the role of `Tomcat` in Java web development?",
    "Option1": "It's a Java IDE.",
    "Option2": "It's a database server.",
    "Option3": "It's an open-source web server and Servlet container for Java web applications.",
    "Option4": "It's a Java programming language dialect.",
    "Answer": "It's an open-source web server and Servlet container for Java web applications."
  },
  {
    "question_no.": 127,
    "Question": "What is a `JavaBean`?",
    "Option1": "A small coffee bean",
    "Option2": "A reusable software component written in Java",
    "Option3": "A framework for web development",
    "Option4": "A type of database",
    "Answer": "A reusable software component written in Java"
  },
  {
    "question_no.": 128,
    "Question": "What are the typical conventions for a JavaBean?",
    "Option1": "Private fields, public getters/setters, no-arg constructor, implements `Serializable`.",
    "Option2": "Public fields, no methods.",
    "Option3": "Static methods only.",
    "Option4": "Must extend a specific base class.",
    "Answer": "Private fields, public getters/setters, no-arg constructor, implements `Serializable`."
  },
  {
    "question_no.": 129,
    "Question": "What is the purpose of `final` in a variable declaration?",
    "Option1": "The variable can be reassigned.",
    "Option2": "The variable's value cannot be changed once assigned.",
    "Option3": "The variable is accessible only within the class.",
    "Option4": "The variable is static.",
    "Answer": "The variable's value cannot be changed once assigned."
  },
  {
    "question_no.": 130,
    "Question": "What is the purpose of `final` in a method declaration?",
    "Option1": "The method can be overridden by subclasses.",
    "Option2": "The method cannot be overridden by subclasses.",
    "Option3": "The method can only be called from within the same class.",
    "Option4": "The method is static.",
    "Answer": "The method cannot be overridden by subclasses."
  },
  {
    "question_no.": 131,
    "Question": "What is the purpose of `final` in a class declaration?",
    "Option1": "The class can be inherited.",
    "Option2": "The class cannot be inherited (extended).",
    "Option3": "The class can only have static methods.",
    "Option4": "The class is abstract.",
    "Answer": "The class cannot be inherited (extended)."
  },
  {
    "question_no.": 132,
    "Question": "What is a `singleton` design pattern in Java?",
    "Option1": "A pattern that ensures a class has only one instance and provides a global point of access to it.",
    "Option2": "A pattern that creates multiple instances of a class.",
    "Option3": "A pattern that allows a class to be inherited by only one subclass.",
    "Option4": "A pattern for creating database connections.",
    "Answer": "A pattern that ensures a class has only one instance and provides a global point of access to it."
  },
  {
    "question_no.": 133,
    "Question": "How do you typically implement a singleton pattern in Java?",
    "Option1": "Public constructor, static getInstance() method.",
    "Option2": "Private constructor, static getInstance() method.",
    "Option3": "Abstract class with a public constructor.",
    "Option4": "Interface with a static method.",
    "Answer": "Private constructor, static getInstance() method."
  },
  {
    "question_no.": 134,
    "Question": "What is `JVM shutdown hook`?",
    "Option1": "A method to restart the JVM.",
    "Option2": "A thread that is executed when the JVM is shutting down.",
    "Option3": "A way to suspend the JVM.",
    "Option4": "A tool to monitor JVM performance.",
    "Answer": "A thread that is executed when the JVM is shutting down."
  },
  {
    "question_no.": 135,
    "Question": "What is the purpose of the `System.exit()` method?",
    "Option1": "To gracefully shut down the application and terminate the JVM.",
    "Option2": "To throw an exception.",
    "Option3": "To close all open files.",
    "Option4": "To clear the console output.",
    "Answer": "To gracefully shut down the application and terminate the JVM."
  },
  {
    "question_no.": 136,
    "Question": "What is a `Nested Class` in Java?",
    "Option1": "A class defined outside of any other class.",
    "Option2": "A class defined within another class.",
    "Option3": "A class that extends another class.",
    "Option4": "A class that implements an interface.",
    "Answer": "A class defined within another class."
  },
  {
    "question_no.": 137,
    "Question": "What is an `Inner Class` in Java?",
    "Option1": "A static nested class.",
    "Option2": "A non-static nested class, which has access to all members of its enclosing class.",
    "Option3": "A class that can only be accessed from within the same package.",
    "Option4": "A class with a private constructor.",
    "Answer": "A non-static nested class, which has access to all members of its enclosing class."
  },
  {
    "question_no.": 138,
    "Question": "What is a `Static Nested Class` in Java?",
    "Option1": "A non-static nested class.",
    "Option2": "A static class defined inside another class, which can only access static members of its outer class.",
    "Option3": "A class that can only be accessed from within a method.",
    "Option4": "A class with no methods.",
    "Answer": "A static class defined inside another class, which can only access static members of its outer class."
  },
  {
    "question_no.": 139,
    "Question": "What is an `Anonymous Inner Class` in Java?",
    "Option1": "A class with a specific name.",
    "Option2": "A class that has no name and is declared and instantiated at the same time.",
    "Option3": "A class that cannot be inherited.",
    "Option4": "A class that only contains static members.",
    "Answer": "A class that has no name and is declared and instantiated at the same time."
  },
  {
    "question_no.": 140,
    "Question": "What is a `Lambda Expression` in Java?",
    "Option1": "A way to define a full class.",
    "Option2": "A concise way to represent an anonymous function, introduced in Java 8.",
    "Option3": "A new type of variable.",
    "Option4": "A method for handling exceptions.",
    "Answer": "A concise way to represent an anonymous function, introduced in Java 8."
  },
  {
    "question_no.": 141,
    "Question": "What is a `Functional Interface` in Java?",
    "Option1": "An interface with multiple abstract methods.",
    "Option2": "An interface that contains exactly one abstract method.",
    "Option3": "An interface that has no methods.",
    "Option4": "An interface that can only be implemented by functional classes.",
    "Answer": "An interface that contains exactly one abstract method."
  },
  {
    "question_no.": 142,
    "Question": "Which annotation is used to mark a functional interface?",
    "Option1": "@Override",
    "Option2": "@FunctionalInterface",
    "Option3": "@Deprecated",
    "Option4": "@OverrideMethod",
    "Answer": "@FunctionalInterface"
  },
  {
    "question_no.": 143,
    "Question": "What is the `Stream API` in Java?",
    "Option1": "A new way to handle input/output operations.",
    "Option2": "A powerful set of features introduced in Java 8 for processing collections of data in a functional style.",
    "Option3": "A library for networking applications.",
    "Option4": "A tool for creating graphical user interfaces.",
    "Answer": "A powerful set of features introduced in Java 8 for processing collections of data in a functional style."
  },
  {
    "question_no.": 144,
    "Question": "What is the difference between `Intermediate Operations` and `Terminal Operations` in Stream API?",
    "Option1": "Intermediate operations modify the original data, terminal operations do not.",
    "Option2": "Intermediate operations return a new stream, terminal operations produce a result or side-effect and close the stream.",
    "Option3": "Intermediate operations are always executed, terminal operations are optional.",
    "Option4": "There is no difference.",
    "Answer": "Intermediate operations return a new stream, terminal operations produce a result or side-effect and close the stream."
  },
  {
    "question_no.": 145,
    "Question": "Which of these is an intermediate operation in Stream API?",
    "Option1": "forEach()",
    "Option2": "collect()",
    "Option3": "map()",
    "Option4": "count()",
    "Answer": "map()"
  },
  {
    "question_no.": 146,
    "Question": "Which of these is a terminal operation in Stream API?",
    "Option1": "filter()",
    "Option2": "sorted()",
    "Option3": "forEach()",
    "Option4": "distinct()",
    "Answer": "forEach()"
  },
  {
    "question_no.": 147,
    "Question": "What is `Optional` in Java?",
    "Option1": "A class for handling errors.",
    "Option2": "A container object that may or may not contain a non-null value, used to avoid NullPointerExceptions.",
    "Option3": "A way to make variables optional.",
    "Option4": "A type of collection.",
    "Answer": "A container object that may or may not contain a non-null value, used to avoid NullPointerExceptions."
  },
  {
    "question_no.": 148,
    "Question": "What is the purpose of `Method References` in Java 8?",
    "Option1": "To call a method by its name only.",
    "Option2": "To refer to methods without invoking them, simplifying lambda expressions.",
    "Option3": "To define new methods dynamically.",
    "Option4": "To create anonymous classes.",
    "Answer": "To refer to methods without invoking them, simplifying lambda expressions."
  },
  {
    "question_no.": 149,
    "Question": "What is the `Date and Time API` in Java 8?",
    "Option1": "A library for working with traditional `java.util.Date`.",
    "Option2": "A new, immutable, and thread-safe API for handling dates and times (`java.time` package).",
    "Option3": "A tool for time zone conversions only.",
    "Option4": "A way to schedule tasks.",
    "Answer": "A new, immutable, and thread-safe API for handling dates and times (`java.time` package)."
  },
  {
    "question_no.": 150,
    "Question": "What is `JDBC` Type 4 driver also known as?",
    "Option1": "ODBC Bridge Driver",
    "Option2": "Native API (partially Java) Driver",
    "Option3": "Network Protocol (all Java) Driver / Pure Java Driver",
    "Option4": "Native Protocol (partially Java) Driver",
    "Answer": "Network Protocol (all Java) Driver / Pure Java Driver"
  },
  {
    "question_no.": 151,
    "Question": "Which annotation is used for defining a Spring Bean?",
    "Option1": "@Component",
    "Option2": "@Bean",
    "Option3": "@Service",
    "Option4": "All of the above (indirectly)",
    "Answer": "@Bean"
  },
  {
    "question_no.": 152,
    "Question": "What is `Spring Framework`?",
    "Option1": "A lightweight, open-source framework for building enterprise-level Java applications.",
    "Option2": "A full-stack web server.",
    "Option3": "A database management system.",
    "Option4": "A user interface toolkit.",
    "Answer": "A lightweight, open-source framework for building enterprise-level Java applications."
  },
  {
    "question_no.": 153,
    "Question": "What is `Dependency Injection` in Spring?",
    "Option1": "A way to inject malicious code into an application.",
    "Option2": "A technique where objects receive their dependencies from an external source rather than creating them themselves.",
    "Option3": "A method for automatically deploying applications.",
    "Option4": "A mechanism for managing database connections.",
    "Answer": "A technique where objects receive their dependencies from an external source rather than creating them themselves."
  },
  {
    "question_no.": 154,
    "Question": "What is the `Inversion of Control (IoC)` container in Spring?",
    "Option1": "A container that reverses the flow of control in a program.",
    "Option2": "The core of the Spring Framework, responsible for managing the lifecycle of objects (beans) and their dependencies.",
    "Option3": "A tool for debugging Java applications.",
    "Option4": "A component for handling network requests.",
    "Answer": "The core of the Spring Framework, responsible for managing the lifecycle of objects (beans) and their dependencies."
  },
  {
    "question_no.": 155,
    "Question": "Which annotation is used to mark a class as a Spring component and allows Spring to auto-detect and register it?",
    "Option1": "@Bean",
    "Option2": "@Service",
    "Option3": "@Component",
    "Option4": "@Controller",
    "Answer": "@Component"
  },
  {
    "question_no.": 156,
    "Question": "What is `Spring Boot`?",
    "Option1": "A new version of Spring Framework.",
    "Option2": "An extension of the Spring Framework that simplifies the development of stand-alone, production-ready Spring applications with minimal configuration.",
    "Option3": "A tool for generating Spring code.",
    "Option4": "A database for Spring applications.",
    "Answer": "An extension of the Spring Framework that simplifies the development of stand-alone, production-ready Spring applications with minimal configuration."
  },
  {
    "question_no.": 157,
    "Question": "What is `Maven`?",
    "Option1": "A Java IDE.",
    "Option2": "A build automation tool primarily used for Java projects, which manages project dependencies and builds.",
    "Option3": "A testing framework.",
    "Option4": "A version control system.",
    "Answer": "A build automation tool primarily used for Java projects, which manages project dependencies and builds."
  },
  {
    "question_no.": 158,
    "Question": "What is the `POM` file in Maven?",
    "Option1": "Project Objective Model",
    "Option2": "Project Object Model",
    "Option3": "Program Operation Management",
    "Option4": "Project Output Model",
    "Answer": "Project Object Model"
  },
  {
    "question_no.": 159,
    "Question": "What is `Gradle`?",
    "Option1": "A Java IDE.",
    "Option2": "Another build automation tool for Java projects, known for its flexibility and performance.",
    "Option3": "A testing framework.",
    "Option4": "A version control system.",
    "Answer": "Another build automation tool for Java projects, known for its flexibility and performance."
  },
  {
    "question_no.": 160,
    "Question": "What is `JUnit`?",
    "Option1": "A Java compiler.",
    "Option2": "A testing framework for Java applications.",
    "Option3": "A database client.",
    "Option4": "A web server.",
    "Answer": "A testing framework for Java applications."
  },
  {
    "question_no.": 161,
    "Question": "Which annotation is used to mark a method as a test method in JUnit?",
    "Option1": "@RunTest",
    "Option2": "@Test",
    "Option3": "@ExecuteTest",
    "Option4": "@TestMethod",
    "Answer": "@Test"
  },
  {
    "question_no.": 162,
    "Question": "What is the purpose of `assert` methods in JUnit?",
    "Option1": "To print messages to the console.",
    "Option2": "To make assertions about the state of the code being tested, verifying expected outcomes.",
    "Option3": "To throw exceptions during testing.",
    "Option4": "To define test cases.",
    "Answer": "To make assertions about the state of the code being tested, verifying expected outcomes."
  },
  {
    "question_no.": 163,
    "Question": "What is `Mockito`?",
    "Option1": "A database framework.",
    "Option2": "A mocking framework for Java, used for unit testing to create mock objects for dependencies.",
    "Option3": "A build tool.",
    "Option4": "A user interface library.",
    "Answer": "A mocking framework for Java, used for unit testing to create mock objects for dependencies."
  },
  {
    "question_no.": 164,
    "Question": "What is `Hibernate`?",
    "Option1": "A relational database.",
    "Option2": "An open-source object-relational mapping (ORM) framework for Java, simplifying database interactions.",
    "Option3": "A web server.",
    "Option4": "A testing tool.",
    "Answer": "An open-source object-relational mapping (ORM) framework for Java, simplifying database interactions."
  },
  {
    "question_no.": 165,
    "Question": "What is `ORM` in the context of Hibernate?",
    "Option1": "Object Relational Model",
    "Option2": "Object Relational Mapping",
    "Option3": "Online Resource Management",
    "Option4": "Operational Reporting Model",
    "Answer": "Object Relational Mapping"
  },
  {
    "question_no.": 166,
    "Question": "What is the purpose of `POJO` in Java?",
    "Option1": "Plain Old JavaScript Object",
    "Option2": "Plain Old Java Object - a simple Java object not bound by any framework-specific restrictions.",
    "Option3": "Polymorphic Object Java Object",
    "Option4": "Programmatic Operation Java Object",
    "Answer": "Plain Old Java Object - a simple Java object not bound by any framework-specific restrictions."
  },
  {
    "question_no.": 167,
    "Question": "What is `RESTful API`?",
    "Option1": "A type of database.",
    "Option2": "An architectural style for designing networked applications, often used for web services.",
    "Option3": "A specific programming language.",
    "Option4": "A user interface design guideline.",
    "Answer": "An architectural style for designing networked applications, often used for web services."
  },
  {
    "question_no.": 168,
    "Question": "Which HTTP method is typically used for retrieving data in a RESTful API?",
    "Option1": "POST",
    "Option2": "PUT",
    "Option3": "GET",
    "Option4": "DELETE",
    "Answer": "GET"
  },
  {
    "question_no.": 169,
    "Question": "Which HTTP method is typically used for creating new resources in a RESTful API?",
    "Option1": "GET",
    "Option2": "PUT",
    "Option3": "POST",
    "Option4": "PATCH",
    "Answer": "POST"
  },
  {
    "question_no.": 170,
    "Question": "Which HTTP method is typically used for updating existing resources in a RESTful API?",
    "Option1": "GET",
    "Option2": "DELETE",
    "Option3": "PUT",
    "Option4": "HEAD",
    "Answer": "PUT"
  },
  {
    "question_no.": 171,
    "Question": "Which HTTP method is typically used for deleting resources in a RESTful API?",
    "Option1": "GET",
    "Option2": "POST",
    "Option3": "PUT",
    "Option4": "DELETE",
    "Answer": "DELETE"
  },
  {
    "question_no.": 172,
    "Question": "What is `JSON` in the context of web services?",
    "Option1": "Java Object Notation",
    "Option2": "JavaScript Object Notation - a lightweight data-interchange format.",
    "Option3": "Java Standard Object Network",
    "Option4": "Joint Object Naming",
    "Answer": "JavaScript Object Notation - a lightweight data-interchange format."
  },
  {
    "question_no.": 173,
    "Question": "What is `XML` in the context of web services?",
    "Option1": "Extra Markup Language",
    "Option2": "Extensible Markup Language - a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.",
    "Option3": "eXtended Module Loader",
    "Option4": "Executable Markup Logic",
    "Answer": "Extensible Markup Language - a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable."
  },
  {
    "question_no.": 174,
    "Question": "What is `SOAP` in web services?",
    "Option1": "Simple Object Access Protocol - a messaging protocol for exchanging structured information in the implementation of web services.",
    "Option2": "Structured Object Application Program",
    "Option3": "Service Oriented Architecture Protocol",
    "Option4": "System Object Acknowledgment Protocol",
    "Answer": "Simple Object Access Protocol - a messaging protocol for exchanging structured information in the implementation of web services."
  },
  {
    "question_no.": 175,
    "Question": "What is `JVM HotSpot`?",
    "Option1": "A debugging tool for Java applications.",
    "Option2": "Oracle's primary implementation of the Java Virtual Machine, known for its Just-In-Time (JIT) compilation.",
    "Option3": "A Java IDE.",
    "Option4": "A network monitoring tool.",
    "Answer": "Oracle's primary implementation of the Java Virtual Machine, known for its Just-In-Time (JIT) compilation."
  },
  {
    "question_no.": 176,
    "Question": "What is `JIT Compilation` in JVM?",
    "Option1": "Compilation of Java code at compile time.",
    "Option2": "Just-In-Time compilation, where bytecode is translated into native machine code at runtime for performance optimization.",
    "Option3": "Compilation of Java code for specific operating systems.",
    "Option4": "Compilation of Java code into JavaScript.",
    "Answer": "Just-In-Time compilation, where bytecode is translated into native machine code at runtime for performance optimization."
  },
  {
    "question_no.": 177,
    "Question": "What is the `classpath` in Java?",
    "Option1": "The path to the Java compiler.",
    "Option2": "A parameter used by the Java Virtual Machine to locate user-defined classes and packages.",
    "Option3": "The path to the Java Development Kit (JDK).",
    "Option4": "A file containing Java project settings.",
    "Answer": "A parameter used by the Java Virtual Machine to locate user-defined classes and packages."
  },
  {
    "question_no.": 178,
    "Question": "How do you set the classpath when running a Java application?",
    "Option1": "Using the `-sourcepath` option.",
    "Option2": "Using the `-cp` or `-classpath` option with the `java` command.",
    "Option3": "By editing the system environment variables only.",
    "Option4": "It's set automatically by the JVM.",
    "Answer": "Using the `-cp` or `-classpath` option with the `java` command."
  },
  {
    "question_no.": 179,
    "Question": "What is `JAR Hell`?",
    "Option1": "A term for problems that arise when dealing with different versions of JAR files.",
    "Option2": "A place where old JAR files are stored.",
    "Option3": "A security vulnerability in JAR files.",
    "Option4": "A type of Java error message.",
    "Answer": "A term for problems that arise when dealing with different versions of JAR files."
  },
  {
    "question_no.": 180,
    "Question": "What is `Maven Repository`?",
    "Option1": "A local folder for Java source code.",
    "Option2": "A central location (local or remote) where Maven artifacts (JARs, POMs, etc.) are stored.",
    "Option3": "A version control system for Maven projects.",
    "Option4": "A database for Maven build results.",
    "Answer": "A central location (local or remote) where Maven artifacts (JARs, POMs, etc.) are stored."
  },
  {
    "question_no.": 181,
    "Question": "What is `Unit Testing`?",
    "Option1": "Testing the entire system as a whole.",
    "Option2": "Testing individual units or components of a software application in isolation.",
    "Option3": "Testing the user interface.",
    "Option4": "Testing database connectivity.",
    "Answer": "Testing individual units or components of a software application in isolation."
  },
  {
    "question_no.": 182,
    "Question": "What is `Integration Testing`?",
    "Option1": "Testing individual units or components of a software application in isolation.",
    "Option2": "Testing the interfaces between components to ensure they work together correctly.",
    "Option3": "Testing the entire system as a whole.",
    "Option4": "Testing for performance issues.",
    "Answer": "Testing the interfaces between components to ensure they work together correctly."
  },
  {
    "question_no.": 183,
    "Question": "What is `Functional Testing`?",
    "Option1": "Testing individual units of code.",
    "Option2": "Testing the overall functionality of the application based on requirements, focusing on 'what' the system does.",
    "Option3": "Testing the performance of the application.",
    "Option4": "Testing the security aspects of the application.",
    "Answer": "Testing the overall functionality of the application based on requirements, focusing on 'what' the system does."
  },
  {
    "question_no.": 184,
    "Question": "What is `System Testing`?",
    "Option1": "Testing individual modules of a software.",
    "Option2": "Testing the entire integrated system against specified requirements.",
    "Option3": "Testing only the user interface.",
    "Option4": "Testing the database components.",
    "Answer": "Testing the entire integrated system against specified requirements."
  },
  {
    "question_no.": 185,
    "Question": "What is `UAT` (User Acceptance Testing)?",
    "Option1": "Testing performed by developers to ensure code quality.",
    "Option2": "The final stage of testing where end-users verify if the system meets their business needs and requirements.",
    "Option3": "Automated testing performed by a testing tool.",
    "Option4": "Testing for performance bottlenecks.",
    "Answer": "The final stage of testing where end-users verify if the system meets their business needs and requirements."
  },
  {
    "question_no.": 186,
    "Question": "What is `JVM Tuning`?",
    "Option1": "Adjusting Java code for better performance.",
    "Option2": "Optimizing the settings and parameters of the Java Virtual Machine to improve application performance and resource utilization.",
    "Option3": "Debugging Java applications.",
    "Option4": "Compiling Java source code.",
    "Answer": "Optimizing the settings and parameters of the Java Virtual Machine to improve application performance and resource utilization."
  },
  {
    "question_no.": 187,
    "Question": "Which tool is commonly used for JVM monitoring and profiling?",
    "Option1": "Eclipse",
    "Option2": "IntelliJ IDEA",
    "Option3": "JConsole and VisualVM",
    "Option4": "Maven",
    "Answer": "JConsole and VisualVM"
  },
  {
    "question_no.": 188,
    "Question": "What is `Memory Leak` in Java?",
    "Option1": "When a program uses too much CPU.",
    "Option2": "When objects that are no longer needed are not garbage collected, leading to an accumulation of unused memory.",
    "Option3": "When data is accidentally deleted from memory.",
    "Option4": "When a program runs out of disk space.",
    "Answer": "When objects that are no longer needed are not garbage collected, leading to an accumulation of unused memory."
  },
  {
    "question_no.": 189,
    "Question": "What is `Stack Overflow Error` in Java?",
    "Option1": "Occurs when there is not enough heap memory.",
    "Option2": "Occurs when the Java Virtual Machine's stack is exhausted, usually due to excessively deep recursion.",
    "Option3": "Occurs when a network connection fails.",
    "Option4": "Occurs when a file cannot be found.",
    "Answer": "Occurs when the Java Virtual Machine's stack is exhausted, usually due to excessively deep recursion."
  },
  {
    "question_no.": 190,
    "Question": "What is `OutOfMemoryError` in Java?",
    "Option1": "Occurs when the garbage collector runs too frequently.",
    "Option2": "Occurs when the Java Virtual Machine cannot allocate an object because it is out of heap memory.",
    "Option3": "Occurs when the stack is exhausted.",
    "Option4": "Occurs when a database connection fails.",
    "Answer": "Occurs when the Java Virtual Machine cannot allocate an object because it is out of heap memory."
  },
  {
    "question_no.": 191,
    "Question": "What is `ThreadLocal` in Java?",
    "Option1": "A way to share data among all threads.",
    "Option2": "A class that provides thread-local variables, meaning that each thread that accesses a `ThreadLocal` instance has its own independently initialized copy of the variable.",
    "Option3": "A mechanism for thread synchronization.",
    "Option4": "A tool for debugging threads.",
    "Answer": "A class that provides thread-local variables, meaning that each thread that accesses a `ThreadLocal` instance has its own independently initialized copy of the variable."
  },
  {
    "question_no.": 192,
    "Question": "What is `Concurrency` in Java?",
    "Option1": "The ability to run multiple programs sequentially.",
    "Option2": "The ability to execute multiple parts of a program simultaneously or seemingly simultaneously.",
    "Option3": "The process of compiling Java code.",
    "Option4": "The art of writing clear and concise code.",
    "Answer": "The ability to execute multiple parts of a program simultaneously or seemingly simultaneously."
  },
  {
    "question_no.": 193,
    "Question": "What is `Parallelism` in Java?",
    "Option1": "A concept where multiple tasks are executed concurrently on a single core.",
    "Option2": "A concept where multiple tasks are executed simultaneously on multiple cores/processors.",
    "Option3": "A method for handling exceptions.",
    "Option4": "A way to optimize memory usage.",
    "Answer": "A concept where multiple tasks are executed simultaneously on multiple cores/processors."
  },
  {
    "question_no.": 194,
    "Question": "What is the `ExecutorService` in Java?",
    "Option1": "A database connection pool.",
    "Option2": "A higher-level API for managing and controlling threads, allowing for thread pool management.",
    "Option3": "A service for deploying Java applications.",
    "Option4": "A tool for generating Java code.",
    "Answer": "A higher-level API for managing and controlling threads, allowing for thread pool management."
  },
  {
    "question_no.": 195,
    "Question": "What is the difference between `Callable` and `Runnable` interfaces?",
    "Option1": "`Runnable` returns a value, `Callable` does not.",
    "Option2": "`Callable` returns a value and can throw checked exceptions, `Runnable` does not return a value and cannot throw checked exceptions.",
    "Option3": "They are identical.",
    "Option4": "`Runnable` is for single-threaded applications, `Callable` is for multi-threaded.",
    "Answer": "`Callable` returns a value and can throw checked exceptions, `Runnable` does not return a value and cannot throw checked exceptions."
  },
  {
    "question_no.": 196,
    "Question": "What is a `Future` object in Java concurrency?",
    "Option1": "A way to represent a future date and time.",
    "Option2": "A result of an asynchronous computation, providing methods to check if the computation is complete, wait for its completion, and retrieve the result.",
    "Option3": "A forecast of future events in a program.",
    "Option4": "A place to store future variables.",
    "Answer": "A result of an asynchronous computation, providing methods to check if the computation is complete, wait for its completion, and retrieve the result."
  },
  {
    "question_no.": 197,
    "Question": "What is `Java Reflection`?",
    "Option1": "The ability of a Java program to reflect on its own structure and behavior at runtime, allowing inspection and manipulation of classes, interfaces, fields, and methods.",
    "Option2": "A debugging technique.",
    "Option3": "A method for creating mirrored objects.",
    "Option4": "A way to prevent code from being modified.",
    "Answer": "The ability of a Java program to reflect on its own structure and behavior at runtime, allowing inspection and manipulation of classes, interfaces, fields, and methods."
  },
  {
    "question_no.": 198,
    "Question": "What is `Annotations` in Java?",
    "Option1": "Comments in Java code.",
    "Option2": "Metadata that can be added to Java code elements (classes, methods, fields, etc.) to provide additional information without affecting the program's logic.",
    "Option3": "Errors detected by the compiler.",
    "Option4": "Keywords used for controlling program flow.",
    "Answer": "Metadata that can be added to Java code elements (classes, methods, fields, etc.) to provide additional information without affecting the program's logic."
  },
  {
    "question_no.": 199,
    "Question": "What is `Garbage Collection Algorithm`?",
    "Option1": "A single, universally used algorithm in Java.",
    "Option2": "The specific algorithm used by the JVM to identify and reclaim unused memory, e.g., Mark-and-Sweep, Generational, G1.",
    "Option3": "A method for encrypting data.",
    "Option4": "A way to manage thread priorities.",
    "Answer": "The specific algorithm used by the JVM to identify and reclaim unused memory, e.g., Mark-and-Sweep, Generational, G1."
  },
  {
    "question_no.": 200,
    "Question": "What is the `permgen space` in JVM?",
    "Option1": "Part of the heap used for object data.",
    "Option2": "A memory area in the JVM (prior to Java 8) used for storing metadata about classes and methods, interned strings, etc.",
    "Option3": "A temporary storage for local variables.",
    "Option4": "A section of the native memory.",
    "Answer": "A memory area in the JVM (prior to Java 8) used for storing metadata about classes and methods, interned strings, etc."
  },
  {
    "question_no.": 201,
    "Question": "What replaced `PermGen` in Java 8?",
    "Option1": "Heap Space",
    "Option2": "Stack Space",
    "Option3": "Metaspace",
    "Option4": "Native Memory",
    "Answer": "Metaspace"
  },
  {
    "question_no.": 202,
    "Question": "What is `Metaspace` in Java 8?",
    "Option1": "A fixed-size memory area.",
    "Option2": "A dynamic memory area (part of native memory) that replaces PermGen for storing class metadata, offering better garbage collection handling.",
    "Option3": "A new region for storing objects.",
    "Option4": "A dedicated space for static variables.",
    "Answer": "A dynamic memory area (part of native memory) that replaces PermGen for storing class metadata, offering better garbage collection handling."
  },
  {
    "question_no.": 203,
    "Question": "What is `Native Memory` in Java?",
    "Option1": "Memory managed by the JVM only.",
    "Option2": "Memory directly allocated and managed by the operating system, used by the JVM for its internal operations and native libraries.",
    "Option3": "Memory exclusively for Java objects.",
    "Option4": "Memory used for temporary files.",
    "Answer": "Memory directly allocated and managed by the operating system, used by the JVM for its internal operations and native libraries."
  },
  {
    "question_no.": 204,
    "Question": "What is a `Heap Dump` in Java?",
    "Option1": "A log of all exceptions.",
    "Option2": "A snapshot of all the objects in the JVM's heap memory at a specific point in time, used for analyzing memory leaks.",
    "Option3": "A list of running threads.",
    "Option4": "A compilation report.",
    "Answer": "A snapshot of all the objects in the JVM's heap memory at a specific point in time, used for analyzing memory leaks."
  },
  {
    "question_no.": 205,
    "Question": "What is a `Thread Dump` in Java?",
    "Option1": "A snapshot of memory usage.",
    "Option2": "A snapshot of all the threads running in the JVM at a specific point in time, showing their states and stack traces, useful for diagnosing deadlocks and performance issues.",
    "Option3": "A log of network activity.",
    "Option4": "A list of loaded classes.",
    "Answer": "A snapshot of all the threads running in the JVM at a specific point in time, showing their states and stack traces, useful for diagnosing deadlocks and performance issues."
  }
]