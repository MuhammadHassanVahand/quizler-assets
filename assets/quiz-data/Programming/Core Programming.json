[
  {
    "question_no.": 1,
    "Question": "What is an algorithm?",
    "Option1": "A type of programming language.",
    "Option2": "A set of instructions for solving a problem or accomplishing a task.",
    "Option3": "A software debugging tool.",
    "Option4": "A computer hardware component.",
    "Answer": "A set of instructions for solving a problem or accomplishing a task."
  },
  {
    "question_no.": 2,
    "Question": "What is a variable in programming?",
    "Option1": "A fixed value that cannot change.",
    "Option2": "A named storage location for data that can be changed during program execution.",
    "Option3": "A predefined function.",
    "Option4": "A type of computer virus.",
    "Answer": "A named storage location for data that can be changed during program execution."
  },
  {
    "question_no.": 3,
    "Question": "Which of these is a fundamental data type?",
    "Option1": "Array",
    "Option2": "Integer",
    "Option3": "Object",
    "Option4": "List",
    "Answer": "Integer"
  },
  {
    "question_no.": 4,
    "Question": "What is a conditional statement?",
    "Option1": "A statement that performs repetitive tasks.",
    "Option2": "A statement that executes different code blocks based on whether a condition is true or false.",
    "Option3": "A statement that declares a variable.",
    "Option4": "A statement used for input only.",
    "Answer": "A statement that executes different code blocks based on whether a condition is true or false."
  },
  {
    "question_no.": 5,
    "Question": "What is a 'loop' in programming?",
    "Option1": "A type of error.",
    "Option2": "A control flow statement that allows code to be executed repeatedly based on a condition or for a specific number of times.",
    "Option3": "A function that runs only once.",
    "Option4": "A graphic design element.",
    "Answer": "A control flow statement that allows code to be executed repeatedly based on a condition or for a specific number of times."
  },
  {
    "question_no.": 6,
    "Question": "What is an array?",
    "Option1": "A single variable holding multiple different data types.",
    "Option2": "A collection of elements of the same data type, stored in contiguous memory locations.",
    "Option3": "A method for debugging code.",
    "Option4": "A type of input device.",
    "Answer": "A collection of elements of the same data type, stored in contiguous memory locations."
  },
  {
    "question_no.": 7,
    "Question": "What is a function (or subroutine)?",
    "Option1": "A global variable.",
    "Option2": "A block of organized, reusable code that performs a specific task.",
    "Option3": "A statement that defines a loop.",
    "Option4": "A type of conditional statement.",
    "Answer": "A block of organized, reusable code that performs a specific task."
  },
  {
    "question_no.": 8,
    "Question": "What is a parameter in a function?",
    "Option1": "The value returned by the function.",
    "Option2": "A variable listed in the function definition that receives a value when the function is called.",
    "Option3": "A constant value inside the function.",
    "Option4": "The name of the function.",
    "Answer": "A variable listed in the function definition that receives a value when the function is called."
  },
  {
    "question_no.": 9,
    "Question": "What is a return value?",
    "Option1": "A value that is printed to the console.",
    "Option2": "The value that a function sends back to the part of the program that called it.",
    "Option3": "A value stored in a global variable.",
    "Option4": "A value used as input to a function.",
    "Answer": "The value that a function sends back to the part of the program that called it."
  },
  {
    "question_no.": 10,
    "Question": "What is a 'compiler'?",
    "Option1": "A program that executes source code directly.",
    "Option2": "A program that translates source code written in a high-level language into machine code or another low-level language.",
    "Option3": "A tool for debugging errors.",
    "Option4": "A text editor for writing code.",
    "Answer": "A program that translates source code written in a high-level language into machine code or another low-level language."
  },
  {
    "question_no.": 11,
    "Question": "What is an 'interpreter'?",
    "Option1": "A program that converts source code to machine code before execution.",
    "Option2": "A program that executes instructions written in a high-level language directly, without requiring them to be pre-compiled.",
    "Option3": "A tool for code optimization.",
    "Option4": "A system for managing databases.",
    "Answer": "A program that executes instructions written in a high-level language directly, without requiring them to be pre-compiled."
  },
  {
    "question_no.": 12,
    "Question": "What is 'syntax' in programming?",
    "Option1": "The logical flow of a program.",
    "Option2": "The set of rules that defines how a program must be written for the compiler or interpreter to understand it.",
    "Option3": "The meaning of programming statements.",
    "Option4": "The speed at which a program runs.",
    "Answer": "The set of rules that defines how a program must be written for the compiler or interpreter to understand it."
  },
  {
    "question_no.": 13,
    "Question": "What is 'semantics' in programming?",
    "Option1": "The grammatical rules of a language.",
    "Option2": "The meaning or interpretation of programming constructs and statements.",
    "Option3": "The visual appearance of code.",
    "Option4": "The process of compiling code.",
    "Answer": "The meaning or interpretation of programming constructs and statements."
  },
  {
    "question_no.": 14,
    "Question": "What is a 'bug' in programming?",
    "Option1": "A new feature.",
    "Option2": "An error or flaw in a computer program that causes it to produce an incorrect or unexpected result, or to behave in unintended ways.",
    "Option3": "A type of output.",
    "Option4": "A hardware malfunction.",
    "Answer": "An error or flaw in a computer program that causes it to produce an incorrect or unexpected result, or to behave in unintended ways."
  },
  {
    "question_no.": 15,
    "Question": "What is 'debugging'?",
    "Option1": "Writing new code.",
    "Option2": "The process of finding and fixing errors or bugs in a computer program.",
    "Option3": "Compiling a program.",
    "Option4": "Designing user interfaces.",
    "Answer": "The process of finding and fixing errors or bugs in a computer program."
  },
  {
    "question_no.": 16,
    "Question": "What is 'pseudocode'?",
    "Option1": "Actual executable code.",
    "Option2": "An informal high-level description of the operating principle of an algorithm or other process, intended for human reading rather than machine execution.",
    "Option3": "A type of encrypted code.",
    "Option4": "Machine language.",
    "Answer": "An informal high-level description of the operating principle of an algorithm or other process, intended for human reading rather than machine execution."
  },
  {
    "question_no.": 17,
    "Question": "What is a 'flowchart'?",
    "Option1": "A textual representation of an algorithm.",
    "Option2": "A diagram that represents a workflow or process, showing the steps as boxes of various kinds and their order by connecting them with arrows.",
    "Option3": "A table of data.",
    "Option4": "A network diagram.",
    "Answer": "A diagram that represents a workflow or process, showing the steps as boxes of various kinds and their order by connecting them with arrows."
  },
  {
    "question_no.": 18,
    "Question": "What is 'source code'?",
    "Option1": "Executable program.",
    "Option2": "Code written by a programmer in a human-readable programming language.",
    "Option3": "Binary code.",
    "Option4": "Machine code.",
    "Answer": "Code written by a programmer in a human-readable programming language."
  },
  {
    "question_no.": 19,
    "Question": "What is 'machine code'?",
    "Option1": "High-level programming language.",
    "Option2": "Low-level code consisting of binary instructions that a computer's CPU can directly execute.",
    "Option3": "Pseudocode.",
    "Option4": "Source code.",
    "Answer": "Low-level code consisting of binary instructions that a computer's CPU can directly execute."
  },
  {
    "question_no.": 20,
    "Question": "What is an 'IDE' (Integrated Development Environment)?",
    "Option1": "A single-purpose text editor.",
    "Option2": "A software application that provides comprehensive facilities to computer programmers for software development, typically including a source code editor, build automation tools, and a debugger.",
    "Option3": "A type of operating system.",
    "Option4": "A network protocol.",
    "Answer": "A software application that provides comprehensive facilities to computer programmers for software development, typically including a source code editor, build automation tools, and a debugger."
  },
  {
    "question_no.": 21,
    "Question": "What is 'Boolean' data type?",
    "Option1": "A data type that stores numbers.",
    "Option2": "A data type that can have only one of two possible values: true or false.",
    "Option3": "A data type for text.",
    "Option4": "A data type for dates.",
    "Answer": "A data type that can have only one of two possible values: true or false."
  },
  {
    "question_no.": 22,
    "Question": "What is a 'string' in programming?",
    "Option1": "A numerical value.",
    "Option2": "A sequence of characters, typically used to represent text.",
    "Option3": "A type of loop.",
    "Option4": "A conditional operator.",
    "Answer": "A sequence of characters, typically used to represent text."
  },
  {
    "question_no.": 23,
    "Question": "What is 'concatenation'?",
    "Option1": "Separating strings into smaller parts.",
    "Option2": "Joining two or more strings together to form a single string.",
    "Option3": "Comparing two numbers.",
    "Option4": "Converting numbers to text.",
    "Answer": "Joining two or more strings together to form a single string."
  },
  {
    "question_no.": 24,
    "Question": "What is 'input' in programming?",
    "Option1": "Data produced by the program.",
    "Option2": "Data provided to the program from an external source (e.g., keyboard, file, network).",
    "Option3": "A type of error.",
    "Option4": "The result of a calculation.",
    "Answer": "Data provided to the program from an external source (e.g., keyboard, file, network)."
  },
  {
    "question_no.": 25,
    "Question": "What is 'output' in programming?",
    "Option1": "Data provided to the program.",
    "Option2": "Data produced by the program and displayed to the user or sent to an external destination (e.g., screen, file, printer).",
    "Option3": "A type of variable.",
    "Option4": "A debugging technique.",
    "Answer": "Data produced by the program and displayed to the user or sent to an external destination (e.g., screen, file, printer)."
  },
  {
    "question_no.": 26,
    "Question": "What is an 'operator' in programming?",
    "Option1": "A type of variable.",
    "Option2": "A symbol that tells the compiler or interpreter to perform specific mathematical, relational, or logical operations.",
    "Option3": "A function that returns no value.",
    "Option4": "A conditional statement.",
    "Answer": "A symbol that tells the compiler or interpreter to perform specific mathematical, relational, or logical operations."
  },
  {
    "question_no.": 27,
    "Question": "Which of these is an arithmetic operator?",
    "Option1": "==",
    "Option2": ">",
    "Option3": "+",
    "Option4": "&&",
    "Answer": "+"
  },
  {
    "question_no.": 28,
    "Question": "Which of these is a relational operator?",
    "Option1": "*",
    "Option2": "||",
    "Option3": "<=",
    "Option4": "=",
    "Answer": "<="
  },
  {
    "question_no.": 29,
    "Question": "Which of these is a logical operator?",
    "Option1": "/",
    "Option2": "!=",
    "Option3": "++",
    "Option4": "AND",
    "Answer": "AND"
  },
  {
    "question_no.": 30,
    "Question": "What is 'comments' in code?",
    "Option1": "Executable statements.",
    "Option2": "Non-executable lines of text in source code that are ignored by the compiler/interpreter, used to explain the code for human readers.",
    "Option3": "Syntax errors.",
    "Option4": "Input from the user.",
    "Answer": "Non-executable lines of text in source code that are ignored by the compiler/interpreter, used to explain the code for human readers."
  },
  {
    "question_no.": 31,
    "Question": "What is 'scope' in programming?",
    "Option1": "The size of a program.",
    "Option2": "The region of a program where a declared variable or other identifier can be accessed.",
    "Option3": "The speed of execution.",
    "Option4": "The number of functions in a program.",
    "Answer": "The region of a program where a declared variable or other identifier can be accessed."
  },
  {
    "question_no.": 32,
    "Question": "What is a 'global variable'?",
    "Option1": "A variable accessible only within a function.",
    "Option2": "A variable declared outside of any function and accessible from anywhere in the program.",
    "Option3": "A variable that can only store numbers.",
    "Option4": "A variable that is constant.",
    "Answer": "A variable declared outside of any function and accessible from anywhere in the program."
  },
  {
    "question_no.": 33,
    "Question": "What is a 'local variable'?",
    "Option1": "A variable accessible from anywhere in the program.",
    "Option2": "A variable declared inside a function or block, and only accessible within that function or block.",
    "Option3": "A variable that is always constant.",
    "Option4": "A variable that stores only text.",
    "Answer": "A variable declared inside a function or block, and only accessible within that function or block."
  },
  {
    "question_no.": 34,
    "Question": "What is 'modulus operator' (%) used for?",
    "Option1": "Multiplication.",
    "Option2": "Division.",
    "Option3": "Returning the remainder of a division operation.",
    "Option4": "Exponentiation.",
    "Answer": "Returning the remainder of a division operation."
  },
  {
    "question_no.": 35,
    "Question": "What is 'type casting'?",
    "Option1": "Declaring a new data type.",
    "Option2": "Converting a value from one data type to another.",
    "Option3": "Comparing two different data types.",
    "Option4": "Creating a variable.",
    "Answer": "Converting a value from one data type to another."
  },
  {
    "question_no.": 36,
    "Question": "What is 'recursion' in programming?",
    "Option1": "A function that runs only once.",
    "Option2": "A technique where a function calls itself directly or indirectly to solve a problem.",
    "Option3": "A loop that never ends.",
    "Option4": "A method for printing output.",
    "Answer": "A technique where a function calls itself directly or indirectly to solve a problem."
  },
  {
    "question_no.": 37,
    "Question": "What is the 'base case' in recursion?",
    "Option1": "The condition that makes the recursive function call itself.",
    "Option2": "The condition that stops the recursion and provides a direct solution.",
    "Option3": "The first step of any recursive function.",
    "4": "An error condition.",
    "Answer": "The condition that stops the recursion and provides a direct solution."
  },
  {
    "question_no.": 38,
    "Question": "What is 'iteration'?",
    "Option1": "Solving a problem by a function calling itself.",
    "Option2": "Repeating a sequence of instructions a specific number of times or until a condition is met, typically using loops.",
    "Option3": "Defining a new data type.",
    "4": "A method for inputting data.",
    "Answer": "Repeating a sequence of instructions a specific number of times or until a condition is met, typically using loops."
  },
  {
    "question_no.": 39,
    "Question": "What is 'data structure'?",
    "Option1": "A programming language.",
    "Option2": "A way of organizing and storing data in a computer so that it can be accessed and modified efficiently.",
    "Option3": "A type of compiler.",
    "4": "A debugging tool.",
    "Answer": "A way of organizing and storing data in a computer so that it can be accessed and modified efficiently."
  },
  {
    "question_no.": 40,
    "Question": "Which of these is a linear data structure?",
    "Option1": "Tree",
    "Option2": "Graph",
    "Option3": "Linked List",
    "4": "Hash Table",
    "Answer": "Linked List"
  },
  {
    "question_no.": 41,
    "Question": "Which of these is a non-linear data structure?",
    "Option1": "Array",
    "Option2": "Queue",
    "Option3": "Binary Tree",
    "4": "Stack",
    "Answer": "Binary Tree"
  },
  {
    "question_no.": 42,
    "Question": "What is a 'stack' data structure?",
    "Option1": "First-In, First-Out (FIFO).",
    "Option2": "Last-In, First-Out (LIFO).",
    "Option3": "Random access.",
    "4": "First-In, Last-Out (FILO).",
    "Answer": "Last-In, First-Out (LIFO)."
  },
  {
    "question_no.": 43,
    "Question": "What is a 'queue' data structure?",
    "Option1": "Last-In, First-Out (LIFO).",
    "Option2": "First-In, First-Out (FIFO).",
    "Option3": "Random access.",
    "4": "Elements can be accessed from anywhere.",
    "Answer": "First-In, First-Out (FIFO)."
  },
  {
    "question_no.": 44,
    "Question": "What is a 'linked list'?",
    "Option1": "A fixed-size collection of elements.",
    "Option2": "A linear data structure where elements are not stored at contiguous memory locations, but are linked using pointers or references.",
    "Option3": "A collection of key-value pairs.",
    "4": "A type of array.",
    "Answer": "A linear data structure where elements are not stored at contiguous memory locations, but are linked using pointers or references."
  },
  {
    "question_no.": 45,
    "Question": "What is a 'tree' data structure?",
    "Option1": "A linear data structure.",
    "Option2": "A non-linear data structure that simulates a hierarchical tree structure, with a root value and subtrees of children, represented as a set of linked nodes.",
    "Option3": "A collection of unsorted data.",
    "4": "A structure for storing only numbers.",
    "Answer": "A non-linear data structure that simulates a hierarchical tree structure, with a root value and subtrees of children, represented as a set of linked nodes."
  },
  {
    "question_no.": 46,
    "Question": "What is 'binary tree'?",
    "Option1": "A tree where each node can have any number of children.",
    "Option2": "A tree data structure where each node has at most two children, referred to as the left child and the right child.",
    "Option3": "A tree that only stores binary values.",
    "4": "A tree with no root node.",
    "Answer": "A tree data structure where each node has at most two children, referred to as the left child and the right child."
  },
  {
    "question_no.": 47,
    "Question": "What is 'graph' data structure?",
    "Option1": "A hierarchical data structure.",
    "Option2": "A non-linear data structure consisting of a finite set of vertices (or nodes) and a set of edges connecting pairs of vertices.",
    "Option3": "A linear collection of elements.",
    "4": "A data structure for storing images.",
    "Answer": "A non-linear data structure consisting of a finite set of vertices (or nodes) and a set of edges connecting pairs of vertices."
  },
  {
    "question_no.": 48,
    "Question": "What is 'hash table'?",
    "Option1": "A data structure that stores elements in sorted order.",
    "Option2": "A data structure that implements an associative array (map) abstract data type, mapping keys to values using a hash function to compute an index into an array of buckets or slots.",
    "Option3": "A table for mathematical calculations.",
    "4": "A fixed-size array.",
    "Answer": "A data structure that implements an associative array (map) abstract data type, mapping keys to values using a hash function to compute an index into an array of buckets or slots."
  },
  {
    "question_no.": 49,
    "Question": "What is 'time complexity' of an algorithm?",
    "Option1": "The amount of memory an algorithm uses.",
    "Option2": "A measure of the amount of time taken by an algorithm to run as a function of the length of its input.",
    "Option3": "The readability of the code.",
    "4": "The number of lines of code.",
    "Answer": "A measure of the amount of time taken by an algorithm to run as a function of the length of its input."
  },
  {
    "question_no.": 50,
    "Question": "What is 'space complexity' of an algorithm?",
    "Option1": "The time it takes to execute.",
    "Option2": "A measure of the amount of memory an algorithm needs to run as a function of the length of its input.",
    "Option3": "The simplicity of the algorithm.",
    "4": "The number of developers working on the algorithm.",
    "Answer": "A measure of the amount of memory an algorithm needs to run as a function of the length of its input."
  },
  {
    "question_no.": 51,
    "Question": "What does 'Big O Notation' describe?",
    "Option1": "The exact running time of an algorithm.",
    "Option2": "The upper bound or worst-case complexity of an algorithm, indicating how its runtime or space requirements grow with input size.",
    "Option3": "The average case performance.",
    "4": "The best-case performance.",
    "Answer": "The upper bound or worst-case complexity of an algorithm, indicating how its runtime or space requirements grow with input size."
  },
  {
    "question_no.": 52,
    "Question": "What does O(1) time complexity mean?",
    "Option1": "Linear time.",
    "Option2": "Constant time, meaning the execution time remains constant regardless of the input size.",
    "Option3": "Logarithmic time.",
    "4": "Quadratic time.",
    "Answer": "Constant time, meaning the execution time remains constant regardless of the input size."
  },
  {
    "question_no.": 53,
    "Question": "What does O(n) time complexity mean?",
    "Option1": "Constant time.",
    "Option2": "Linear time, meaning the execution time grows proportionally with the input size.",
    "Option3": "Quadratic time.",
    "4": "Exponential time.",
    "Answer": "Linear time, meaning the execution time grows proportionally with the input size."
  },
  {
    "question_no.": 54,
    "Question": "What does O(n^2) time complexity mean?",
    "Option1": "Logarithmic time.",
    "Option2": "Quadratic time, meaning the execution time grows proportionally to the square of the input size.",
    "Option3": "Linear time.",
    "4": "Constant time.",
    "Answer": "Quadratic time, meaning the execution time grows proportionally to the square of the input size."
  },
  {
    "question_no.": 55,
    "Question": "What is 'searching' algorithm?",
    "Option1": "An algorithm to sort elements.",
    "Option2": "An algorithm to find a specific item within a collection of items.",
    "Option3": "An algorithm to insert elements.",
    "4": "An algorithm to delete elements.",
    "Answer": "An algorithm to find a specific item within a collection of items."
  },
  {
    "question_no.": 56,
    "Question": "What is 'sorting' algorithm?",
    "Option1": "An algorithm to find elements.",
    "Option2": "An algorithm that puts elements of a list in a certain order.",
    "Option3": "An algorithm to generate random numbers.",
    "4": "An algorithm to encrypt data.",
    "Answer": "An algorithm that puts elements of a list in a certain order."
  },
  {
    "question_no.": 57,
    "Question": "What is 'Bubble Sort'?",
    "Option1": "A very efficient sorting algorithm.",
    "Option2": "A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.",
    "Option3": "A search algorithm.",
    "4": "An algorithm for data compression.",
    "Answer": "A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order."
  },
  {
    "question_no.": 58,
    "Question": "What is 'Merge Sort'?",
    "Option1": "A sorting algorithm that works by repeatedly swapping elements.",
    "Option2": "A divide-and-conquer sorting algorithm that divides the unsorted list into n sublists, each containing one element, and then repeatedly merges sublists to produce new sorted sublists until there is only one sorted list remaining.",
    "Option3": "A searching algorithm.",
    "4": "A simple sorting algorithm for small lists.",
    "Answer": "A divide-and-conquer sorting algorithm that divides the unsorted list into n sublists, each containing one element, and then repeatedly merges sublists to produce new sorted sublists until there is only one sorted list remaining."
  },
  {
    "question_no.": 59,
    "Question": "What is 'Quick Sort'?",
    "Option1": "A linear search algorithm.",
    "Option2": "A highly efficient, divide-and-conquer sorting algorithm that picks an element as a pivot and partitions the array around the picked pivot.",
    "Option3": "A simple insertion algorithm.",
    "4": "A sorting algorithm for linked lists only.",
    "Answer": "A highly efficient, divide-and-conquer sorting algorithm that picks an element as a pivot and partitions the array around the picked pivot."
  },
  {
    "question_no.": 60,
    "Question": "What is 'Binary Search'?",
    "Option1": "A search algorithm for unsorted lists.",
    "Option2": "A highly efficient search algorithm that works on sorted arrays by repeatedly dividing the search interval in half.",
    "Option3": "A sorting algorithm.",
    "4": "An algorithm for finding duplicates.",
    "Answer": "A highly efficient search algorithm that works on sorted arrays by repeatedly dividing the search interval in half."
  },
  {
    "question_no.": 61,
    "Question": "What is 'Linear Search'?",
    "Option1": "A search algorithm for sorted lists only.",
    "Option2": "A simple search algorithm that sequentially checks each element of the list until a match is found or the whole list has been searched.",
    "Option3": "A sorting algorithm.",
    "4": "An algorithm that requires a pivot element.",
    "Answer": "A simple search algorithm that sequentially checks each element of the list until a match is found or the whole list has been searched."
  },
  {
    "question_no.": 62,
    "Question": "What is 'Object-Oriented Programming (OOP)'?",
    "Option1": "A programming paradigm based on procedural calls.",
    "Option2": "A programming paradigm based on the concept of 'objects', which can contain data and code to manipulate that data.",
    "Option3": "A programming paradigm focused on mathematical functions.",
    "4": "A programming paradigm that uses only global variables.",
    "Answer": "A programming paradigm based on the concept of 'objects', which can contain data and code to manipulate that data."
  },
  {
    "question_no.": 63,
    "Question": "What is 'class' in OOP?",
    "Option1": "A physical object.",
    "Option2": "A blueprint or template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions).",
    "Option3": "A type of variable.",
    "4": "A function that returns a value.",
    "Answer": "A blueprint or template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions)."
  },
  {
    "question_no.": 64,
    "Question": "What is 'object' in OOP?",
    "Option1": "A blueprint for a class.",
    "Option2": "An instance of a class, representing a real-world entity with its own state and behavior.",
    "Option3": "A function definition.",
    "4": "A type of data structure.",
    "Answer": "An instance of a class, representing a real-world entity with its own state and behavior."
  },
  {
    "question_no.": 65,
    "Question": "What is 'Encapsulation' in OOP?",
    "Option1": "Making all data public.",
    "Option2": "Bundling data (attributes) and methods (functions) that operate on the data into a single unit (class) and restricting direct access to some of the object's components.",
    "Option3": "Allowing direct access to all internal data.",
    "4": "Inheriting properties from other classes.",
    "Answer": "Bundling data (attributes) and methods (functions) that operate on the data into a single unit (class) and restricting direct access to some of the object's components."
  },
  {
    "question_no.": 66,
    "Question": "What is 'Inheritance' in OOP?",
    "Option1": "Hiding implementation details.",
    "Option2": "A mechanism by which one class acquires the properties and behaviors of another class, promoting code reusability.",
    "Option3": "Defining multiple methods with the same name.",
    "4": "Creating multiple instances of a class.",
    "Answer": "A mechanism by which one class acquires the properties and behaviors of another class, promoting code reusability."
  },
  {
    "question_no.": 67,
    "Question": "What is 'Polymorphism' in OOP?",
    "Option1": "The ability to hide data.",
    "Option2": "The ability of an object to take on many forms, allowing objects of different classes to be treated as objects of a common type.",
    "Option3": "The process of combining data and functions.",
    "4": "The ability to reuse code without modification.",
    "Answer": "The ability of an object to take on many forms, allowing objects of different classes to be treated as objects of a common type."
  },
  {
    "question_no.": 68,
    "Question": "What is 'Abstraction' in OOP?",
    "Option1": "Showing all the complex details of implementation.",
    "Option2": "Hiding the complex implementation details and showing only the essential features of an object or system.",
    "Option3": "Creating multiple objects of a class.",
    "4": "Inheriting from multiple classes.",
    "Answer": "Hiding the complex implementation details and showing only the essential features of an object or system."
  },
  {
    "question_no.": 69,
    "Question": "What is 'constructor' in a class?",
    "Option1": "A function that destroys an object.",
    "Option2": "A special member function that is automatically called when an object of the class is created, used to initialize the object's state.",
    "Option3": "A regular member function.",
    "4": "A function that modifies an object's state.",
    "Answer": "A special member function that is automatically called when an object of the class is created, used to initialize the object's state."
  },
  {
    "question_no.": 70,
    "Question": "What is 'destructor' in a class?",
    "Option1": "A function that initializes an object.",
    "Option2": "A special member function that is automatically called when an object is about to be destroyed, used to release resources held by the object.",
    "Option3": "A function that creates new objects.",
    "4": "A function that copies objects.",
    "Answer": "A special member function that is automatically called when an object is about to be destroyed, used to release resources held by the object."
  },
  {
    "question_no.": 71,
    "Question": "What is 'Method Overloading'?",
    "Option1": "Defining multiple methods with different names.",
    "Option2": "Defining multiple methods within the same class that have the same name but different parameters (number, type, or order).",
    "Option3": "Overwriting a method from a base class.",
    "4": "Calling a method too many times.",
    "Answer": "Defining multiple methods within the same class that have the same name but different parameters (number, type, or order)."
  },
  {
    "question_no.": 72,
    "Question": "What is 'Method Overriding'?",
    "Option1": "Defining a method with the same name but different parameters in the same class.",
    "Option2": "Providing a new implementation for a method in a derived class that is already defined in its base class (only applies to virtual methods in C++/Java).",
    "Option3": "Creating multiple copies of a method.",
    "4": "A method that cannot be called.",
    "Answer": "Providing a new implementation for a method in a derived class that is already defined in its base class (only applies to virtual methods in C++/Java)."
  },
  {
    "question_no.": 73,
    "Question": "What is 'Virtual Function' (in C++/Java)?",
    "Option1": "A function that is never executed.",
    "Option2": "A member function declared in a base class that can be redefined (overridden) by a derived class, enabling runtime polymorphism.",
    "Option3": "A static function.",
    "4": "A function that only exists in theory.",
    "Answer": "A member function declared in a base class that can be redefined (overridden) by a derived class, enabling runtime polymorphism."
  },
  {
    "question_no.": 74,
    "Question": "What is an 'Abstract Class'?",
    "Option1": "A class that can be instantiated directly.",
    "Option2": "A class that cannot be instantiated directly and often contains one or more abstract methods (or pure virtual functions in C++), intended to be inherited by other classes.",
    "Option3": "A class with no methods.",
    "4": "A class with only static members.",
    "Answer": "A class that cannot be instantiated directly and often contains one or more abstract methods (or pure virtual functions in C++), intended to be inherited by other classes."
  },
  {
    "question_no.": 75,
    "Question": "What is an 'Interface'?",
    "Option1": "A class with full method implementations.",
    "Option2": "A blueprint of a class that defines a set of methods that a class must implement, without providing any implementation details (all methods are abstract).",
    "Option3": "A data structure.",
    "4": "A type of variable.",
    "Answer": "A blueprint of a class that defines a set of methods that a class must implement, without providing any implementation details (all methods are abstract)."
  },
  {
    "question_no.": 76,
    "Question": "What is 'Composition' in programming?",
    "Option1": "A form of inheritance.",
    "Option2": "A design principle where a class contains objects of other classes as member variables, indicating a 'has-a' relationship.",
    "Option3": "A method for merging code.",
    "4": "A technique for flattening class hierarchies.",
    "Answer": "A design principle where a class contains objects of other classes as member variables, indicating a 'has-a' relationship."
  },
  {
    "question_no.": 77,
    "Question": "What is 'Aggregation'?",
    "Option1": "A strong form of composition.",
    "Option2": "A form of association that represents a 'has-a' relationship where the contained object can exist independently of the container object.",
    "Option3": "A type of inheritance.",
    "4": "A method for destroying objects.",
    "Answer": "A form of association that represents a 'has-a' relationship where the contained object can exist independently of the container object."
  },
  {
    "question_no.": 78,
    "Question": "What is a 'pointer'?",
    "Option1": "A variable that stores a value.",
    "Option2": "A variable that stores the memory address of another variable.",
    "Option3": "A type of constant.",
    "4": "A keyword for declaring functions.",
    "Answer": "A variable that stores the memory address of another variable."
  },
  {
    "question_no.": 79,
    "Question": "What is 'dereferencing a pointer'?",
    "Option1": "Assigning a new address to a pointer.",
    "Option2": "Accessing the value stored at the memory address pointed to by a pointer.",
    "Option3": "Deleting a pointer.",
    "4": "Declaring a pointer.",
    "Answer": "Accessing the value stored at the memory address pointed to by a pointer."
  },
  {
    "question_no.": 80,
    "Question": "What is 'memory leak'?",
    "Option1": "When memory is used efficiently.",
    "Option2": "A defect where a program fails to release memory that it has allocated, leading to a gradual reduction in available memory.",
    "Option3": "When memory is overwritten.",
    "4": "When memory is allocated on the stack.",
    "Answer": "A defect where a program fails to release memory that it has allocated, leading to a gradual reduction in available memory."
  },
  {
    "question_no. 81": {
    "Question": "What is a 'data type'?",
    "Option1": "A keyword used for loops.",
    "Option2": "A classification of data that specifies what kind of value a variable can hold (e.g., integer, string, boolean).",
    "Option3": "A method for inputting data.",
    "Option4": "A debugging technique.",
    "Answer": "A classification of data that specifies what kind of value a variable can hold (e.g., integer, string, boolean)."
    }
  },
  {
    "question_no.": 82,
    "Question": "What is a 'constant' in programming?",
    "Option1": "A value that can be changed during program execution.",
    "Option2": "A named storage location for data whose value cannot be changed after initialization.",
    "Option3": "A function that returns a dynamic value.",
    "Option4": "A type of variable that stores only text.",
    "Answer": "A named storage location for data whose value cannot be changed after initialization."
  },
  {
    "question_no.": 83,
    "Question": "What is 'pass by value' for function arguments?",
    "Option1": "Passing the memory address of the argument.",
    "Option2": "Passing a copy of the argument's value to the function; changes to the parameter inside the function do not affect the original argument.",
    "Option3": "Passing a reference to the argument.",
    "Option4": "Passing a global variable.",
    "Answer": "Passing a copy of the argument's value to the function; changes to the parameter inside the function do not affect the original argument."
  },
  {
    "question_no.": 84,
    "Question": "What is 'pass by reference' for function arguments?",
    "Option1": "Passing a copy of the argument.",
    "Option2": "Passing the memory address of the argument, allowing the function to directly access and modify the original argument.",
    "Option3": "Passing a constant value.",
    "Option4": "Passing a temporary variable.",
    "Answer": "Passing the memory address of the argument, allowing the function to directly access and modify the original argument."
  },
  {
    "question_no.": 85,
    "Question": "What is 'recursion limit'?",
    "Option1": "The maximum number of times a loop can run.",
    "Option2": "The maximum depth of recursive calls that a program can make before encountering a stack overflow error.",
    "Option3": "The maximum number of parameters a function can take.",
    "Option4": "The limit on the size of an array.",
    "Answer": "The maximum depth of recursive calls that a program can make before encountering a stack overflow error."
  },
  {
    "question_no.": 86,
    "Question": "What is 'runtime error'?",
    "Option1": "An error detected by the compiler before execution.",
    "Option2": "An error that occurs during the execution of a program, typically causing the program to terminate abnormally.",
    "Option3": "A logical error that doesn't cause a crash.",
    "Option4": "An error in the syntax of the code.",
    "Answer": "An error that occurs during the execution of a program, typically causing the program to terminate abnormally."
  },
  {
    "question_no.": 87,
    "Question": "What is 'compile-time error'?",
    "Option1": "An error that occurs during program execution.",
    "Option2": "An error detected by the compiler before the program can be successfully compiled, often due to syntax mistakes or type mismatches.",
    "Option3": "An error that only affects memory.",
    "4": "An error that causes a program to crash silently.",
    "Answer": "An error detected by the compiler before the program can be successfully compiled, often due to syntax mistakes or type mismatches."
  },
  {
    "question_no.": 88,
    "Question": "What is 'logical error'?",
    "Option1": "An error that prevents the program from compiling.",
    "Option2": "An error in the program's logic that causes it to produce incorrect or unexpected output, but does not cause a crash.",
    "Option3": "An error related to hardware.",
    "4": "An error that is always caught by the compiler.",
    "Answer": "An error in the program's logic that causes it to produce incorrect or unexpected output, but does not cause a crash."
  },
  {
    "question_no.": 89,
    "Question": "What is 'debugging tools'?",
    "Option1": "Tools for writing code.",
    "Option2": "Software programs that help programmers find and fix errors in their code by allowing them to step through the code, inspect variables, and set breakpoints.",
    "Option3": "Tools for code optimization.",
    "4": "Tools for deploying software.",
    "Answer": "Software programs that help programmers find and fix errors in their code by allowing them to step through the code, inspect variables, and set breakpoints."
  },
  {
    "question_no.": 90,
    "Question": "What is 'break point' in debugging?",
    "Option1": "A line of code that causes an error.",
    "Option2": "An intentional stopping point or pause in a program set for debugging purposes, allowing the programmer to inspect the program's state.",
    "Option3": "A statement that ends a loop.",
    "4": "A point where the program crashes.",
    "Answer": "An intentional stopping point or pause in a program set for debugging purposes, allowing the programmer to inspect the program's state."
  },
  {
    "question_no.": 91,
    "Question": "What is 'step-by-step execution' in debugging?",
    "Option1": "Running the entire program at once.",
    "Option2": "Executing the program one line or one instruction at a time to observe its behavior and variable values.",
    "Option3": "Skipping parts of the code.",
    "4": "Executing tests automatically.",
    "Answer": "Executing the program one line or one instruction at a time to observe its behavior and variable values."
  },
  {
    "question_no.": 92,
    "Question": "What is 'stack trace'?",
    "Option1": "A list of all variables in a program.",
    "Option2": "A report that shows the sequence of function calls that led to a particular point in the program's execution, often used to pinpoint the source of an error.",
    "Option3": "A record of memory usage.",
    "4": "A log of user inputs.",
    "Answer": "A report that shows the sequence of function calls that led to a particular point in the program's execution, often used to pinpoint the source of an error."
  },
  {
    "question_no.": 93,
    "Question": "What is 'unit testing'?",
    "Option1": "Testing the entire system as a whole.",
    "Option2": "Testing individual components or modules of a software application in isolation to ensure they function correctly.",
    "Option3": "Testing user interfaces.",
    "4": "Testing performance under load.",
    "Answer": "Testing individual components or modules of a software application in isolation to ensure they function correctly."
  },
  {
    "question_no.": 94,
    "Question": "What is 'integration testing'?",
    "Option1": "Testing individual units.",
    "Option2": "Testing the interfaces and interactions between integrated software components to detect faults in their interaction.",
    "Option3": "Testing the user's experience.",
    "4": "Testing only the database.",
    "Answer": "Testing the interfaces and interactions between integrated software components to detect faults in their interaction."
  },
  {
    "question_no.": 95,
    "Question": "What is 'version control system' (VCS)?",
    "Option1": "A tool for running programs.",
    "Option2": "A system that manages changes to documents, computer programs, large web sites, and other collections of information.",
    "Option3": "A system for managing hardware.",
    "4": "A system for network monitoring.",
    "Answer": "A system that manages changes to documents, computer programs, large web sites, and other collections of information."
  },
  {
    "question_no.": 96,
    "Question": "What is 'Git'?",
    "Option1": "A popular integrated development environment.",
    "Option2": "A distributed version control system for tracking changes in source code during software development.",
    "Option3": "A programming language.",
    "4": "A database management system.",
    "Answer": "A distributed version control system for tracking changes in source code during software development."
  },
  {
    "question_no.": 97,
    "Question": "What is a 'repository' in Git?",
    "Option1": "A single file containing all the code.",
    "Option2": "A directory where all the files of your project are stored along with their complete version history.",
    "Option3": "A temporary storage area.",
    "4": "A compiled executable.",
    "Answer": "A directory where all the files of your project are stored along with their complete version history."
  },
  {
    "question_no.": 98,
    "Question": "What is a 'commit' in Git?",
    "Option1": "A temporary change that is not saved.",
    "Option2": "A snapshot of your repository at a specific point in time, saving all changes made since the last commit.",
    "Option3": "A new branch.",
    "4": "A command to delete files.",
    "Answer": "A snapshot of your repository at a specific point in time, saving all changes made since the last commit."
  },
  {
    "question_no.": 99,
    "Question": "What is a 'branch' in Git?",
    "Option1": "A fixed version of the code.",
    "Option2": "A lightweight, movable pointer to a commit, used to diverge from the main line of development and work on new features or bug fixes independently.",
    "Option3": "A tag for a release.",
    "4": "A copy of the entire repository on a different server.",
    "Answer": "A lightweight, movable pointer to a commit, used to diverge from the main line of development and work on new features or bug fixes independently."
  },
  {
    "question_no.": 100,
    "Question": "What is 'merging' in Git?",
    "Option1": "Undoing changes in the repository.",
    "Option2": "The process of combining changes from one branch into another, creating a new merge commit.",
    "Option3": "Deleting a branch.",
    "4": "Creating a new repository.",
    "Answer": "The process of combining changes from one branch into another, creating a new merge commit."
  },
  {
    "question_no.": 101,
    "Question": "What is 'refactoring'?",
    "Option1": "Adding new features to existing code.",
    "Option2": "Restructuring existing computer code without changing its external behavior, in order to improve its readability, maintainability, or efficiency.",
    "Option3": "Translating code to another language.",
    "4": "Debugging errors in code.",
    "Answer": "Restructuring existing computer code without changing its external behavior, in order to improve its readability, maintainability, or efficiency."
  },
  {
    "question_no.": 102,
    "Question": "What is 'API' (Application Programming Interface)?",
    "Option1": "A complete program.",
    "Option2": "A set of definitions and protocols for building and integrating application software, specifying how software components should interact.",
    "Option3": "A type of hardware.",
    "4": "A user interface.",
    "Answer": "A set of definitions and protocols for building and integrating application software, specifying how software components should interact."
  },
  {
    "question_no.": 103,
    "Question": "What is 'library' in programming?",
    "Option1": "A collection of unrelated functions.",
    "Option2": "A collection of pre-written functions, routines, classes, or data structures that can be reused in a program to perform specific tasks.",
    "Option3": "A place to store physical books.",
    "4": "A type of hardware.",
    "Answer": "A collection of pre-written functions, routines, classes, or data structures that can be reused in a program to perform specific tasks."
  },
  {
    "question_no.": 104,
    "Question": "What is 'framework' in programming?",
    "Option1": "A simple function.",
    "Option2": "A standardized set of concepts, practices, and criteria for solving a recurring problem, providing a basic structure and often a set of libraries and tools.",
    "Option3": "A standalone executable program.",
    "4": "A data type.",
    "Answer": "A standardized set of concepts, practices, and criteria for solving a recurring problem, providing a basic structure and often a set of libraries and tools."
  },
  {
    "question_no.": 105,
    "Question": "What is 'IDE debugging features'?",
    "Option1": "Features for writing code only.",
    "Option2": "Tools within an IDE like breakpoints, step-by-step execution, variable inspection, and call stack viewing to help diagnose and fix errors.",
    "Option3": "Features for compiling code.",
    "4": "Features for designing user interfaces.",
    "Answer": "Tools within an IDE like breakpoints, step-by-step execution, variable inspection, and call stack viewing to help diagnose and fix errors."
  },
  {
    "question_no.": 106,
    "Question": "What is 'standard library'?",
    "Option1": "A library created by individual developers.",
    "Option2": "A collection of pre-defined functions and objects that are part of the core definition of a programming language, typically shipped with the compiler/interpreter.",
    "Option3": "A library for specific domains only.",
    "4": "A library for network communication.",
    "Answer": "A collection of pre-defined functions and objects that are part of the core definition of a programming language, typically shipped with the compiler/interpreter."
  },
  {
    "question_no.": 107,
    "Question": "What is 'exception handling'?",
    "Option1": "Ignoring all errors.",
    "Option2": "A mechanism to handle runtime errors or exceptional conditions gracefully, separating error-handling code from normal program logic.",
    "Option3": "A method for preventing bugs.",
    "4": "A way to optimize code.",
    "Answer": "A mechanism to handle runtime errors or exceptional conditions gracefully, separating error-handling code from normal program logic."
  },
  {
    "question_no.": 108,
    "Question": "What is 'try-catch block' used for?",
    "Option1": "Defining a new function.",
    "Option2": "Implementing exception handling, where the 'try' block contains code that might throw an exception, and the 'catch' block handles specific exceptions.",
    "Option3": "Creating loops.",
    "4": "Declaring variables.",
    "Answer": "Implementing exception handling, where the 'try' block contains code that might throw an exception, and the 'catch' block handles specific exceptions."
  },
  {
    "question_no.": 109,
    "Question": "What is 'throw' keyword used for in exception handling?",
    "Option1": "To catch an exception.",
    "Option2": "To signal that an error or exceptional condition has occurred, interrupting normal program flow.",
    "Option3": "To ignore an exception.",
    "4": "To define a new data type.",
    "Answer": "To signal that an error or exceptional condition has occurred, interrupting normal program flow."
  },
  {
    "question_no.": 110,
    "Question": "What is 'abstraction' in general programming concepts?",
    "Option1": "Showing all complex details.",
    "Option2": "Simplifying complex reality by modeling classes appropriate to the problem and working with higher-level concepts without focusing on low-level implementation.",
    "Option3": "Duplicating code for different functionalities.",
    "4": "Making code more verbose.",
    "Answer": "Simplifying complex reality by modeling classes appropriate to the problem and working with higher-level concepts without focusing on low-level implementation."
  },
  {
    "question_no.": 111,
    "Question": "What is 'modular programming'?",
    "Option1": "Writing all code in a single file.",
    "Option2": "A software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules.",
    "Option3": "Programming without using functions.",
    "4": "A technique for making code less organized.",
    "Answer": "A software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules."
  },
  {
    "question_no.": 112,
    "Question": "What is a 'module' in programming?",
    "Option1": "A single line of code.",
    "Option2": "A separate, self-contained unit of code that performs a specific task and can be independently developed, compiled, and deployed.",
    "Option3": "A type of variable.",
    "4": "A runtime error.",
    "Answer": "A separate, self-contained unit of code that performs a specific task and can be independently developed, compiled, and deployed."
  },
  {
    "question_no.": 113,
    "Question": "What is 'divide and conquer' algorithm strategy?",
    "Option1": "Solving a problem by breaking it into smaller, overlapping subproblems.",
    "Option2": "A problem-solving paradigm that involves breaking a problem into smaller subproblems of the same type, solving them recursively, and then combining their solutions.",
    "Option3": "Solving problems by iterating through all possible solutions.",
    "4": "Solving problems without using functions.",
    "Answer": "A problem-solving paradigm that involves breaking a problem into smaller subproblems of the same type, solving them recursively, and then combining their solutions."
  },
  {
    "question_no.": 114,
    "Question": "What is 'dynamic programming'?",
    "Option1": "A method for solving problems that only requires constant memory.",
    "Option2": "A method for solving complex problems by breaking them down into simpler subproblems and storing the results of subproblems to avoid recomputing them.",
    "Option3": "A programming technique for creating animations.",
    "4": "A technique for writing recursive functions without a base case.",
    "Answer": "A method for solving complex problems by breaking them down into simpler subproblems and storing the results of subproblems to avoid recomputing them."
  },
  {
    "question_no.": 115,
    "Question": "What is 'greedy algorithm'?",
    "Option1": "An algorithm that always finds the optimal global solution.",
    "Option2": "An algorithmic paradigm that builds up a solution piece by piece, always choosing the next piece that offers the most immediate benefit without considering the overall optimal solution.",
    "Option3": "An algorithm for sorting data.",
    "4": "An algorithm that uses recursion.",
    "Answer": "An algorithmic paradigm that builds up a solution piece by piece, always choosing the next piece that offers the most immediate benefit without considering the overall optimal solution."
  },
  {
    "question_no.": 116,
    "Question": "What is 'backtracking' algorithm?",
    "Option1": "An algorithm that explores all possible paths simultaneously.",
    "Option2": "A general algorithmic technique that tries to build a solution incrementally, and if a solution path is found to be invalid, it 'backtracks' to undo the last step and try another path.",
    "Option3": "An algorithm that always goes forward.",
    "4": "An algorithm for searching in sorted arrays.",
    "Answer": "A general algorithmic technique that tries to build a solution incrementally, and if a solution path is found to be invalid, it 'backtracks' to undo the last step and try another path."
  },
  {
    "question_no.": 117,
    "Question": "What is 'time-space trade-off'?",
    "Option1": "Always preferring faster execution over less memory usage.",
    "Option2": "A situation where an algorithm can be optimized either for faster execution (time) or for lower memory consumption (space), but not always both simultaneously.",
    "Option3": "Always preferring less memory usage over faster execution.",
    "4": "A concept related to network bandwidth.",
    "Answer": "A situation where an algorithm can be optimized either for faster execution (time) or for lower memory consumption (space), but not always both simultaneously."
  },
  {
    "question_no.": 118,
    "Question": "What is 'robustness' in software?",
    "Option1": "The speed of execution.",
    "Option2": "The ability of a computer system to cope with errors during execution and cope with erroneous input.",
    "Option3": "The aesthetic appeal of the software.",
    "4": "The size of the software.",
    "Answer": "The ability of a computer system to cope with errors during execution and cope with erroneous input."
  },
  {
    "question_no.": 119,
    "Question": "What is 'scalability' in software?",
    "Option1": "The ability of a system to quickly shut down.",
    "Option2": "The ability of a system, network, or process to handle a growing amount of work by adding resources.",
    "Option3": "The ability to run on only one machine.",
    "4": "The ability to produce accurate results.",
    "Answer": "The ability of a system, network, or process to handle a growing amount of work by adding resources."
  },
  {
    "question_no.": 120,
    "Question": "What is 'maintainability' in software?",
    "Option1": "How difficult it is to modify and extend the software.",
    "Option2": "The ease with which a software system or component can be modified to correct faults, improve performance or other attributes, or adapt to a changed environment.",
    "Option3": "How often the software crashes.",
    "4": "The cost of developing the software.",
    "Answer": "The ease with which a software system or component can be modified to correct faults, improve performance or other attributes, or adapt to a changed environment."
  },
  {
    "question_no.": 121,
    "Question": "What is 'readability' of code?",
    "Option1": "How fast the code compiles.",
    "Option2": "The ease with which human readers can understand the purpose, control flow, and operations of source code.",
    "Option3": "The number of lines of code.",
    "4": "The amount of memory the code uses.",
    "Answer": "The ease with which human readers can understand the purpose, control flow, and operations of source code."
  },
  {
    "question_no.": 122,
    "Question": "What are 'coding conventions'?",
    "Option1": "Strict rules that must be followed by compilers.",
    "Option2": "A set of guidelines for a specific programming language that recommend style, practices, and methods for every aspect of a program written in that language.",
    "Option3": "Laws for software development.",
    "4": "Technical specifications for hardware.",
    "Answer": "A set of guidelines for a specific programming language that recommend style, practices, and methods for every aspect of a program written in that language."
  },
  {
    "question_no.": 123,
    "Question": "What is 'code documentation'?",
    "Option1": "The act of writing comments only.",
    "Option2": "The process of describing the functionality, design, and use of software code, typically through comments within the code, external documents, or automatically generated documents.",
    "Option3": "The output of the program.",
    "4": "The process of compiling code.",
    "Answer": "The process of describing the functionality, design, and use of software code, typically through comments within the code, external documents, or automatically generated documents."
  },
  {
    "question_no.": 124,
    "Question": "What is 'clean code'?",
    "Option1": "Code that has no comments.",
    "Option2": "Code that is easy to read, understand, and modify by other developers (or oneself in the future), free of unnecessary complexity.",
    "Option3": "Code that runs very fast.",
    "4": "Code that is compiled without any warnings.",
    "Answer": "Code that is easy to read, understand, and modify by other developers (or oneself in the future), free of unnecessary complexity."
  },
  {
    "question_no.": 125,
    "Question": "What is 'DRY' principle?",
    "Option1": "Don't Repeat Yourself – aiming to reduce repetition of software patterns, replacing them with abstractions or data normalization to avoid errors and improve maintainability.",
    "Option2": "Do Repeat Yourself.",
    "Option3": "Design Regularly Yet Systematically.",
    "4": "Develop Rapidly and Yield.",
    "Answer": "Don't Repeat Yourself – aiming to reduce repetition of software patterns, replacing them with abstractions or data normalization to avoid errors and improve maintainability."
  },
  {
    "question_no.": 126,
    "Question": "What is 'KISS' principle?",
    "Option1": "Keep It Short and Simple – advocating that most systems work best if they are kept simple rather than made complicated.",
    "Option2": "Keep It Systematically Scalable.",
    "Option3": "Know Important System Standards.",
    "4": "Key Information Security System.",
    "Answer": "Keep It Short and Simple – advocating that most systems work best if they are kept simple rather than made complicated."
  },
  {
    "question_no.": 127,
    "Question": "What is 'YAGNI' principle?",
    "Option1": "You Are Good, Now Improve.",
    "Option2": "You Aren't Gonna Need It – meaning that functionality should only be implemented when it's actually needed, not in anticipation of future requirements.",
    "Option3": "Yet Another Great New Idea.",
    "4": "Your Algorithms Generate New Information.",
    "Answer": "You Aren't Gonna Need It – meaning that functionality should only be implemented when it's actually needed, not in anticipation of future requirements."
  },
  {
    "question_no.": 128,
    "Question": "What is a 'design pattern'?",
    "Option1": "A specific, fixed piece of code.",
    "Option2": "A general, reusable solution to a commonly occurring problem within a given context in software design.",
    "Option3": "A rule for syntax.",
    "4": "A tool for debugging.",
    "Answer": "A general, reusable solution to a commonly occurring problem within a given context in software design."
  },
  {
    "question_no.": 129,
    "Question": "What is 'Singleton Pattern'?",
    "Option1": "Ensures a class has multiple instances.",
    "Option2": "Ensures that a class has only one instance and provides a global point of access to that instance.",
    "Option3": "Creates objects without specifying the exact class.",
    "4": "Defines a one-to-many dependency between objects.",
    "Answer": "Ensures that a class has only one instance and provides a global point of access to that instance."
  },
  {
    "question_no.": 130,
    "Question": "What is 'Factory Pattern'?",
    "Option1": "A pattern for destroying objects.",
    "Option2": "A creational pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.",
    "Option3": "A pattern for observing changes.",
    "4": "A pattern for decorating objects.",
    "Answer": "A creational pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created."
  },
  {
    "question_no.": 131,
    "Question": "What is 'Observer Pattern'?",
    "Option1": "A pattern for creating objects.",
    "Option2": "A behavioral pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.",
    "Option3": "A pattern for hiding implementation details.",
    "4": "A pattern for single instance creation.",
    "Answer": "A behavioral pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."
  },
  {
    "question_no.": 132,
    "Question": "What is 'SOLID Principles'?",
    "Option1": "A set of rules for hardware design.",
    "Option2": "Five design principles intended to make software designs more understandable, flexible, and maintainable.",
    "Option3": "Principles for database management.",
    "4": "Rules for network security.",
    "Answer": "Five design principles intended to make software designs more understandable, flexible, and maintainable."
  },
  {
    "question_no.": 133,
    "Question": "What is 'Single Responsibility Principle'?",
    "Option1": "A class should have multiple responsibilities.",
    "Option2": "A class should have only one reason to change, meaning it should have only one responsibility.",
    "Option3": "A class should be responsible for all its dependencies.",
    "4": "A class should only implement a single interface.",
    "Answer": "A class should have only one reason to change, meaning it should have only one responsibility."
  },
  {
    "question_no.": 134,
    "Question": "What is 'Open/Closed Principle'?",
    "Option1": "Software entities should be open for modification, but closed for extension.",
    "Option2": "Software entities should be open for extension, but closed for modification.",
    "Option3": "Software entities should be open for both modification and extension.",
    "4": "Software entities should be closed for both modification and extension.",
    "Answer": "Software entities should be open for extension, but closed for modification."
  },
  {
    "question_no.": 135,
    "Question": "What is 'Liskov Substitution Principle'?",
    "Option1": "Derived classes should always replace base classes.",
    "Option2": "Derived classes should be substitutable for their base classes without altering the correctness of the program.",
    "Option3": "Base classes should be substitutable for derived classes.",
    "4": "Any class can be substituted for any other class.",
    "Answer": "Derived classes should be substitutable for their base classes without altering the correctness of the program."
  },
  {
    "question_no.": 136,
    "Question": "What is 'Interface Segregation Principle'?",
    "Option1": "Clients should be forced to depend on interfaces they do not use.",
    "Option2": "Clients should not be forced to depend on interfaces they do not use; instead, many client-specific interfaces are better than one general-purpose interface.",
    "Option3": "Interfaces should be as large as possible.",
    "4": "Interfaces should only have a single method.",
    "Answer": "Clients should not be forced to depend on interfaces they do not use; instead, many client-specific interfaces are better than one general-purpose interface."
  },
  {
    "question_no.": 137,
    "Question": "What is 'Dependency Inversion Principle'?",
    "Option1": "High-level modules should depend on low-level modules.",
    "Option2": "High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.",
    "Option3": "Dependencies should always be resolved at compile time.",
    "4": "Dependencies should always be tightly coupled.",
    "Answer": "High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions."
  },
  {
    "question_no.": 138,
    "Question": "What is 'Agile Methodology'?",
    "Option1": "A rigid, linear software development process.",
    "Option2": "An iterative and incremental approach to software development, characterized by collaboration, self-organizing teams, and continuous adaptation to change.",
    "Option3": "A methodology for hardware development.",
    "4": "A methodology focused solely on documentation.",
    "Answer": "An iterative and incremental approach to software development, characterized by collaboration, self-organizing teams, and continuous adaptation to change."
  },
  {
    "question_no.": 139,
    "Question": "What is 'Scrum'?",
    "Option1": "A traditional waterfall approach.",
    "Option2": "A framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.",
    "Option3": "A specific programming language.",
    "4": "A debugging technique.",
    "Answer": "A framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value."
  },
  {
    "question_no.": 140,
    "Question": "What is a 'Sprint' in Scrum?",
    "Option1": "The entire project duration.",
    "Option2": "A fixed-length time box (usually 1-4 weeks) during which a 'Done', usable, and potentially releasable product increment is created.",
    "Option3": "A meeting for planning only.",
    "4": "A phase for testing only.",
    "Answer": "A fixed-length time box (usually 1-4 weeks) during which a 'Done', usable, and potentially releasable product increment is created."
  },
  {
    "question_no.": 141,
    "Question": "What is 'Product Backlog' in Scrum?",
    "Option1": "A list of completed tasks.",
    "Option2": "An ordered list of everything that might be needed in the product and is the single source of requirements for any changes to be made to the product.",
    "Option3": "A list of bugs.",
    "4": "A schedule for meetings.",
    "Answer": "An ordered list of everything that might be needed in the product and is the single source of requirements for any changes to be made to the product."
  },
  {
    "question_no.": 142,
    "Question": "What is 'Sprint Backlog' in Scrum?",
    "Option1": "All items from the Product Backlog.",
    "Option2": "A set of Product Backlog items selected for the Sprint, plus the plan for delivering the product Increment and realizing the Sprint Goal.",
    "Option3": "A list of team members.",
    "4": "A document describing project risks.",
    "Answer": "A set of Product Backlog items selected for the Sprint, plus the plan for delivering the product Increment and realizing the Sprint Goal."
  },
  {
    "question_no.": 143,
    "Question": "What is a 'Daily Scrum'?",
    "Option1": "A long meeting for problem-solving.",
    "Option2": "A 15-minute time-boxed event for the Development Team to synchronize activities and create a plan for the next 24 hours.",
    "Option3": "A meeting for reviewing past work.",
    "4": "A meeting for discussing personal issues.",
    "Answer": "A 15-minute time-boxed event for the Development Team to synchronize activities and create a plan for the next 24 hours."
  },
  {
    "question_no.": 144,
    "Question": "What is 'Software Development Life Cycle (SDLC)'?",
    "Option1": "A single phase in software development.",
    "Option2": "A framework defining tasks performed at each step in the software development process, from initial requirements gathering to deployment and maintenance.",
    "Option3": "A marketing strategy for software.",
    "4": "A financial model for software companies.",
    "Answer": "A framework defining tasks performed at each step in the software development process, from initial requirements gathering to deployment and maintenance."
  },
  {
    "question_no.": 145,
    "Question": "Name a phase in SDLC.",
    "Option1": "Eating",
    "Option2": "Planning",
    "Option3": "Sleeping",
    "4": "Driving",
    "Answer": "Planning"
  },
  {
    "question_no.": 146,
    "Question": "What is 'Requirements Gathering' phase in SDLC?",
    "Option1": "Writing code.",
    "Option2": "The phase where detailed information about what the software needs to do, for whom, and under what conditions, is collected and documented.",
    "Option3": "Deploying the software.",
    "4": "Testing the software.",
    "Answer": "The phase where detailed information about what the software needs to do, for whom, and under what conditions, is collected and documented."
  },
  {
    "question_no.": 147,
    "Question": "What is 'Design' phase in SDLC?",
    "Option1": "Writing the actual code.",
    "Option2": "The phase where the architecture and overall structure of the software system are defined, including components, interfaces, and data structures.",
    "Option3": "Maintaining the software.",
    "4": "Testing for bugs.",
    "Answer": "The phase where the architecture and overall structure of the software system are defined, including components, interfaces, and data structures."
  },
  {
    "question_no.": 148,
    "Question": "What is 'Implementation' (or Coding) phase in SDLC?",
    "Option1": "Defining requirements.",
    "Option2": "The phase where the software design is translated into actual executable code using a chosen programming language.",
    "Option3": "Designing the system architecture.",
    "4": "Testing the final product.",
    "Answer": "The phase where the software design is translated into actual executable code using a chosen programming language."
  },
  {
    "question_no.": 149,
    "Question": "What is 'Testing' phase in SDLC?",
    "Option1": "Writing code.",
    "Option2": "The phase where the software is systematically evaluated to identify defects and ensure it meets the specified requirements and quality standards.",
    "Option3": "Planning the project.",
    "4": "Deploying the software.",
    "Answer": "The phase where the software is systematically evaluated to identify defects and ensure it meets the specified requirements and quality standards."
  },
  {
    "question_no.": 150,
    "Question": "What is 'Deployment' phase in SDLC?",
    "Option1": "Designing the software.",
    "Option2": "The phase where the developed and tested software is released to users or installed in the production environment.",
    "Option3": "Gathering requirements.",
    "4": "Maintaining the software.",
    "Answer": "The phase where the developed and tested software is released to users or installed in the production environment."
  },
  {
    "question_no.": 151,
    "Question": "What is 'Maintenance' phase in SDLC?",
    "Option1": "Initial development only.",
    "Option2": "The ongoing phase after deployment, involving bug fixes, updates, enhancements, and adaptations to new environments or technologies.",
    "Option3": "The very first step of the project.",
    "4": "The only phase that involves coding.",
    "Answer": "The ongoing phase after deployment, involving bug fixes, updates, enhancements, and adaptations to new environments or technologies."
  },
  {
    "question_no.": 152,
    "Question": "What is 'waterfall model' in SDLC?",
    "Option1": "An agile and iterative model.",
    "Option2": "A linear-sequential approach where each phase of the SDLC must be completed before the next phase can begin, with no overlapping.",
    "Option3": "A model that encourages continuous feedback.",
    "4": "A model suitable for rapidly changing requirements.",
    "Answer": "A linear-sequential approach where each phase of the SDLC must be completed before the next phase can begin, with no overlapping."
  },
  {
    "question_no.": 153,
    "Question": "What is 'abstraction layer'?",
    "Option1": "A layer that shows all details.",
    "Option2": "A mechanism that hides the complex underlying implementation details and provides a simpler, higher-level interface for interaction.",
    "Option3": "A layer for storing data.",
    "4": "A layer for network communication.",
    "Answer": "A mechanism that hides the complex underlying implementation details and provides a simpler, higher-level interface for interaction."
  },
  {
    "question_no.": 154,
    "Question": "What is 'API documentation'?",
    "Option1": "Internal code comments only.",
    "Option2": "Comprehensive guides and reference materials that explain how to use an API, including its functions, classes, data types, and parameters.",
    "Option3": "User manuals for end-users.",
    "4": "Marketing materials for software.",
    "Answer": "Comprehensive guides and reference materials that explain how to use an API, including its functions, classes, data types, and parameters."
  },
  {
    "question_no.": 155,
    "Question": "What is 'firmware'?",
    "Option1": "Pure software.",
    "Option2": "A specific class of computer software that provides the low-level control for a device's specific hardware, often stored on read-only memory.",
    "Option3": "Operating system.",
    "4": "Application software.",
    "Answer": "A specific class of computer software that provides the low-level control for a device's specific hardware, often stored on read-only memory."
  },
  {
    "question_no.": 156,
    "Question": "What is 'middleware'?",
    "Option1": "Software that runs directly on hardware.",
    "Option2": "Software that provides services to software applications beyond those available from the operating system, acting as a bridge between operating systems or databases and applications.",
    "Option3": "Software for direct user interaction.",
    "4": "Software for playing games.",
    "Answer": "Software that provides services to software applications beyond those available from the operating system, acting as a bridge between operating systems or databases and applications."
  },
  {
    "question_no.": 157,
    "Question": "What is 'event-driven programming'?",
    "Option1": "A programming paradigm where the flow of the program is determined by predefined sequences of instructions.",
    "Option2": "A programming paradigm in which the flow of the program is determined by events such as user actions (mouse clicks, key presses), sensor outputs, or messages from other programs/threads.",
    "Option3": "A programming paradigm based on mathematical functions.",
    "4": "A programming paradigm that uses only loops.",
    "Answer": "A programming paradigm in which the flow of the program is determined by events such as user actions (mouse clicks, key presses), sensor outputs, or messages from other programs/threads."
  },
  {
    "question_no.": 158,
    "Question": "What is an 'event handler'?",
    "Option1": "A function that generates events.",
    "Option2": "A subroutine or function that is called when a specific event occurs.",
    "Option3": "A type of variable.",
    "4": "A conditional statement.",
    "Answer": "A subroutine or function that is called when a specific event occurs."
  },
  {
    "question_no.": 159,
    "Question": "What is 'Graphical User Interface (GUI)'?",
    "Option1": "A text-based interface.",
    "Option2": "A type of user interface that allows users to interact with electronic devices through graphical icons and visual indicators, rather than text-based commands.",
    "Option3": "A programming language.",
    "4": "A hardware component.",
    "Answer": "A type of user interface that allows users to interact with electronic devices through graphical icons and visual indicators, rather than text-based commands."
  },
  {
    "question_no.": 160,
    "Question": "What is 'Command Line Interface (CLI)'?",
    "Option1": "An interface that uses graphical elements.",
    "Option2": "A text-based user interface used to interact with computer programs by typing commands and receiving textual responses.",
    "Option3": "A programming language.",
    "4": "A hardware component.",
    "Answer": "A text-based user interface used to interact with computer programs by typing commands and receiving textual responses."
  },
  {
    "question_no.": 161,
    "Question": "What is 'compiler optimization'?",
    "Option1": "Making the source code shorter.",
    "Option2": "The process of modifying code by a compiler to improve its execution speed or reduce its resource consumption (memory, power).",
    "Option3": "Debugging errors.",
    "4": "Adding comments to code.",
    "Answer": "The process of modifying code by a compiler to improve its execution speed or reduce its resource consumption (memory, power)."
  },
  {
    "question_no.": 162,
    "Question": "What is 'dead code'?",
    "Option1": "Code that is executed frequently.",
    "Option2": "Code that is present in the program but is never executed during runtime, often indicating a bug or unnecessary code.",
    "Option3": "Code that causes a crash.",
    "4": "Code that is very old.",
    "Answer": "Code that is present in the program but is never executed during runtime, often indicating a bug or unnecessary code."
  },
  {
    "question_no.": 163,
    "Question": "What is 'linter'?",
    "Option1": "A tool for compiling code.",
    "Option2": "A static code analysis tool used to flag programming errors, bugs, stylistic errors, and suspicious constructs.",
    "Option3": "A tool for running tests.",
    "4": "A tool for deploying software.",
    "Answer": "A static code analysis tool used to flag programming errors, bugs, stylistic errors, and suspicious constructs."
  },
  {
    "question_no.": 164,
    "Question": "What is 'code coverage'?",
    "Option1": "The number of lines of code written.",
    "Option2": "A metric that measures the percentage of code lines, branches, or paths that are executed by a test suite.",
    "Option3": "The amount of memory used by the code.",
    "4": "The speed of code execution.",
    "Answer": "A metric that measures the percentage of code lines, branches, or paths that are executed by a test suite."
  },
  {
    "question_no.": 165,
    "Question": "What is 'code review'?",
    "Option1": "The process of automatically testing code.",
    "Option2": "A systematic examination of computer source code by human peers, aiming to find mistakes, improve quality, and increase the likelihood of future maintainability.",
    "Option3": "The process of compiling code.",
    "4": "The process of deploying code.",
    "Answer": "A systematic examination of computer source code by human peers, aiming to find mistakes, improve quality, and increase the likelihood of future maintainability."
  },
  {
    "question_no.": 166,
    "Question": "What is 'pair programming'?",
    "Option1": "Two programmers working on separate tasks.",
    "Option2": "An agile software development technique in which two programmers work together at one workstation, with one 'driver' writing code and the other 'navigator' reviewing it.",
    "Option3": "Programming individually.",
    "4": "Writing code in pairs for different projects.",
    "Answer": "An agile software development technique in which two programmers work together at one workstation, with one 'driver' writing code and the other 'navigator' reviewing it."
  },
  {
    "question_no.": 167,
    "Question": "What is 'functional programming'?",
    "Option1": "A programming paradigm focused on objects and classes.",
    "Option2": "A programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data.",
    "Option3": "A programming paradigm that uses only loops and conditional statements.",
    "4": "A programming paradigm that is entirely imperative.",
    "Answer": "A programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data."
  },
  {
    "question_no.": 168,
    "Question": "What is 'imperative programming'?",
    "Option1": "A programming paradigm that emphasizes the evaluation of expressions.",
    "Option2": "A programming paradigm that uses statements that change a program's state, focusing on how a program operates.",
    "Option3": "A programming paradigm based on logical rules.",
    "4": "A programming paradigm that uses only pure functions.",
    "Answer": "A programming paradigm that uses statements that change a program's state, focusing on how a program operates."
  },
  {
    "question_no.": 169,
    "Question": "What is 'declarative programming'?",
    "Option1": "A programming paradigm that describes the control flow in detail.",
    "Option2": "A programming paradigm that expresses the logic of a computation without describing its control flow, focusing on what the program should accomplish rather than how.",
    "Option3": "A programming paradigm that emphasizes side effects.",
    "4": "A programming paradigm that uses mutable state extensively.",
    "Answer": "A programming paradigm that expresses the logic of a computation without describing its control flow, focusing on what the program should accomplish rather than how."
  },
  {
    "question_no.": 170,
    "Question": "What is 'concurrency'?",
    "Option1": "Running tasks strictly one after another.",
    "Option2": "The ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome.",
    "Option3": "Running tasks on a single core.",
    "4": "A type of data structure.",
    "Answer": "The ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome."
  },
  {
    "question_no.": 171,
    "Question": "What is 'parallelism'?",
    "Option1": "Executing tasks sequentially.",
    "Option2": "The actual simultaneous execution of multiple independent tasks or processes, typically on multiple CPU cores or processors, to achieve speedup.",
    "Option3": "A debugging technique.",
    "4": "A type of memory management.",
    "Answer": "The actual simultaneous execution of multiple independent tasks or processes, typically on multiple CPU cores or processors, to achieve speedup."
  },
  {
    "question_no.": 172,
    "Question": "What is a 'thread' in programming?",
    "Option1": "A separate program.",
    "Option2": "A single sequential flow of control within a program, which can run concurrently with other threads in the same process.",
    "Option3": "A type of network connection.",
    "4": "A hardware component.",
    "Answer": "A single sequential flow of control within a program, which can run concurrently with other threads in the same process."
  },
  {
    "question_no.": 173,
    "Question": "What is a 'process' in programming?",
    "Option1": "A lightweight unit of execution within a program.",
    "Option2": "An instance of a computer program that is being executed, including its code, data, and resources.",
    "Option3": "A function call.",
    "4": "A single CPU instruction.",
    "Answer": "An instance of a computer program that is being executed, including its code, data, and resources."
  },
  {
    "question_no.": 174,
    "Question": "What is a 'race condition'?",
    "Option1": "A condition where threads execute in a fixed order.",
    "Option2": "A condition where the output of a program depends on the sequence or timing of uncontrollable events, typically occurring in concurrent systems due to shared resources.",
    "Option3": "A type of loop.",
    "4": "A common type of syntax error.",
    "Answer": "A condition where the output of a program depends on the sequence or timing of uncontrollable events, typically occurring in concurrent systems due to shared resources."
  },
  {
    "question_no.": 175,
    "Question": "What is a 'mutex' (mutual exclusion)?",
    "Option1": "A type of variable for storing data.",
    "Option2": "A synchronization primitive used to protect shared resources from concurrent access by multiple threads, ensuring only one thread can access the resource at a time.",
    "Option3": "A function that generates random numbers.",
    "4": "A tool for debugging.",
    "Answer": "A synchronization primitive used to protect shared resources from concurrent access by multiple threads, ensuring only one thread can access the resource at a time."
  },
  {
    "question_no.": 176,
    "Question": "What is a 'deadlock'?",
    "Option1": "A situation where a program terminates normally.",
    "Option2": "A situation in concurrent programming where two or more computing processes are unable to proceed because each is waiting for the other to release a resource.",
    "Option3": "A type of compiler error.",
    "4": "A condition where all resources are available.",
    "Answer": "A situation in concurrent programming where two or more computing processes are unable to proceed because each is waiting for the other to release a resource."
  },
  {
    "question_no.": 177,
    "Question": "What is a 'semaphore'?",
    "Option1": "A type of memory.",
    "Option2": "A signaling mechanism (an integer variable) used to control access to common resources in a concurrent system, often used for counting resources or ensuring order.",
    "Option3": "A networking protocol.",
    "4": "A data type for strings.",
    "Answer": "A signaling mechanism (an integer variable) used to control access to common resources in a concurrent system, often used for counting resources or ensuring order."
  },
  {
    "question_no.": 178,
    "Question": "What is 'atomic operation'?",
    "Option1": "An operation that can be interrupted.",
    "Option2": "An operation that is guaranteed to be performed entirely or not at all, without interruption by other threads, essential for concurrent programming.",
    "Option3": "An operation that consumes a lot of memory.",
    "4": "An operation that runs only on a single core.",
    "Answer": "An operation that is guaranteed to be performed entirely or not at all, without interruption by other threads, essential for concurrent programming."
  },
  {
    "question_no.": 179,
    "Question": "What is 'concurrency control'?",
    "Option1": "Preventing errors during compilation.",
    "Option2": "The management of simultaneous operations on data or resources in a multi-user or multi-threaded environment to ensure data integrity and consistency.",
    "Option3": "Controlling the flow of a single-threaded program.",
    "4": "Managing hardware devices.",
    "Answer": "The management of simultaneous operations on data or resources in a multi-user or multi-threaded environment to ensure data integrity and consistency."
  },
  {
    "question_no.": 180,
    "Question": "What is 'thread pool'?",
    "Option1": "A collection of unrelated threads.",
    "Option2": "A collection of pre-initialized, idle threads that can be used to execute tasks, avoiding the overhead of creating and destroying threads for each new task.",
    "Option3": "A method for debugging threads.",
    "4": "A type of memory management.",
    "Answer": "A collection of pre-initialized, idle threads that can be used to execute tasks, avoiding the overhead of creating and destroying threads for each new task."
  },
  {
    "question_no.": 181,
    "Question": "What is 'asynchronous programming'?",
    "Option1": "Programming where tasks execute in a strict sequential order.",
    "Option2": "A programming model that allows certain tasks to run independently of the main program flow, without blocking its execution, often using callbacks or promises.",
    "Option3": "Programming that only works with synchronous I/O.",
    "4": "Programming that always uses multiple threads.",
    "Answer": "A programming model that allows certain tasks to run independently of the main program flow, without blocking its execution, often using callbacks or promises."
  },
  {
    "question_no.": 182,
    "Question": "What is 'synchronous programming'?",
    "Option1": "Programming where tasks can run independently.",
    "Option2": "A programming model where tasks are executed in a strict sequential order, and each task must complete before the next one begins, potentially blocking the program flow.",
    "Option3": "Programming that involves only UI elements.",
    "4": "Programming that always uses non-blocking operations.",
    "Answer": "A programming model where tasks are executed in a strict sequential order, and each task must complete before the next one begins, potentially blocking the program flow."
  },
  {
    "question_no.": 183,
    "Question": "What is 'callback function'?",
    "Option1": "A function that calls itself recursively.",
    "Option2": "A function that is passed as an argument to another function and is invoked at a later time or when a specific event occurs.",
    "Option3": "A function that returns multiple values.",
    "4": "A function that is always executed first.",
    "Answer": "A function that is passed as an argument to another function and is invoked at a later time or when a specific event occurs."
  },
  {
    "question_no.": 184,
    "Question": "What is a 'promise' (in asynchronous programming)?",
    "Option1": "A guarantee that a function will never fail.",
    "Option2": "An object representing the eventual completion (or failure) of an asynchronous operation and its resulting value.",
    "Option3": "A type of loop.",
    "4": "A predefined variable.",
    "Answer": "An object representing the eventual completion (or failure) of an asynchronous operation and its resulting value."
  },
  {
    "question_no.": 185,
    "Question": "What is 'future' (in asynchronous programming)?",
    "Option1": "A past result.",
    "Option2": "A placeholder object for a value that may not yet be available, representing the result of a computation that will be performed asynchronously.",
    "Option3": "A type of data structure for storing historical data.",
    "4": "A function that predicts future values.",
    "Answer": "A placeholder object for a value that may not yet be available, representing the result of a computation that will be performed asynchronously."
  },
  {
    "question_no.": 186,
    "Question": "What is 'garbage collection'?",
    "Option1": "Manual memory management.",
    "Option2": "Automatic memory management where the garbage collector identifies and reclaims memory that is no longer being used by the program.",
    "Option3": "A technique for cleaning up disk space.",
    "4": "A method for organizing files.",
    "Answer": "Automatic memory management where the garbage collector identifies and reclaims memory that is no longer being used by the program."
  },
  {
    "question_no.": 187,
    "Question": "Which programming languages commonly use garbage collection?",
    "Option1": "C, C++",
    "Option2": "Java, Python, C#",
    "Option3": "Assembly, Fortran",
    "4": "SQL, HTML",
    "Answer": "Java, Python, C#"
  },
  {
    "question_no.": 188,
    "Question": "What is 'memory management'?",
    "Option1": "Storing data on a hard drive.",
    "Option2": "The process of controlling and coordinating computer memory, allocating portions called blocks to programs when they start and freeing them up when they finish.",
    "Option3": "Managing network connections.",
    "4": "Optimizing CPU usage.",
    "Answer": "The process of controlling and coordinating computer memory, allocating portions called blocks to programs when they start and freeing them up when they finish."
  },
  {
    "question_no.": 189,
    "Question": "What is 'stack memory'?",
    "Option1": "Memory allocated for global variables.",
    "Option2": "A region of memory used for static memory allocation, function call context, and local variables, managed automatically by the CPU.",
    "Option3": "Memory allocated for dynamic data.",
    "4": "Memory used for long-term storage.",
    "Answer": "A region of memory used for static memory allocation, function call context, and local variables, managed automatically by the CPU."
  },
  {
    "question_no.": 190,
    "Question": "What is 'heap memory'?",
    "Option1": "Memory used for function calls.",
    "Option2": "A region of memory used for dynamic memory allocation, where memory is explicitly allocated and deallocated by the programmer during runtime.",
    "Option3": "Memory for constant values.",
    "4": "Memory used for program instructions.",
    "Answer": "A region of memory used for dynamic memory allocation, where memory is explicitly allocated and deallocated by the programmer during runtime."
  },
  {
    "question_no.": 191,
    "Question": "When would you use 'heap memory'?",
    "Option1": "For small, fixed-size local variables.",
    "Option2": "When the size of data is not known at compile time, or when data needs to persist beyond the scope of a function.",
    "Option3": "For function parameters.",
    "4": "For constant values.",
    "Answer": "When the size of data is not known at compile time, or when data needs to persist beyond the scope of a function."
  },
  {
    "question_no.": 192,
    "Question": "What is 'recursion stack'?",
    "Option1": "A data structure for storing recursive functions.",
    "Option2": "The call stack used by recursive functions to store function calls, local variables, and return addresses for each recursive invocation.",
    "Option3": "A special type of memory for loops.",
    "4": "A stack that never overflows.",
    "Answer": "The call stack used by recursive functions to store function calls, local variables, and return addresses for each recursive invocation."
  },
  {
    "question_no.": 193,
    "Question": "What is 'call by value'?",
    "Option1": "Passing the memory address of an argument.",
    "Option2": "When a copy of the actual argument's value is passed to the formal parameter of the function, and changes inside the function do not affect the original argument.",
    "Option3": "Passing a reference to an argument.",
    "4": "Passing a global variable to a function.",
    "Answer": "When a copy of the actual argument's value is passed to the formal parameter of the function, and changes inside the function do not affect the original argument."
  },
  {
    "question_no.": 194,
    "Question": "What is 'call by reference'?",
    "Option1": "Passing a copy of the argument's value.",
    "Option2": "When the memory address of the actual argument is passed to the formal parameter, allowing the function to modify the original argument's value directly.",
    "Option3": "Passing a constant value.",
    "4": "Passing a temporary variable.",
    "Answer": "When the memory address of the actual argument is passed to the formal parameter, allowing the function to modify the original argument's value directly."
  },
  {
    "question_no.": 195,
    "Question": "What is 'global scope'?",
    "Option1": "The region of a program where a variable is only accessible within a function.",
    "Option2": "The entire program, where variables declared in global scope are accessible from anywhere in the program.",
    "Option3": "The scope of a single block of code.",
    "4": "The scope of a class only.",
    "Answer": "The entire program, where variables declared in global scope are accessible from anywhere in the program."
  },
  {
    "question_no.": 196,
    "Question": "What is 'local scope'?",
    "Option1": "The entire program.",
    "Option2": "The region within a function, block, or method where variables declared therein are only accessible.",
    "Option3": "The scope of a whole class.",
    "4": "The scope of an entire module.",
    "Answer": "The region within a function, block, or method where variables declared therein are only accessible."
  },
  {
    "question_no.": 197,
    "Question": "What is a 'namespace'?",
    "Option1": "A keyword for declaring variables.",
    "Option2": "A declarative region that provides a scope for the identifiers (names of types, functions, variables, etc.) inside it, used to prevent naming conflicts.",
    "Option3": "A way to define global functions.",
    "4": "A type of data structure.",
    "Answer": "A declarative region that provides a scope for the identifiers (names of types, functions, variables, etc.) inside it, used to prevent naming conflicts."
  },
  {
    "question_no.": 198,
    "Question": "What is 'abstraction' in the context of data structures?",
    "Option1": "Exposing all internal details of data structures.",
    "Option2": "Defining a data structure by its behavior (what operations can be performed on it) rather than its implementation details (how it stores data).",
    "Option3": "Creating multiple copies of a data structure.",
    "4": "Optimizing memory usage for data structures.",
    "Answer": "Defining a data structure by its behavior (what operations can be performed on it) rather than its implementation details (how it stores data)."
  },
  {
    "question_no.": 199,
    "Question": "What is 'recursion depth'?",
    "Option1": "The number of times a loop runs.",
    "Option2": "The maximum number of times a recursive function can call itself before it hits the base case or a stack overflow.",
    "Option3": "The number of parameters a recursive function has.",
    "4": "The amount of memory used by a recursive function.",
    "Answer": "The maximum number of times a recursive function can call itself before it hits the base case or a stack overflow."
  },
  {
    "question_no.": 200,
    "Question": "What is 'debugging in production'?",
    "Option1": "Debugging before deployment.",
    "Option2": "The practice of diagnosing and fixing software defects directly on a live, deployed system, often risky but sometimes necessary.",
    "Option3": "Debugging using unit tests.",
    "4": "Debugging only during the development phase.",
    "Answer": "The practice of diagnosing and fixing software defects directly on a live, deployed system, often risky but sometimes necessary."
  },
  {
    "question_no.": 201,
    "Question": "What is 'test suite'?",
    "Option1": "A single test case.",
    "Option2": "A collection of test cases that are executed together to test a software program or a component of it.",
    "Option3": "A debugging tool.",
    "4": "A document for user requirements.",
    "Answer": "A collection of test cases that are executed together to test a software program or a component of it."
  },
  {
    "question_no.": 202,
    "Question": "What is 'test automation'?",
    "Option1": "Manually executing test cases.",
    "Option2": "The process of automating the execution of tests and the verification of results, reducing manual effort and speeding up feedback.",
    "Option3": "Writing test plans.",
    "4": "Designing test cases.",
    "Answer": "The process of automating the execution of tests and the verification of results, reducing manual effort and speeding up feedback."
  }
]