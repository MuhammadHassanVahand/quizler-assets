[
  {
    "question_no.": 1,
    "Question": "What type of programming language is C#?",
    "Option1": "Procedural",
    "Option2": "Functional",
    "Option3": "Object-Oriented",
    "Option4": "Scripting",
    "Answer": "Object-Oriented"
  },
  {
    "question_no.": 2,
    "Question": "Which company developed C#?",
    "Option1": "Google",
    "Option2": "Microsoft",
    "Option3": "Apple",
    "Option4": "IBM",
    "Answer": "Microsoft"
  },
  {
    "question_no.": 3,
    "Question": "C# is part of which framework?",
    "Option1": "Java SE",
    "Option2": ".NET Framework / .NET",
    "Option3": "Node.js",
    "Option4": "Ruby on Rails",
    "Answer": ".NET Framework / .NET"
  },
  {
    "question_no.": 4,
    "Question": "Which keyword is used to declare a class in C#?",
    "Option1": "Class",
    "Option2": "className",
    "Option3": "class",
    "Option4": "defineClass",
    "Answer": "class"
  },
  {
    "question_no.": 5,
    "Question": "What is the entry point for every C# console application?",
    "Option1": "Start() method",
    "Option2": "run() method",
    "Option3": "Main() method",
    "Option4": "execute() method",
    "Answer": "Main() method"
  },
  {
    "question_no.": 6,
    "Question": "Which data type is used to store whole numbers in C#?",
    "Option1": "float",
    "Option2": "double",
    "Option3": "int",
    "Option4": "string",
    "Answer": "int"
  },
  {
    "question_no.": 7,
    "Question": "Which data type is used to store a single character?",
    "Option1": "string",
    "Option2": "char",
    "Option3": "text",
    "Option4": "byte",
    "Answer": "char"
  },
  {
    "question_no.": 8,
    "Question": "Which keyword is used to declare a constant in C#?",
    "Option1": "var",
    "Option2": "const",
    "Option3": "static",
    "Option4": "final",
    "Answer": "const"
  },
  {
    "question_no.": 9,
    "Question": "How do you output text to the console in C#?",
    "Option1": "Console.print()",
    "Option2": "System.out.println()",
    "Option3": "Console.WriteLine()",
    "Option4": "print()",
    "Answer": "Console.WriteLine()"
  },
  {
    "question_no.": 10,
    "Question": "Which operator is used for assignment in C#?",
    "Option1": "==",
    "Option2": "=",
    "Option3": "===",
    "Option4": "!=",
    "Answer": "="
  },
  {
    "question_no.": 11,
    "Question": "What does CLI stand for in the context of .NET?",
    "Option1": "Common Language Interface",
    "Option2": "Command Line Interpreter",
    "Option3": "Common Language Infrastructure",
    "Option4": "Code Language Integration",
    "Answer": "Common Language Infrastructure"
  },
  {
    "question_no.": 12,
    "Question": "What is the purpose of the CLR in .NET?",
    "Option1": "To compile C# code into machine code directly.",
    "Option2": "To manage the execution of .NET programs.",
    "Option3": "To provide a graphical user interface.",
    "Option4": "To store data in a database.",
    "Answer": "To manage the execution of .NET programs."
  },
  {
    "question_no.": 13,
    "Question": "Which of these is NOT a value type in C#?",
    "Option1": "int",
    "Option2": "struct",
    "Option3": "string",
    "Option4": "bool",
    "Answer": "string"
  },
  {
    "question_no.": 14,
    "Question": "Which of these is a reference type in C#?",
    "Option1": "enum",
    "Option2": "class",
    "Option3": "double",
    "Option4": "char",
    "Answer": "class"
  },
  {
    "question_no.": 15,
    "Question": "What is the default value of an uninitialized `int` variable in C#?",
    "Option1": "null",
    "Option2": "1",
    "Option3": "0",
    "Option4": "undefined",
    "Answer": "0"
  },
  {
    "question_no.": 16,
    "Question": "What is the default value of an uninitialized `string` variable in C#?",
    "Option1": "empty string",
    "Option2": "null",
    "Option3": "undefined",
    "Option4": "0",
    "Answer": "null"
  },
  {
    "question_no.": 17,
    "Question": "Which access modifier allows access only within the same class?",
    "Option1": "public",
    "Option2": "private",
    "Option3": "protected",
    "Option4": "internal",
    "Answer": "private"
  },
  {
    "question_no.": 18,
    "Question": "Which access modifier allows access from anywhere?",
    "Option1": "private",
    "Option2": "protected",
    "Option3": "internal",
    "Option4": "public",
    "Answer": "public"
  },
  {
    "question_no.": 19,
    "Question": "What is method overloading?",
    "Option1": "Defining multiple methods with the same name but different return types.",
    "Option2": "Defining multiple methods with the same name but different parameters (number, type, or order).",
    "Option3": "Defining multiple methods with the same name and same parameters.",
    "Option4": "Overwriting a method in a derived class.",
    "Answer": "Defining multiple methods with the same name but different parameters (number, type, or order)."
  },
  {
    "question_no.": 20,
    "Question": "Which keyword is used to inherit a class in C#?",
    "Option1": "implements",
    "Option2": "extends",
    "Option3": ": (colon)",
    "Option4": "inherits",
    "Answer": ": (colon)"
  },
  {
    "question_no.": 21,
    "Question": "What is the base class for all classes in C#?",
    "Option1": "System.Type",
    "Option2": "System.Object",
    "Option3": "System.BaseClass",
    "Option4": "System.Root",
    "Answer": "System.Object"
  },
  {
    "question_no.": 22,
    "Question": "What is encapsulation in OOP?",
    "Option1": "The ability of an object to take on many forms.",
    "Option2": "The mechanism of hiding the implementation details and exposing only the necessary functionalities to the outside world.",
    "Option3": "The process of creating new classes from existing classes.",
    "Option4": "The process of calling a method multiple times.",
    "Answer": "The mechanism of hiding the implementation details and exposing only the necessary functionalities to the outside world."
  },
  {
    "question_no.": 23,
    "Question": "Which keyword is used to explicitly call the base class constructor?",
    "Option1": "this",
    "Option2": "super",
    "Option3": "base",
    "Option4": "parent",
    "Answer": "base"
  },
  {
    "question_no.": 24,
    "Question": "What is polymorphism?",
    "Option1": "The ability to define multiple methods with the same name in the same class.",
    "Option2": "The ability of an object to take on many forms, often achieved through method overriding or interfaces.",
    "Option3": "The process of securing data.",
    "Option4": "The process of creating multiple instances of a class.",
    "Answer": "The ability of an object to take on many forms, often achieved through method overriding or interfaces."
  },
  {
    "question_no.": 25,
    "Question": "Which keyword is used to prevent a class from being inherited?",
    "Option1": "abstract",
    "Option2": "static",
    "Option3": "sealed",
    "Option4": "final",
    "Answer": "sealed"
  },
  {
    "question_no.": 26,
    "Question": "Which keyword is used to declare an abstract method?",
    "Option1": "virtual",
    "Option2": "abstract",
    "Option3": "override",
    "Option4": "interface",
    "Answer": "abstract"
  },
  {
    "question_no.": 27,
    "Question": "Can an abstract class be instantiated directly?",
    "Option1": "Yes",
    "Option2": "No",
    "Option3": "Only if it has no abstract methods.",
    "Option4": "Only if all methods are implemented.",
    "Answer": "No"
  },
  {
    "question_no.": 28,
    "Question": "What is an interface in C#?",
    "Option1": "A class that can be inherited by only one other class.",
    "Option2": "A blueprint of a class that contains only abstract methods and properties.",
    "Option3": "A class that provides default implementations for methods.",
    "Option4": "A special type of class that holds only static members.",
    "Answer": "A blueprint of a class that contains only abstract methods and properties."
  },
  {
    "question_no.": 29,
    "Question": "Can a class implement multiple interfaces?",
    "Option1": "Yes",
    "Option2": "No",
    "Option3": "Only if they have no conflicting method signatures.",
    "Option4": "Only if they are abstract interfaces.",
    "Answer": "Yes"
  },
  {
    "question_no.": 30,
    "Question": "Which keyword is used to implement an interface?",
    "Option1": "implements",
    "Option2": "inherits",
    "Option3": ": (colon)",
    "Option4": "extends",
    "Answer": ": (colon)"
  },
  {
    "question_no.": 31,
    "Question": "What is the purpose of the `using` statement in C#?",
    "Option1": "To declare a new variable.",
    "Option2": "To include namespaces and automatically dispose of objects that implement `IDisposable`.",
    "Option3": "To define a loop.",
    "Option4": "To create a new class.",
    "Answer": "To include namespaces and automatically dispose of objects that implement `IDisposable`."
  },
  {
    "question_no.": 32,
    "Question": "What is garbage collection in C#?",
    "Option1": "A mechanism for manually freeing up memory.",
    "Option2": "An automatic memory management system that reclaims memory occupied by objects that are no longer referenced.",
    "Option3": "A tool for deleting old files.",
    "Option4": "A process of compressing data.",
    "Answer": "An automatic memory management system that reclaims memory occupied by objects that are no longer referenced."
  },
  {
    "question_no.": 33,
    "Question": "Which collection type stores key-value pairs?",
    "Option1": "List<T>",
    "Option2": "Array",
    "Option3": "Dictionary<TKey, TValue>",
    "Option4": "Queue<T>",
    "Answer": "Dictionary<TKey, TValue>"
  },
  {
    "question_no.": 34,
    "Question": "What is an `ArrayList` in C#?",
    "Option1": "A type-safe collection of objects.",
    "Option2": "A dynamic array that can store elements of any data type.",
    "Option3": "A fixed-size array.",
    "Option4": "A specialized list for numbers only.",
    "Answer": "A dynamic array that can store elements of any data type."
  },
  {
    "question_no.": 35,
    "Question": "What is the main advantage of `List<T>` over `ArrayList`?",
    "Option1": "It's faster for small collections.",
    "Option2": "It's type-safe, preventing runtime errors due to incorrect type conversions.",
    "Option3": "It uses less memory.",
    "Option4": "It has more methods for sorting.",
    "Answer": "It's type-safe, preventing runtime errors due to incorrect type conversions."
  },
  {
    "question_no.": 36,
    "Question": "Which loop is guaranteed to execute at least once?",
    "Option1": "for loop",
    "Option2": "while loop",
    "Option3": "do-while loop",
    "Option4": "foreach loop",
    "Answer": "do-while loop"
  },
  {
    "question_no.": 37,
    "Question": "What is the purpose of the `break` statement in loops?",
    "Option1": "To skip the current iteration and proceed to the next.",
    "Option2": "To exit the loop entirely.",
    "Option3": "To restart the loop from the beginning.",
    "Option4": "To pause the loop execution.",
    "Answer": "To exit the loop entirely."
  },
  {
    "question_no.": 38,
    "Question": "What is the purpose of the `continue` statement in loops?",
    "Option1": "To exit the loop entirely.",
    "Option2": "To skip the current iteration and proceed to the next iteration of the loop.",
    "Option3": "To restart the loop from the beginning.",
    "Option4": "To pause the loop execution.",
    "Answer": "To skip the current iteration and proceed to the next iteration of the loop."
  },
  {
    "question_no.": 39,
    "Question": "What is an `enum` in C#?",
    "Option1": "A collection of methods.",
    "Option2": "A set of named integral constants.",
    "Option3": "A type of class that can only hold numbers.",
    "Option4": "A way to define custom data types with properties.",
    "Answer": "A set of named integral constants."
  },
  {
    "question_no.": 40,
    "Question": "By default, what is the underlying type of an `enum` in C#?",
    "Option1": "string",
    "Option2": "byte",
    "Option3": "int",
    "Option4": "char",
    "Answer": "int"
  },
  {
    "question_no.": 41,
    "Question": "What is a `struct` in C#?",
    "Option1": "A reference type, similar to a class.",
    "Option2": "A value type that can contain data members and function members, typically used for small data structures.",
    "Option3": "A special type of interface.",
    "Option4": "A keyword for defining constants.",
    "Answer": "A value type that can contain data members and function members, typically used for small data structures."
  },
  {
    "question_no.": 42,
    "Question": "What is the main difference between a `class` and a `struct` in C#?",
    "Option1": "Classes are value types, structs are reference types.",
    "Option2": "Classes are reference types, structs are value types.",
    "Option3": "Classes can't have methods, structs can.",
    "Option4": "Structs can't have constructors, classes can.",
    "Answer": "Classes are reference types, structs are value types."
  },
  {
    "question_no.": 43,
    "Question": "Which keyword is used to define properties in C#?",
    "Option1": "prop",
    "Option2": "attribute",
    "Option3": "property",
    "Option4": "No specific keyword, defined within the class.",
    "Answer": "No specific keyword, defined within the class."
  },
  {
    "question_no.": 44,
    "Question": "What are auto-implemented properties?",
    "Option1": "Properties that automatically set default values.",
    "Option2": "Properties that provide a shorthand syntax for declaring simple properties without defining explicit `get` and `set` accessors.",
    "Option3": "Properties that can only be set during object creation.",
    "Option4": "Properties that are automatically generated by the compiler.",
    "Answer": "Properties that provide a shorthand syntax for declaring simple properties without defining explicit `get` and `set` accessors."
  },
  {
    "question_no.": 45,
    "Question": "What is an indexer in C#?",
    "Option1": "A special method for searching arrays.",
    "Option2": "A feature that allows an object to be indexed like an array.",
    "Option3": "A property that returns an index.",
    "Option4": "A loop counter.",
    "Answer": "A feature that allows an object to be indexed like an array."
  },
  {
    "question_no.": 46,
    "Question": "What is a delegate in C#?",
    "Option1": "A class that can only hold one method.",
    "Option2": "A type-safe function pointer, allowing methods to be passed as arguments.",
    "Option3": "A special type of event.",
    "Option4": "A variable that can store any type of data.",
    "Answer": "A type-safe function pointer, allowing methods to be passed as arguments."
  },
  {
    "question_no.": 47,
    "Question": "What is an event in C#?",
    "Option1": "A special type of method that can only be called once.",
    "Option2": "A mechanism for communication between objects, allowing one object to notify other objects when something interesting happens.",
    "Option3": "A keyword for defining a new class.",
    "Option4": "A type of loop.",
    "Answer": "A mechanism for communication between objects, allowing one object to notify other objects when something interesting happens."
  },
  {
    "question_no.": 48,
    "Question": "What is the `try-catch-finally` block used for?",
    "Option1": "Defining a new function.",
    "Option2": "Handling exceptions gracefully.",
    "Option3": "Creating a loop with error checking.",
    "Option4": "Declaring variables with default values.",
    "Answer": "Handling exceptions gracefully."
  },
  {
    "question_no.": 49,
    "Question": "Which block always executes, regardless of whether an exception occurred or not?",
    "Option1": "try",
    "Option2": "catch",
    "Option3": "finally",
    "Option4": "else",
    "Answer": "finally"
  },
  {
    "question_no.": 50,
    "Question": "What is the purpose of the `throw` keyword?",
    "Option1": "To catch an exception.",
    "Option2": "To re-throw an exception to an outer `catch` block.",
    "Option3": "To define a new exception.",
    "Option4": "To ignore an exception.",
    "Answer": "To re-throw an exception to an outer `catch` block."
  },
  {
    "question_no.": 51,
    "Question": "What is LINQ in C#?",
    "Option1": "A database management system.",
    "Option2": "Language Integrated Query, a set of technologies for querying data from various data sources.",
    "Option3": "A graphical user interface library.",
    "Option4": "A network communication protocol.",
    "Answer": "Language Integrated Query, a set of technologies for querying data from various data sources."
  },
  {
    "question_no.": 52,
    "Question": "Which operator is used for concatenation of strings in C#?",
    "Option1": "-",
    "Option2": "*",
    "Option3": "+",
    "Option4": "/",
    "Answer": "+"
  },
  {
    "question_no.": 53,
    "Question": "What is a nullable type in C#?",
    "Option1": "A type that can only store null values.",
    "Option2": "A value type that can be assigned `null` in addition to its normal range of values.",
    "Option3": "A reference type that always defaults to null.",
    "Option4": "A type that is used for uninitialized variables.",
    "Answer": "A value type that can be assigned `null` in addition to its normal range of values."
  },
  {
    "question_no.": 54,
    "Question": "How do you declare a nullable integer variable?",
    "Option1": "int? myVar;",
    "Option2": "nullable int myVar;",
    "Option3": "int? myVar = null;",
    "Option4": "Both A and C are valid ways to declare and initialize.",
    "Answer": "int? myVar;"
  },
  {
    "question_no.": 55,
    "Question": "What is the purpose of `using System;` at the beginning of a C# file?",
    "Option1": "It imports the `System` assembly.",
    "Option2": "It tells the compiler to use the `System` namespace, so you don't have to fully qualify types like `Console`.",
    "Option3": "It defines a new variable named `System`.",
    "Option4": "It is a comment.",
    "Answer": "It tells the compiler to use the `System` namespace, so you don't have to fully qualify types like `Console`."
  },
  {
    "question_no.": 56,
    "Question": "What is ` boxing` in C#?",
    "Option1": "Converting a reference type to a value type.",
    "Option2": "Converting a value type to a reference type (e.g., `int` to `object`).",
    "Option3": "Converting a string to an integer.",
    "Option4": "Converting a class to an interface.",
    "Answer": "Converting a value type to a reference type (e.g., `int` to `object`)."
  },
  {
    "question_no.": 57,
    "Question": "What is `unboxing` in C#?",
    "Option1": "Converting a reference type to a value type (e.g., `object` back to `int`).",
    "Option2": "Converting a value type to a reference type.",
    "Option3": "Converting an integer to a string.",
    "Option4": "Converting an interface to a class.",
    "Answer": "Converting a reference type to a value type (e.g., `object` back to `int`)."
  },
  {
    "question_no.": 58,
    "Question": "What is the `checked` keyword used for?",
    "Option1": "To check if a variable is null.",
    "Option2": "To enable overflow checking for arithmetic operations.",
    "Option3": "To check if a condition is true.",
    "Option4": "To check for type compatibility.",
    "Answer": "To enable overflow checking for arithmetic operations."
  },
  {
    "question_no.": 59,
    "Question": "What is the `unchecked` keyword used for?",
    "Option1": "To disable overflow checking for arithmetic operations.",
    "Option2": "To perform a quick check without full validation.",
    "Option3": "To allow null values.",
    "Option4": "To bypass type checking.",
    "Answer": "To disable overflow checking for arithmetic operations."
  },
  {
    "question_no.": 60,
    "Question": "What is `reflection` in C#?",
    "Option1": "The ability of an object to mirror itself.",
    "Option2": "The ability of a program to examine and manipulate its own types, members, and metadata at runtime.",
    "Option3": "A technique for creating self-modifying code.",
    "Option4": "A process of duplicating objects.",
    "Answer": "The ability of a program to examine and manipulate its own types, members, and metadata at runtime."
  },
  {
    "question_no.": 61,
    "Question": "Which namespace contains classes for reflection?",
    "Option1": "System.IO",
    "Option2": "System.Reflection",
    "Option3": "System.Data",
    "Option4": "System.Collections",
    "Answer": "System.Reflection"
  },
  {
    "question_no.": 62,
    "Question": "What is an assembly in .NET?",
    "Option1": "A source code file.",
    "Option2": "A compiled unit of code that serves as the fundamental unit of deployment, versioning, reuse, activation scoping, and security permissions for .NET applications.",
    "Option3": "A collection of namespaces.",
    "Option4": "A special type of method.",
    "Answer": "A compiled unit of code that serves as the fundamental unit of deployment, versioning, reuse, activation scoping, and security permissions for .NET applications."
  },
  {
    "question_no.": 63,
    "Question": "What are the two main types of assemblies?",
    "Option1": "Executable and Library",
    "Option2": "Public and Private",
    "Option3": "Managed and Unmanaged",
    "Option4": "Static and Dynamic",
    "Answer": "Executable and Library"
  },
  {
    "question_no.": 64,
    "Question": "What is GAC in .NET?",
    "Option1": "Global Access Code",
    "Option2": "General Assembly Cache",
    "Option3": "Global Assembly Cache",
    "Option4": "Graphics API Controller",
    "Answer": "Global Assembly Cache"
  },
  {
    "question_no.": 65,
    "Question": "What is the purpose of GAC?",
    "Option1": "To store private assemblies.",
    "Option2": "To store strongly named assemblies that are shared by multiple applications.",
    "Option3": "To cache web pages.",
    "Option4": "To store temporary files.",
    "Answer": "To store strongly named assemblies that are shared by multiple applications."
  },
  {
    "question_no.": 66,
    "Question": "What is a `try-catch` block used for?",
    "Option1": "Conditional execution of code.",
    "Option2": "Handling runtime errors (exceptions).",
    "Option3": "Defining a new class.",
    "Option4": "Looping through collections.",
    "Answer": "Handling runtime errors (exceptions)."
  },
  {
    "question_no.": 67,
    "Question": "What is the `is` operator used for?",
    "Option1": "To check for equality between two values.",
    "Option2": "To check if an object is compatible with a given type.",
    "Option3": "To perform type casting.",
    "Option4": "To define a new type.",
    "Answer": "To check if an object is compatible with a given type."
  },
  {
    "question_no.": 68,
    "Question": "What is the `as` operator used for?",
    "Option1": "To perform an explicit type conversion that throws an exception on failure.",
    "Option2": "To perform a safe type conversion; if the conversion fails, it returns `null` instead of throwing an exception.",
    "Option3": "To compare two objects.",
    "Option4": "To assign a value to a variable.",
    "Answer": "To perform a safe type conversion; if the conversion fails, it returns `null` instead of throwing an exception."
  },
  {
    "question_no.": 69,
    "Question": "What is the `new` keyword used for (multiple correct answers)?",
    "Option1": "To create a new instance of a class.",
    "Option2": "To declare a new variable.",
    "Option3": "To hide a member of a base class with a new member of the same name in a derived class.",
    "Option4": "To define a new method.",
    "Answer": "To create a new instance of a class."
  },
  {
    "question_no.": 70,
    "Question": "What is the `this` keyword used for?",
    "Option1": "To refer to the current instance of the class.",
    "Option2": "To call a static method.",
    "Option3": "To declare a new variable.",
    "Option4": "To refer to the base class.",
    "Answer": "To refer to the current instance of the class."
  },
  {
    "question_no.": 71,
    "Question": "What is the purpose of `sealed` classes?",
    "Option1": "They cannot be instantiated.",
    "Option2": "They cannot be inherited.",
    "Option3": "They can only contain static members.",
    "Option4": "They must implement an interface.",
    "Answer": "They cannot be inherited."
  },
  {
    "question_no.": 72,
    "Question": "What is the difference between `const` and `readonly` fields?",
    "Option1": "`const` is set at runtime, `readonly` at compile time.",
    "Option2": "`const` is set at compile time, `readonly` can be set at runtime (in constructor).",
    "Option3": "`const` can be modified, `readonly` cannot.",
    "Option4": "There is no functional difference.",
    "Answer": "`const` is set at compile time, `readonly` can be set at runtime (in constructor)."
  },
  {
    "question_no.": 73,
    "Question": "Can a `static` class be instantiated?",
    "Option1": "Yes",
    "Option2": "No",
    "Option3": "Only through a static constructor.",
    "Option4": "Only if it has no static members.",
    "Answer": "No"
  },
  {
    "question_no.": 74,
    "Question": "What is a `partial class`?",
    "Option1": "A class that is incomplete and cannot be compiled.",
    "Option2": "A class whose definition can be split into multiple files.",
    "Option3": "A class that can only contain abstract members.",
    "Option4": "A class that is automatically generated.",
    "Answer": "A class whose definition can be split into multiple files."
  },
  {
    "question_no.": 75,
    "Question": "What is the purpose of `IDisposable` interface?",
    "Option1": "To allow objects to be disposed of manually.",
    "Option2": "To provide a mechanism for releasing unmanaged resources.",
    "Option3": "To mark objects as ready for garbage collection.",
    "Option4": "To serialize objects.",
    "Answer": "To provide a mechanism for releasing unmanaged resources."
  },
  {
    "question_no.": 76,
    "Question": "Which method must be implemented when implementing `IDisposable`?",
    "Option1": "Dispose()",
    "Option2": "Close()",
    "Option3": "Release()",
    "Option4": "Cleanup()",
    "Answer": "Dispose()"
  },
  {
    "question_no.": 77,
    "Question": "What is the `yield` keyword used for in C#?",
    "Option1": "To define a static method.",
    "Option2": "To return a value from a method.",
    "Option3": "To create an iterator method, allowing for deferred execution and sequential processing of items.",
    "Option4": "To define a lambda expression.",
    "Answer": "To create an iterator method, allowing for deferred execution and sequential processing of items."
  },
  {
    "question_no.": 78,
    "Question": "What is an `out` parameter?",
    "Option1": "A parameter that can only be passed by value.",
    "Option2": "A parameter that must be initialized before being passed to the method, and its value can be modified by the method.",
    "Option3": "A parameter that must be assigned a value inside the method before the method returns.",
    "Option4": "A parameter that cannot be modified by the method.",
    "Answer": "A parameter that must be assigned a value inside the method before the method returns."
  },
  {
    "question_no.": 79,
    "Question": "What is a `ref` parameter?",
    "Option1": "A parameter whose value is passed by copy.",
    "Option2": "A parameter that must be initialized before being passed to the method, and its value can be modified by the method.",
    "Option3": "A parameter that can be uninitialized.",
    "Option4": "A parameter that is read-only.",
    "Answer": "A parameter that must be initialized before being passed to the method, and its value can be modified by the method."
  },
  {
    "question_no.": 80,
    "Question": "What is the difference between `out` and `ref` parameters?",
    "Option1": "`out` parameters must be initialized before calling the method, `ref` parameters do not.",
    "Option2": "`ref` parameters must be initialized before calling the method, `out` parameters do not.",
    "Option3": "`out` parameters are read-only, `ref` parameters are write-only.",
    "Option4": "There is no functional difference.",
    "Answer": "`ref` parameters must be initialized before calling the method, `out` parameters do not."
  },
  {
    "question_no.": 81,
    "Question": "What is `params` keyword used for?",
    "Option1": "To pass a fixed number of arguments to a method.",
    "Option2": "To allow a method to accept a variable number of arguments of the same type.",
    "Option3": "To define optional method parameters.",
    "Option4": "To pass parameters by reference.",
    "Answer": "To allow a method to accept a variable number of arguments of the same type."
  },
  {
    "question_no.": 82,
    "Question": "Can `params` keyword be used with `ref` or `out`?",
    "Option1": "Yes, with both.",
    "Option2": "Yes, with `ref` only.",
    "Option3": "Yes, with `out` only.",
    "Option4": "No, it cannot be combined with `ref` or `out`.",
    "Answer": "No, it cannot be combined with `ref` or `out`."
  },
  {
    "question_no.": 83,
    "Question": "What is the purpose of `async` and `await` keywords?",
    "Option1": "To manage database transactions.",
    "Option2": "To simplify asynchronous programming, making asynchronous code easier to write and read by enabling non-blocking operations.",
    "Option3": "To define static methods.",
    "Option4": "To create multi-threaded applications manually.",
    "Answer": "To simplify asynchronous programming, making asynchronous code easier to write and read by enabling non-blocking operations."
  },
  {
    "question_no.": 84,
    "Question": "What does `await` keyword do?",
    "Option1": "It waits for a network request to complete.",
    "Option2": "It pauses the execution of the `async` method until the awaited asynchronous operation completes.",
    "Option3": "It creates a new thread.",
    "4": "It throws an exception.",
    "Answer": "It pauses the execution of the `async` method until the awaited asynchronous operation completes."
  },
  {
    "question_no.": 85,
    "Question": "What is a `Task` in C#?",
    "Option1": "A unit of work that can be executed synchronously.",
    "Option2": "A representation of an asynchronous operation that can be waited on.",
    "Option3": "A predefined function.",
    "4": "A type of variable.",
    "Answer": "A representation of an asynchronous operation that can be waited on."
  },
  {
    "question_no.": 86,
    "Question": "What is a `Task<TResult>`?",
    "Option1": "A task that does not return any value.",
    "Option2": "A task that returns a value of type `TResult` when it completes.",
    "Option3": "A task that can only be used with generic types.",
    "4": "A task that processes an array of type `TResult`.",
    "Answer": "A task that returns a value of type `TResult` when it completes."
  },
  {
    "question_no.": 87,
    "Question": "What is the purpose of `Thread.Sleep()`?",
    "Option1": "To pause the execution of the current thread for a specified amount of time.",
    "Option2": "To put the thread into a waiting state until a condition is met.",
    "Option3": "To terminate a thread.",
    "4": "To create a new thread.",
    "Answer": "To pause the execution of the current thread for a specified amount of time."
  },
  {
    "question_no.": 88,
    "Question": "What is the main drawback of `Thread.Sleep()` in UI applications?",
    "Option1": "It consumes too much memory.",
    "Option2": "It blocks the UI thread, making the application unresponsive.",
    "Option3": "It is difficult to implement.",
    "4": "It can only be used in console applications.",
    "Answer": "It blocks the UI thread, making the application unresponsive."
  },
  {
    "question_no.": 89,
    "Question": "What is the purpose of `Parallel.For` and `Parallel.ForEach`?",
    "Option1": "To perform sequential loops.",
    "Option2": "To execute loops in parallel, leveraging multiple cores/processors for faster execution.",
    "Option3": "To create asynchronous methods.",
    "4": "To iterate through collections in reverse order.",
    "Answer": "To execute loops in parallel, leveraging multiple cores/processors for faster execution."
  },
  {
    "question_no.": 90,
    "Question": "What is the TPL in .NET?",
    "Option1": "Testing and Performance Library",
    "Option2": "Task Parallel Library",
    "Option3": "Text Processing Language",
    "4": "Type Protection Layer",
    "Answer": "Task Parallel Library"
  },
  {
    "question_no.": 91,
    "Question": "What is `lambda expression` in C#?",
    "Option1": "A full method declaration.",
    "Option2": "An anonymous function that can be used to create delegates or expression tree types.",
    "Option3": "A special type of class.",
    "4": "A predefined constant.",
    "Answer": "An anonymous function that can be used to create delegates or expression tree types."
  },
  {
    "question_no.": 92,
    "Question": "What is an `anonymous type` in C#?",
    "Option1": "A type that has no name.",
    "Option2": "A type that is defined inline using `new { ... }` and whose properties are inferred from the initialization.",
    "Option3": "A type that can only be used once.",
    "4": "A type that is hidden from other classes.",
    "Answer": "A type that is defined inline using `new { ... }` and whose properties are inferred from the initialization."
  },
  {
    "question_no.": 93,
    "Question": "Can anonymous types be passed as parameters to methods?",
    "Option1": "Yes, directly.",
    "Option2": "No, they are compile-time entities and cannot be directly passed to methods as parameters with their anonymous type.",
    "Option3": "Only if they are converted to `object`.",
    "4": "Only if the method uses `dynamic` keyword.",
    "Answer": "No, they are compile-time entities and cannot be directly passed to methods as parameters with their anonymous type."
  },
  {
    "question_no.": 94,
    "Question": "What is `generics` in C#?",
    "Option1": "A way to define methods that accept any data type.",
    "Option2": "A feature that allows you to define classes, interfaces, and methods with placeholder types, making them reusable and type-safe.",
    "Option3": "A mechanism for creating abstract classes.",
    "4": "A way to define global variables.",
    "Answer": "A feature that allows you to define classes, interfaces, and methods with placeholder types, making them reusable and type-safe."
  },
  {
    "question_no.": 95,
    "Question": "What is the purpose of `try-catch-finally` in exception handling?",
    "Option1": "To define the flow of a program.",
    "Option2": "To ensure that certain code executes whether an exception occurs or not, while also providing a way to handle potential errors.",
    "Option3": "To create a new thread.",
    "4": "To perform database operations.",
    "Answer": "To ensure that certain code executes whether an exception occurs or not, while also providing a way to handle potential errors."
  },
  {
    "question_no.": 96,
    "Question": "What is `ADO.NET`?",
    "Option1": "A framework for building web applications.",
    "Option2": "A set of computer software components that programmers can use to access data and data services from databases.",
    "Option3": "A language for defining user interfaces.",
    "4": "A tool for code generation.",
    "Answer": "A set of computer software components that programmers can use to access data and data services from databases."
  },
  {
    "question_no.": 97,
    "Question": "What are the core components of ADO.NET?",
    "Option1": "DataSet, DataTable, DataRow",
    "Option2": "Connected architecture (DataReader) and Disconnected architecture (DataSet).",
    "Option3": "SQLConnection, SQLCommand, SQLDataReader",
    "4": "All of the above.",
    "Answer": "All of the above."
  },
  {
    "question_no.": 98,
    "Question": "What is the difference between `DataReader` and `DataSet`?",
    "Option1": "`DataReader` is disconnected, `DataSet` is connected.",
    "Option2": "`DataReader` is read-only, forward-only, and connected; `DataSet` is disconnected, in-memory cache, and read/write.",
    "Option3": "`DataReader` is slower than `DataSet`.",
    "4": "There is no functional difference.",
    "Answer": "`DataReader` is read-only, forward-only, and connected; `DataSet` is disconnected, in-memory cache, and read/write."
  },
  {
    "question_no.": 99,
    "Question": "What is an `ORM` (Object-Relational Mapper)?",
    "Option1": "A tool for designing databases.",
    "Option2": "A technique that maps objects in a program to data in a relational database.",
    "Option3": "A type of database.",
    "4": "A protocol for network communication.",
    "Answer": "A technique that maps objects in a program to data in a relational database."
  },
  {
    "question_no.": 100,
    "Question": "Which popular ORM is often used with C# and .NET?",
    "Option1": "Hibernate",
    "Option2": "Entity Framework",
    "Option3": "SQLAlchemy",
    "4": "Dapper",
    "Answer": "Entity Framework"
  },
  {
    "question_no.": 101,
    "Question": "What is `dependency injection`?",
    "Option1": "A way to directly create dependencies within a class.",
    "Option2": "A design pattern where dependencies are provided to a class from the outside, rather than being created by the class itself.",
    "Option3": "A method of securing application data.",
    "4": "A technique for linking external libraries.",
    "Answer": "A design pattern where dependencies are provided to a class from the outside, rather than being created by the class itself."
  },
  {
    "question_no.": 102,
    "Question": "What are the benefits of Dependency Injection?",
    "Option1": "Increased coupling, reduced testability.",
    "Option2": "Increased coupling, increased testability.",
    "Option3": "Reduced coupling, increased testability, easier maintenance.",
    "4": "Reduced coupling, reduced testability.",
    "Answer": "Reduced coupling, increased testability, easier maintenance."
  },
  {
    "question_no.": 103,
    "Question": "What is an `abstract class` in C#?",
    "Option1": "A class that cannot have any methods.",
    "Option2": "A class that can contain abstract methods (without implementation) and concrete methods (with implementation), and cannot be instantiated directly.",
    "Option3": "A class that must be sealed.",
    "4": "A class that only contains static members.",
    "Answer": "A class that can contain abstract methods (without implementation) and concrete methods (with implementation), and cannot be instantiated directly."
  },
  {
    "question_no.": 104,
    "Question": "Can an abstract class have a constructor?",
    "Option1": "No",
    "Option2": "Yes, but it can only be called from a derived class's constructor.",
    "Option3": "Yes, but it can only be a static constructor.",
    "4": "Yes, and it can be called directly.",
    "Answer": "Yes, but it can only be called from a derived class's constructor."
  },
  {
    "question_no.": 105,
    "Question": "What is `virtual` keyword used for in methods?",
    "Option1": "To prevent a method from being overridden.",
    "Option2": "To indicate that a method can be overridden by a derived class.",
    "Option3": "To make a method static.",
    "4": "To make a method abstract.",
    "Answer": "To indicate that a method can be overridden by a derived class."
  },
  {
    "question_no.": 106,
    "Question": "What is `override` keyword used for?",
    "Option1": "To create a new method with the same name as a base class method.",
    "Option2": "To provide a new implementation for a `virtual` or `abstract` method inherited from a base class.",
    "Option3": "To hide a base class method.",
    "4": "To define a static method.",
    "Answer": "To provide a new implementation for a `virtual` or `abstract` method inherited from a base class."
  },
  {
    "question_no.": 107,
    "Question": "What is the difference between `new` and `override` keywords for methods?",
    "Option1": "`new` overrides a method, `override` hides it.",
    "Option2": "`override` overrides a `virtual` or `abstract` method, while `new` hides a base class member with a new member.",
    "Option3": "Both are used for the same purpose.",
    "4": "`new` is for static methods, `override` is for instance methods.",
    "Answer": "`override` overrides a `virtual` or `abstract` method, while `new` hides a base class member with a new member."
  },
  {
    "question_no.": 108,
    "Question": "What is the purpose of `sealed` methods?",
    "Option1": "They cannot be called from outside the class.",
    "Option2": "They prevent a derived class from further overriding a method that has already been overridden.",
    "Option3": "They must be implemented in derived classes.",
    "4": "They can only be called once.",
    "Answer": "They prevent a derived class from further overriding a method that has already been overridden."
  },
  {
    "question_no.": 109,
    "Question": "What is a `struct` method?",
    "Option1": "A method defined inside a `struct`.",
    "Option2": "A method that always returns a `struct`.",
    "Option3": "A static method.",
    "4": "A method that cannot modify any data.",
    "Answer": "A method defined inside a `struct`."
  },
  {
    "question_no.": 110,
    "Question": "Can a `struct` inherit from another `struct`?",
    "Option1": "Yes",
    "Option2": "No",
    "Option3": "Only if they are in the same assembly.",
    "4": "Only if the base `struct` is abstract.",
    "Answer": "No"
  },
  {
    "question_no.": 111,
    "Question": "Can a `struct` implement an interface?",
    "Option1": "Yes",
    "Option2": "No",
    "Option3": "Only if it's a sealed `struct`.",
    "4": "Only if the interface has no methods.",
    "Answer": "Yes"
  },
  {
    "question_no.": 112,
    "Question": "What is the `checked` context in C#?",
    "Option1": "A context where arithmetic operations are always checked for overflow.",
    "Option2": "A context where all method calls are checked for null references.",
    "Option3": "A context where all assignments are checked for type compatibility.",
    "4": "A context where garbage collection is manually controlled.",
    "Answer": "A context where arithmetic operations are always checked for overflow."
  },
  {
    "question_no.": 113,
    "Question": "What is the `unchecked` context in C#?",
    "Option1": "A context where arithmetic operations are never checked for overflow.",
    "Option2": "A context where all method calls are unchecked for null references.",
    "Option3": "A context where all assignments are unchecked for type compatibility.",
    "4": "A context where garbage collection is automatically handled.",
    "Answer": "A context where arithmetic operations are never checked for overflow."
  },
  {
    "question_no.": 114,
    "Question": "What is `dynamic` keyword in C#?",
    "Option1": "It forces strict type checking at compile time.",
    "Option2": "It enables late binding, allowing operations on an object to be resolved at runtime rather than compile time.",
    "Option3": "It is used for defining generic types.",
    "4": "It declares a constant variable.",
    "Answer": "It enables late binding, allowing operations on an object to be resolved at runtime rather than compile time."
  },
  {
    "question_no.": 115,
    "Question": "What is the trade-off of using `dynamic`?",
    "Option1": "Improved performance.",
    "Option2": "Reduced readability.",
    "Option3": "Loss of compile-time type checking, potentially leading to runtime errors.",
    "4": "Increased memory consumption.",
    "Answer": "Loss of compile-time type checking, potentially leading to runtime errors."
  },
  {
    "question_no.": 116,
    "Question": "What is the purpose of `nullable reference types` in C# 8.0 and above?",
    "Option1": "To allow value types to be null.",
    "Option2": "To help prevent `NullReferenceException` by making it explicit whether a reference type can be null or not.",
    "Option3": "To automatically convert null to default values.",
    "4": "To remove the need for null checks.",
    "Answer": "To help prevent `NullReferenceException` by making it explicit whether a reference type can be null or not."
  },
  {
    "question_no.": 117,
    "Question": "How do you declare a nullable reference type in C# 8.0+?",
    "Option1": "string? myString;",
    "Option2": "nullable string myString;",
    "Option3": "string myString? = null;",
    "4": "Both A and C are correct.",
    "Answer": "string? myString;"
  },
  {
    "question_no.": 118,
    "Question": "What is `Pattern Matching` in C#?",
    "Option1": "A way to compare strings.",
    "Option2": "A set of language features that allow you to test whether an object has a certain shape or properties, and extract information from it.",
    "Option3": "A technique for regular expressions.",
    "4": "A method for searching in collections.",
    "Answer": "A set of language features that allow you to test whether an object has a certain shape or properties, and extract information from it."
  },
  {
    "question_no.": 119,
    "Question": "Which C# versions introduced `pattern matching` enhancements?",
    "Option1": "C# 7.0 and C# 8.0",
    "Option2": "C# 6.0 and C# 7.0",
    "Option3": "C# 5.0 and C# 6.0",
    "4": "C# 9.0 and C# 10.0",
    "Answer": "C# 7.0 and C# 8.0"
  },
  {
    "question_no.": 120,
    "Question": "What is a `record` in C# 9.0?",
    "Option1": "A special type of class that is always mutable.",
    "Option2": "A reference type designed for immutable data, providing concise syntax for creating value-based equality and non-destructive mutation.",
    "Option3": "A value type with limited functionality.",
    "4": "A type that can only store primitive data.",
    "Answer": "A reference type designed for immutable data, providing concise syntax for creating value-based equality and non-destructive mutation."
  },
  {
    "question_no.": 121,
    "Question": "What is `Top-level statements` in C# 9.0?",
    "Option1": "Statements at the very top of a class.",
    "Option2": "A feature that allows you to write C# code directly in a `.cs` file without explicitly declaring a `Main` method or `Program` class.",
    "Option3": "Statements that always execute first.",
    "4": "Statements that are only for debugging purposes.",
    "Answer": "A feature that allows you to write C# code directly in a `.cs` file without explicitly declaring a `Main` method or `Program` class."
  },
  {
    "question_no.": 122,
    "Question": "What is `global using directive` in C# 10.0?",
    "Option1": "A `using` directive that applies only to a specific method.",
    "Option2": "A `using` directive that applies to all `.cs` files in a project.",
    "Option3": "A `using` directive that is automatically added by the compiler.",
    "4": "A `using` directive for external libraries only.",
    "Answer": "A `using` directive that applies to all `.cs` files in a project."
  },
  {
    "question_no.": 123,
    "Question": "What is `file-scoped namespaces` in C# 10.0?",
    "Option1": "Namespaces defined within a single method.",
    "Option2": "A feature allowing a namespace declaration to apply to an entire file, reducing indentation and making code cleaner.",
    "Option3": "Namespaces that can only be accessed by a single file.",
    "4": "Namespaces that are automatically generated for each file.",
    "Answer": "A feature allowing a namespace declaration to apply to an entire file, reducing indentation and making code cleaner."
  },
  {
    "question_no.": 124,
    "Question": "What is `const string` in C#?",
    "Option1": "A string that can be changed during runtime.",
    "Option2": "A string whose value is fixed at compile time and cannot be changed.",
    "Option3": "A string that can only be used in a specific method.",
    "4": "A string that holds a numeric value.",
    "Answer": "A string whose value is fixed at compile time and cannot be changed."
  },
  {
    "question_no.": 125,
    "Question": "What is `String.IsNullOrEmpty()` used for?",
    "Option1": "To check if a string contains only whitespace characters.",
    "Option2": "To check if a string is null or an empty string.",
    "Option3": "To check if a string contains any specific characters.",
    "4": "To check the length of a string.",
    "Answer": "To check if a string is null or an empty string."
  },
  {
    "question_no.": 126,
    "Question": "What is `String.IsNullOrWhiteSpace()` used for?",
    "Option1": "To check if a string is null or empty.",
    "Option2": "To check if a string is null, empty, or consists only of white-space characters.",
    "Option3": "To remove whitespace from a string.",
    "4": "To check if a string contains only digits.",
    "Answer": "To check if a string is null, empty, or consists only of white-space characters."
  },
  {
    "question_no.": 127,
    "Question": "What is `StringBuilder` used for?",
    "Option1": "To store a single string.",
    "Option2": "To efficiently manipulate strings, especially when performing multiple concatenations or modifications, as it avoids creating new string objects for each change.",
    "Option3": "To convert strings to numbers.",
    "4": "To compare two strings.",
    "Answer": "To efficiently manipulate strings, especially when performing multiple concatenations or modifications, as it avoids creating new string objects for each change."
  },
  {
    "question_no.": 128,
    "Question": "Why is `StringBuilder` often preferred over `string` concatenation in loops?",
    "Option1": "`StringBuilder` is slower but uses less memory.",
    "Option2": "`string` concatenation creates a new string object in memory with each operation, leading to performance issues and increased memory usage in loops; `StringBuilder` modifies the string in place.",
    "Option3": "`StringBuilder` can only handle small strings.",
    "Option4": "`string` concatenation is deprecated.",
    "Answer": "`string` concatenation creates a new string object in memory with each operation, leading to performance issues and increased memory usage in loops; `StringBuilder` modifies the string in place."
  },
  {
    "question_no.": 129,
    "Question": "What is `DateTime` struct used for?",
    "Option1": "To store time only.",
    "Option2": "To represent a specific point in time, typically expressed as a date and time of day.",
    "Option3": "To store dates only.",
    "4": "To store durations.",
    "Answer": "To represent a specific point in time, typically expressed as a date and time of day."
  },
  {
    "question_no.": 130,
    "Question": "What is `TimeSpan` struct used for?",
    "Option1": "To store a specific date.",
    "Option2": "To represent a time interval or a duration.",
    "Option3": "To store a specific time of day.",
    "4": "To convert dates to strings.",
    "Answer": "To represent a time interval or a duration."
  },
  {
    "question_no.": 131,
    "Question": "What is the purpose of `ToString()` method?",
    "Option1": "To convert any object to a numeric value.",
    "Option2": "To return a string representation of the current object.",
    "Option3": "To convert a string to an object.",
    "4": "To check if an object is null.",
    "Answer": "To return a string representation of the current object."
  },
  {
    "question_no.": 132,
    "Question": "What is `parsing` in C#?",
    "Option1": "Converting a string to another string.",
    "Option2": "Converting a string representation of a value to its actual data type (e.g., `\"123\"` to `123`).",
    "Option3": "Extracting specific parts of a string.",
    "4": "Formatting a string for display.",
    "Answer": "Converting a string representation of a value to its actual data type (e.g., `\"123\"` to `123`)."
  },
  {
    "question_no.": 133,
    "Question": "Which method is commonly used for parsing strings to integers?",
    "Option1": "Convert.ToInt()",
    "Option2": "int.Parse()",
    "Option3": "ToInt32()",
    "4": "Integer.Parse()",
    "Answer": "int.Parse()"
  },
  {
    "question_no.": 134,
    "Question": "What is the difference between `Parse()` and `TryParse()`?",
    "Option1": "`Parse()` throws an exception on failure, `TryParse()` returns `false`.",
    "Option2": "`Parse()` is faster than `TryParse()`.",
    "Option3": "`TryParse()` throws an exception on failure, `Parse()` returns `false`.",
    "4": "There is no functional difference.",
    "Answer": "`Parse()` throws an exception on failure, `TryParse()` returns `false`."
  },
  {
    "question_no.": 135,
    "Question": "What is `casting` in C#?",
    "Option1": "Converting one data type to another, specifically when converting between compatible types (e.g., base class to derived class, or numeric types).",
    "Option2": "Converting an object to a string.",
    "Option3": "Converting a string to a numeric type.",
    "4": "Creating a new object from an existing one.",
    "Answer": "Converting one data type to another, specifically when converting between compatible types (e.g., base class to derived class, or numeric types)."
  },
  {
    "question_no.": 136,
    "Question": "What is `implicit casting`?",
    "Option1": "Casting that requires explicit syntax.",
    "Option2": "Casting that is performed automatically by the compiler without explicit syntax, typically when converting from a smaller to a larger type.",
    "Option3": "Casting that is only done at runtime.",
    "4": "Casting that involves custom conversion logic.",
    "Answer": "Casting that is performed automatically by the compiler without explicit syntax, typically when converting from a smaller to a larger type."
  },
  {
    "question_no.": 137,
    "Question": "What is `explicit casting`?",
    "Option1": "Casting that is performed automatically by the compiler.",
    "Option2": "Casting that requires explicit syntax (e.g., `(int)myDouble`), typically when converting from a larger to a smaller type or between potentially incompatible types.",
    "Option3": "Casting that always throws an exception.",
    "4": "Casting that works only for string conversions.",
    "Answer": "Casting that requires explicit syntax (e.g., `(int)myDouble`), typically when converting from a larger to a smaller type or between potentially incompatible types."
  },
  {
    "question_no.": 138,
    "Question": "What is `Array` in C#?",
    "Option1": "A dynamic collection of elements.",
    "Option2": "A fixed-size, ordered collection of elements of the same data type.",
    "Option3": "A collection that stores key-value pairs.",
    "4": "A collection that can grow or shrink in size.",
    "Answer": "A fixed-size, ordered collection of elements of the same data type."
  },
  {
    "question_no.": 139,
    "Question": "How do you declare an array of integers with 5 elements?",
    "Option1": "int[] myArray = new int[5];",
    "Option2": "int myArray[5];",
    "Option3": "Array<int> myArray(5);",
    "4": "int myArray = {5};",
    "Answer": "int[] myArray = new int[5];"
  },
  {
    "question_no.": 140,
    "Question": "What is `Jagged Array` in C#?",
    "Option1": "An array of arrays, where each inner array can have a different size.",
    "Option2": "A two-dimensional array with fixed rows and columns.",
    "Option3": "An array that can only store strings.",
    "4": "An array that stores mixed data types.",
    "Answer": "An array of arrays, where each inner array can have a different size."
  },
  {
    "question_no.": 141,
    "Question": "What is `Multidimensional Array` (Rectangular Array) in C#?",
    "Option1": "An array of arrays with varying sizes.",
    "Option2": "An array with more than one dimension, where each row has the same number of columns.",
    "Option3": "An array that stores only two elements.",
    "4": "An array that changes its dimensions dynamically.",
    "Answer": "An array with more than one dimension, where each row has the same number of columns."
  },
  {
    "question_no.": 142,
    "Question": "What is `Collection` in C#?",
    "Option1": "A single variable.",
    "Option2": "A group of objects treated as a single unit, providing ways to store, retrieve, and manipulate data.",
    "Option3": "A type of loop.",
    "4": "A keyword for defining a class.",
    "Answer": "A group of objects treated as a single unit, providing ways to store, retrieve, and manipulate data."
  },
  {
    "question_no.": 143,
    "Question": "What is `IEnumerable<T>` interface?",
    "Option1": "An interface for adding items to a collection.",
    "Option2": "An interface that provides an enumerator to iterate over a collection (read-only access).",
    "Option3": "An interface for sorting collections.",
    "4": "An interface for modifying collections.",
    "Answer": "An interface that provides an enumerator to iterate over a collection (read-only access)."
  },
  {
    "question_no.": 144,
    "Question": "What is `ICollection<T>` interface?",
    "Option1": "An interface for read-only collections.",
    "Option2": "An interface that extends `IEnumerable<T>` and provides methods for adding, removing, and clearing items in a collection.",
    "Option3": "An interface for fixed-size collections.",
    "4": "An interface for parallel processing of collections.",
    "Answer": "An interface that extends `IEnumerable<T>` and provides methods for adding, removing, and clearing items in a collection."
  },
  {
    "question_no.": 145,
    "Question": "What is `IList<T>` interface?",
    "Option1": "An interface that only allows adding elements.",
    "Option2": "An interface that extends `ICollection<T>` and provides methods for indexed access (e.g., by index) and manipulation of elements.",
    "Option3": "An interface for key-value pair collections.",
    "4": "An interface for unordered collections.",
    "Answer": "An interface that extends `ICollection<T>` and provides methods for indexed access (e.g., by index) and manipulation of elements."
  },
  {
    "question_no.": 146,
    "Question": "What is `IDictionary<TKey, TValue>` interface?",
    "Option1": "An interface for ordered lists.",
    "Option2": "An interface that represents a generic collection of key-value pairs.",
    "Option3": "An interface for storing only values.",
    "4": "An interface for single-dimensional arrays.",
    "Answer": "An interface that represents a generic collection of key-value pairs."
  },
  {
    "question_no.": 147,
    "Question": "What is a `Queue<T>`?",
    "Option1": "A collection that stores elements in a Last-In, First-Out (LIFO) manner.",
    "Option2": "A collection that stores elements in a First-In, First-Out (FIFO) manner.",
    "Option3": "A collection that allows random access to elements.",
    "4": "A collection that stores unique elements.",
    "Answer": "A collection that stores elements in a First-In, First-Out (FIFO) manner."
  },
  {
    "question_no.": 148,
    "Question": "What is a `Stack<T>`?",
    "Option1": "A collection that stores elements in a First-In, First-Out (FIFO) manner.",
    "Option2": "A collection that stores elements in a Last-In, First-Out (LIFO) manner.",
    "Option3": "A collection that allows random access to elements.",
    "4": "A collection that stores key-value pairs.",
    "Answer": "A collection that stores elements in a Last-In, First-Out (LIFO) manner."
  },
  {
    "question_no.": 149,
    "Question": "What is `HashSet<T>`?",
    "Option1": "A collection that stores duplicate elements.",
    "Option2": "A collection that stores unique elements and provides high-performance set operations.",
    "Option3": "A collection that maintains the order of elements.",
    "4": "A collection that is thread-safe by default.",
    "Answer": "A collection that stores unique elements and provides high-performance set operations."
  },
  {
    "question_no.": 150,
    "Question": "What is `SortedDictionary<TKey, TValue>`?",
    "Option1": "A dictionary that does not maintain order.",
    "Option2": "A dictionary that stores key-value pairs and keeps them sorted by key.",
    "Option3": "A dictionary that sorts by value.",
    "4": "A dictionary that only stores numbers.",
    "Answer": "A dictionary that stores key-value pairs and keeps them sorted by key."
  },
  {
    "question_no.": 151,
    "Question": "What is `SortedList<TKey, TValue>`?",
    "Option1": "Similar to `SortedDictionary` but more memory efficient for smaller collections.",
    "Option2": "Faster for large collections than `SortedDictionary`.",
    "Option3": "Does not support duplicate keys.",
    "4": "Does not support values.",
    "Answer": "Similar to `SortedDictionary` but more memory efficient for smaller collections."
  },
  {
    "question_no.": 152,
    "Question": "What is the `using static` directive in C# 6.0 and later?",
    "Option1": "It allows you to use instance methods without an object.",
    "Option2": "It allows you to import static members of a class directly, so you don't have to qualify them with the class name.",
    "Option3": "It makes all methods in a class static.",
    "4": "It is used for garbage collection.",
    "Answer": "It allows you to import static members of a class directly, so you don't have to qualify them with the class name."
  },
  {
    "question_no.": 153,
    "Question": "What is `Null-conditional operator` (`?.`) in C# 6.0 and later?",
    "Option1": "It allows you to perform an operation on an object only if the object is not null, otherwise it returns null.",
    "Option2": "It checks if an object is null and throws an exception.",
    "Option3": "It assigns a default value if an object is null.",
    "4": "It is used for null-coalescing.",
    "Answer": "It allows you to perform an operation on an object only if the object is not null, otherwise it returns null."
  },
  {
    "question_no.": 154,
    "Question": "What is `String Interpolation` in C# 6.0 and later?",
    "Option1": "A way to compare strings.",
    "Option2": "A syntactic sugar for `String.Format()`, allowing you to embed expressions directly within string literals.",
    "Option3": "A method for encrypting strings.",
    "4": "A way to concatenate strings using `+` operator.",
    "Answer": "A syntactic sugar for `String.Format()`, allowing you to embed expressions directly within string literals."
  },
  {
    "question_no.": 155,
    "Question": "What is `Expression-bodied members` in C# 6.0 and later?",
    "Option1": "Methods that are always empty.",
    "Option2": "A concise syntax for defining methods, properties, and other members whose implementation consists of a single expression.",
    "Option3": "Members that only return expressions.",
    "4": "Members that are automatically generated.",
    "Answer": "A concise syntax for defining methods, properties, and other members whose implementation consists of a single expression."
  },
  {
    "question_no.": 156,
    "Question": "What is `name of expression` in C# 6.0 and later?",
    "Option1": "It returns the value of a variable.",
    "Option2": "It returns the name of a variable, type, or member as a string, useful for logging, throwing exceptions, or binding to UI.",
    "Option3": "It checks if a variable is named correctly.",
    "4": "It converts a string to a variable name.",
    "Answer": "It returns the name of a variable, type, or member as a string, useful for logging, throwing exceptions, or binding to UI."
  },
  {
    "question_no.": 157,
    "Question": "What is `Exception Filters` in C# 6.0 and later?",
    "Option1": "A way to prevent exceptions from being thrown.",
    "Option2": "A feature that allows you to specify a condition for a `catch` block, so that the block is only executed if the condition is true.",
    "Option3": "A mechanism for logging exceptions.",
    "4": "A way to re-throw exceptions.",
    "Answer": "A feature that allows you to specify a condition for a `catch` block, so that the block is only executed if the condition is true."
  },
  {
    "question_no.": 158,
    "Question": "What is `local functions` in C# 7.0 and later?",
    "Option1": "Functions that can only be called from other classes.",
    "Option2": "Functions defined inside another method, allowing for encapsulation and avoiding polluting the class scope.",
    "Option3": "Functions that are only available within a specific file.",
    "4": "Functions that are always static.",
    "Answer": "Functions defined inside another method, allowing for encapsulation and avoiding polluting the class scope."
  },
  {
    "question_no.": 159,
    "Question": "What is `Tuple literals and deconstruction` in C# 7.0 and later?",
    "Option1": "A way to define arrays with mixed types.",
    "Option2": "A lightweight way to group multiple values into a single compound value, and to easily extract values from tuples back into individual variables.",
    "Option3": "A way to convert objects to strings.",
    "4": "A method for creating anonymous types.",
    "Answer": "A lightweight way to group multiple values into a single compound value, and to easily extract values from tuples back into individual variables."
  },
  {
    "question_no.": 160,
    "Question": "What is `ref returns and ref locals` in C# 7.0 and later?",
    "Option1": "Returning a copy of a value.",
    "Option2": "Allowing methods to return a reference to a variable, and allowing local variables to be references to other variables.",
    "Option3": "Returning a null value.",
    "4": "Returning a static variable.",
    "Answer": "Allowing methods to return a reference to a variable, and allowing local variables to be references to other variables."
  },
  {
    "question_no.": 161,
    "Question": "What is `async Main` in C# 7.1 and later?",
    "Option1": "A `Main` method that runs synchronously.",
    "Option2": "The ability to define the `Main` method as `async Task` or `async Task<int>`, simplifying asynchronous console applications.",
    "Option3": "A `Main` method that never returns.",
    "4": "A `Main` method that creates a new thread for every operation.",
    "Answer": "The ability to define the `Main` method as `async Task` or `async Task<int>`, simplifying asynchronous console applications."
  },
  {
    "question_no.": 162,
    "Question": "What is `Default interface methods` in C# 8.0 and later?",
    "Option1": "Interfaces that can only have abstract methods.",
    "Option2": "The ability to add methods with implementations to interfaces, allowing interfaces to evolve without breaking existing implementations.",
    "Option3": "Interfaces that can only have private methods.",
    "4": "Interfaces that can only have static methods.",
    "Answer": "The ability to add methods with implementations to interfaces, allowing interfaces to evolve without breaking existing implementations."
  },
  {
    "question_no.": 163,
    "Question": "What is `Readonly members` in C# 8.0 and later?",
    "Option1": "Members that can only be read, never written to.",
    "Option2": "Members in structs that do not modify the struct's state, enabling the compiler to optimize their usage.",
    "Option3": "Members that are always constant.",
    "4": "Members that are automatically generated.",
    "Answer": "Members in structs that do not modify the struct's state, enabling the compiler to optimize their usage."
  },
  {
    "question_no.": 164,
    "Question": "What is `Target-typed new expressions` in C# 9.0 and later?",
    "Option1": "Requiring explicit type declaration for `new` expressions.",
    "Option2": "The ability to omit the type name in a `new` expression when the type can be inferred from the context.",
    "Option3": "A way to create anonymous objects.",
    "4": "A feature for creating generic objects.",
    "Answer": "The ability to omit the type name in a `new` expression when the type can be inferred from the context."
  },
  {
    "question_no.": 165,
    "Question": "What is `init-only setters` in C# 9.0 and later?",
    "Option1": "Setters that can only be called from within the class.",
    "Option2": "Property setters that can only be called during object initialization, enabling immutable properties after construction.",
    "Option3": "Setters that can only be called once.",
    "4": "Setters that only accept initialized values.",
    "Answer": "Property setters that can only be called during object initialization, enabling immutable properties after construction."
  },
  {
    "question_no.": 166,
    "Question": "What is `Data Annotations` in C#?",
    "Option1": "Comments in code.",
    "Option2": "Attributes that can be applied to classes and properties to define metadata, often used for validation, display, and database mapping.",
    "Option3": "A way to store data in a database.",
    "4": "A technique for performance profiling.",
    "Answer": "Attributes that can be applied to classes and properties to define metadata, often used for validation, display, and database mapping."
  },
  {
    "question_no.": 167,
    "Question": "Which namespace contains common Data Annotation attributes?",
    "Option1": "System.Data",
    "Option2": "System.ComponentModel.DataAnnotations",
    "Option3": "System.Web",
    "4": "System.Security",
    "Answer": "System.ComponentModel.DataAnnotations"
  },
  {
    "question_no.": 168,
    "Question": "What is the `[Required]` attribute used for?",
    "Option1": "To make a property read-only.",
    "Option2": "To specify that a data field is required.",
    "Option3": "To hide a property from external access.",
    "4": "To define a default value for a property.",
    "Answer": "To specify that a data field is required."
  },
  {
    "question_no.": 169,
    "Question": "What is the `[StringLength]` attribute used for?",
    "Option1": "To specify the exact length of a string.",
    "Option2": "To specify the minimum and/or maximum length of a string data field.",
    "Option3": "To convert a string to a specific length.",
    "4": "To check if a string is empty.",
    "Answer": "To specify the minimum and/or maximum length of a string data field."
  },
  {
    "question_no.": 170,
    "Question": "What is the `[Range]` attribute used for?",
    "Option1": "To specify a range of acceptable values for a numeric data field.",
    "Option2": "To specify the range of characters in a string.",
    "Option3": "To define a range of dates.",
    "4": "To create a range of objects.",
    "Answer": "To specify a range of acceptable values for a numeric data field."
  },
  {
    "question_no.": 171,
    "Question": "What is the `[EmailAddress]` attribute used for?",
    "Option1": "To validate that a string is a valid email address format.",
    "Option2": "To store email addresses securely.",
    "Option3": "To send emails.",
    "4": "To retrieve email addresses from a database.",
    "Answer": "To validate that a string is a valid email address format."
  },
  {
    "question_no.": 172,
    "Question": "What is `IComparable<T>` interface?",
    "Option1": "An interface for comparing objects for equality.",
    "Option2": "An interface that defines a method for comparing two objects of the same type in a specific order.",
    "Option3": "An interface for checking if objects are null.",
    "4": "An interface for converting objects to strings.",
    "Answer": "An interface that defines a method for comparing two objects of the same type in a specific order."
  },
  {
    "question_no.": 173,
    "Question": "What is `IComparer<T>` interface?",
    "Option1": "An interface for comparing objects for equality.",
    "Option2": "An interface that defines a method for comparing two objects of the same type, typically used to provide custom comparison logic for sorting.",
    "Option3": "An interface for checking if objects are null.",
    "4": "An interface for converting objects to strings.",
    "Answer": "An interface that defines a method for comparing two objects of the same type, typically used to provide custom comparison logic for sorting."
  },
  {
    "question_no.": 174,
    "Question": "What is the difference between `IComparable<T>` and `IComparer<T>`?",
    "Option1": "`IComparable<T>` is for external comparison, `IComparer<T>` is for internal comparison.",
    "Option2": "`IComparable<T>` allows an object to compare itself with another object, while `IComparer<T>` allows a separate class to compare two objects.",
    "Option3": "`IComparable<T>` is for sorting, `IComparer<T>` is for searching.",
    "4": "There is no functional difference.",
    "Answer": "`IComparable<T>` allows an object to compare itself with another object, while `IComparer<T>` allows a separate class to compare two objects."
  },
  {
    "question_no.": 175,
    "Question": "What is `Delegates` used for in events?",
    "Option1": "To define the event handler method signature.",
    "Option2": "To raise the event.",
    "Option3": "To subscribe to the event.",
    "4": "To store event data.",
    "Answer": "To define the event handler method signature."
  },
  {
    "question_no.": 176,
    "Question": "What is `Event Handlers` in C#?",
    "Option1": "Methods that raise events.",
    "Option2": "Methods that are invoked when an event occurs.",
    "Option3": "Classes that manage events.",
    "4": "Objects that store event data.",
    "Answer": "Methods that are invoked when an event occurs."
  },
  {
    "question_no.": 177,
    "Question": "What is `EventArgs` class used for in events?",
    "Option1": "To define the event name.",
    "Option2": "To provide data for an event, typically by inheriting from it and adding custom properties.",
    "Option3": "To handle event subscriptions.",
    "4": "To store the event source.",
    "Answer": "To provide data for an event, typically by inheriting from it and adding custom properties."
  },
  {
    "question_no.": 178,
    "Question": "What is the purpose of `sealed` keyword on an `override` method?",
    "Option1": "To allow further overriding in derived classes.",
    "Option2": "To prevent further overriding of that specific method in any derived classes.",
    "Option3": "To make the method abstract.",
    "4": "To make the method static.",
    "Answer": "To prevent further overriding of that specific method in any derived classes."
  },
  {
    "question_no.": 179,
    "Question": "What is `var` keyword used for in C#?",
    "Option1": "To declare a dynamic type.",
    "Option2": "To declare an implicitly typed local variable, where the compiler infers the type from the initialization expression.",
    "Option3": "To declare a global variable.",
    "4": "To declare a constant.",
    "Answer": "To declare an implicitly typed local variable, where the compiler infers the type from the initialization expression."
  },
  {
    "question_no.": 180,
    "Question": "When can `var` keyword NOT be used?",
    "Option1": "When initializing with a literal value.",
    "Option2": "When the type cannot be inferred from the initialization expression (e.g., uninitialized variables, method parameters).",
    "Option3": "When declaring an integer.",
    "4": "When declaring a string.",
    "Answer": "When the type cannot be inferred from the initialization expression (e.g., uninitialized variables, method parameters)."
  },
  {
    "question_no.": 181,
    "Question": "What is `nullable types` useful for?",
    "Option1": "To allow reference types to be null.",
    "Option2": "To handle database columns that can contain null values, particularly for value types.",
    "Option3": "To prevent all null reference exceptions.",
    "4": "To automatically convert null to default values.",
    "Answer": "To handle database columns that can contain null values, particularly for value types."
  },
  {
    "question_no.": 182,
    "Question": "What is the `null-coalescing operator` (`??`) in C#?",
    "Option1": "It throws an exception if the left-hand operand is null.",
    "Option2": "It returns the left-hand operand if it's not null; otherwise, it returns the right-hand operand.",
    "Option3": "It checks if both operands are null.",
    "4": "It converts null to an empty string.",
    "Answer": "It returns the left-hand operand if it's not null; otherwise, it returns the right-hand operand."
  },
  {
    "question_no.": 183,
    "Question": "What is the `null-forgiving operator` (`!`) in C# 8.0 and later?",
    "Option1": "It prevents a `NullReferenceException` from occurring.",
    "Option2": "It tells the compiler that you know an expression is not null, suppressing nullable warnings.",
    "Option3": "It converts a nullable type to a non-nullable type.",
    "4": "It assigns a default value to a null variable.",
    "Answer": "It tells the compiler that you know an expression is not null, suppressing nullable warnings."
  },
  {
    "question_no.": 184,
    "Question": "What is `Dispose pattern` in C#?",
    "Option1": "A pattern for destroying objects manually.",
    "Option2": "A pattern for implementing the `IDisposable` interface correctly, ensuring proper release of unmanaged resources.",
    "Option3": "A pattern for creating disposable objects.",
    "4": "A pattern for recycling objects.",
    "Answer": "A pattern for implementing the `IDisposable` interface correctly, ensuring proper release of unmanaged resources."
  },
  {
    "question_no.": 185,
    "Question": "Why is `GC.SuppressFinalize(this);` often called in the `Dispose` method?",
    "Option1": "To force immediate garbage collection.",
    "Option2": "To prevent the finalizer from being called, as resources are already explicitly released by `Dispose`.",
    "Option3": "To make the object immutable.",
    "4": "To register the object for finalization.",
    "Answer": "To prevent the finalizer from being called, as resources are already explicitly released by `Dispose`."
  },
  {
    "question_no.": 186,
    "Question": "What is a `Finalizer` (or Destructor) in C#?",
    "Option1": "A method called before the constructor.",
    "Option2": "A special method called by the Garbage Collector before an object is reclaimed, used for releasing unmanaged resources.",
    "Option3": "A method used to initialize static members.",
    "4": "A method for destroying files.",
    "Answer": "A special method called by the Garbage Collector before an object is reclaimed, used for releasing unmanaged resources."
  },
  {
    "question_no.": 187,
    "Question": "When should you implement a `Finalizer`?",
    "Option1": "Always, for every class.",
    "Option2": "When your class directly owns unmanaged resources (e.g., file handles, network connections) that need to be explicitly released.",
    "Option3": "Never, as it's handled by `Dispose`.",
    "4": "Only for value types.",
    "Answer": "When your class directly owns unmanaged resources (e.g., file handles, network connections) that need to be explicitly released."
  },
  {
    "question_no.": 188,
    "Question": "What is `Multithreading` in C#?",
    "Option1": "Executing multiple programs sequentially.",
    "Option2": "Executing multiple parts of a program concurrently as separate threads, allowing for parallel execution and responsiveness.",
    "Option3": "A way to manage multiple data sources.",
    "4": "A technique for creating complex user interfaces.",
    "Answer": "Executing multiple parts of a program concurrently as separate threads, allowing for parallel execution and responsiveness."
  },
  {
    "question_no.": 189,
    "Question": "What is a `Thread`?",
    "Option1": "A separate process.",
    "Option2": "A lightweight unit of execution within a process, sharing the same memory space as other threads in the same process.",
    "Option3": "A single instruction.",
    "4": "A type of variable.",
    "Answer": "A lightweight unit of execution within a process, sharing the same memory space as other threads in the same process."
  },
  {
    "question_no.": 190,
    "Question": "What is `Thread Safety`?",
    "Option1": "Ensuring a thread runs without errors.",
    "Option2": "Ensuring that code behaves correctly when accessed concurrently by multiple threads, typically by using synchronization mechanisms.",
    "Option3": "Preventing threads from crashing the application.",
    "4": "Ensuring a thread always completes its execution.",
    "Answer": "Ensuring that code behaves correctly when accessed concurrently by multiple threads, typically by using synchronization mechanisms."
  },
  {
    "question_no.": 191,
    "Question": "Which mechanism is used for thread synchronization to protect shared resources?",
    "Option1": "if-else statements",
    "Option2": "try-catch blocks",
    "Option3": "locks (e.g., `lock` keyword, `Monitor`)",
    "4": "Delegates",
    "Answer": "locks (e.g., `lock` keyword, `Monitor`)"
  },
  {
    "question_no.": 192,
    "Question": "What is a `Deadlock` in multithreading?",
    "Option1": "A thread that has terminated.",
    "Option2": "A situation where two or more threads are blocked indefinitely, waiting for each other to release a resource.",
    "Option3": "A thread that is not active.",
    "4": "A thread that is stuck in an infinite loop.",
    "Answer": "A situation where two or more threads are blocked indefinitely, waiting for each other to release a resource."
  },
  {
    "question_no.": 193,
    "Question": "What is `Race Condition` in multithreading?",
    "Option1": "A competition between threads to finish first.",
    "Option2": "A situation where the outcome of concurrent operations depends on the relative order of execution, leading to unpredictable results.",
    "Option3": "A condition where threads always execute in a specific order.",
    "4": "A condition that prevents threads from starting.",
    "Answer": "A situation where the outcome of concurrent operations depends on the relative order of execution, leading to unpredictable results."
  },
  {
    "question_no.": 194,
    "Question": "What is the purpose of `Thread.Join()` method?",
    "Option1": "To start a new thread.",
    "Option2": "To wait for a thread to terminate.",
    "Option3": "To combine two threads.",
    "4": "To pause a thread.",
    "Answer": "To wait for a thread to terminate."
  },
  {
    "question_no.": 195,
    "Question": "What is `ThreadPool` in C#?",
    "Option1": "A collection of user-defined threads.",
    "Option2": "A collection of pre-created and managed worker threads that can be reused for various tasks, reducing the overhead of creating new threads.",
    "Option3": "A mechanism for creating new processes.",
    "4": "A tool for debugging threads.",
    "Answer": "A collection of pre-created and managed worker threads that can be reused for various tasks, reducing the overhead of creating new threads."
  },
  {
    "question_no.": 196,
    "Question": "What is `Task.Run()` used for?",
    "Option1": "To run a task synchronously.",
    "Option2": "To execute a `delegate` or `lambda expression` on a `ThreadPool` thread, returning a `Task` that represents the ongoing operation.",
    "Option3": "To create a new thread with specific properties.",
    "4": "To cancel a running task.",
    "Answer": "To execute a `delegate` or `lambda expression` on a `ThreadPool` thread, returning a `Task` that represents the ongoing operation."
  },
  {
    "question_no.": 197,
    "Question": "What is the advantage of `Task.Run()` over `new Thread()`?",
    "Option1": "`Task.Run()` provides more control over thread properties.",
    "Option2": "`Task.Run()` leverages the `ThreadPool` for efficiency, reducing overhead associated with creating and destroying threads manually.",
    "Option3": "`Task.Run()` is always synchronous.",
    "4": "`new Thread()` is deprecated.",
    "Answer": "`Task.Run()` leverages the `ThreadPool` for efficiency, reducing overhead associated with creating and destroying threads manually."
  },
  {
    "question_no.": 198,
    "Question": "What is `BlockingCollection<T>` used for?",
    "Option1": "A collection that prevents elements from being added.",
    "Option2": "A thread-safe collection that provides blocking and bounding capabilities, useful for producer-consumer scenarios.",
    "Option3": "A collection that blocks threads from accessing it.",
    "4": "A collection that only stores fixed-size data.",
    "Answer": "A thread-safe collection that provides blocking and bounding capabilities, useful for producer-consumer scenarios."
  },
  {
    "question_no.": 199,
    "Question": "What is `ConcurrentBag<T>` used for?",
    "Option1": "A collection that guarantees order.",
    "Option2": "A thread-safe, unordered collection that allows for efficient adding and removing of elements from any thread.",
    "Option3": "A collection for storing unique elements.",
    "4": "A collection that only allows read access.",
    "Answer": "A thread-safe, unordered collection that allows for efficient adding and removing of elements from any thread."
  },
  {
    "question_no.": 200,
    "Question": "What is `ConcurrentDictionary<TKey, TValue>`?",
    "Option1": "A dictionary that is not thread-safe.",
    "Option2": "A thread-safe implementation of a dictionary, allowing multiple threads to add or retrieve key-value pairs concurrently.",
    "Option3": "A dictionary that stores only numbers.",
    "4": "A dictionary that does not allow duplicate keys.",
    "Answer": "A thread-safe implementation of a dictionary, allowing multiple threads to add or retrieve key-value pairs concurrently."
  },
  {
    "question_no.": 201,
    "Question": "What is `ConcurrentQueue<T>`?",
    "Option1": "A non-thread-safe FIFO collection.",
    "Option2": "A thread-safe implementation of a queue (FIFO), allowing multiple threads to enqueue and dequeue items concurrently.",
    "Option3": "A thread-safe LIFO collection.",
    "4": "A queue that only stores unique elements.",
    "Answer": "A thread-safe implementation of a queue (FIFO), allowing multiple threads to enqueue and dequeue items concurrently."
  },
  {
    "question_no.": 202,
    "Question": "What is `ConcurrentStack<T>`?",
    "Option1": "A non-thread-safe LIFO collection.",
    "Option2": "A thread-safe implementation of a stack (LIFO), allowing multiple threads to push and pop items concurrently.",
    "Option3": "A thread-safe FIFO collection.",
    "4": "A stack that only stores unique elements.",
    "Answer": "A thread-safe implementation of a stack (LIFO), allowing multiple threads to push and pop items concurrently."
  }
]